     1                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                                  ; copyrght.asm -- Copyright notice and startup jump
     3                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     4                                  ;
     5                                  ;   This version is for assembly by  NASM 0.98.39 or later
     6                                  ;
     7                                  ; Copyright (C) 2017,2020 John R. Coffman.  All rights reserved.
     8                                  ; Licensed for hobbyist use only.
     9                                  ; For use on the RetroBrew SBC-188 & SBC-188v3 boards.
    10                                  ;
    11                                  ; This program is free software: you can redistribute it and/or modify
    12                                  ; it under the terms of the GNU General Public License as published by
    13                                  ; the Free Software Foundation, either version 3 of the License, or
    14                                  ; (at your option) any later version.
    15                                  ;
    16                                  ; This program is distributed in the hope that it will be useful,
    17                                  ; but WITHOUT ANY WARRANTY; without even the implied warranty of
    18                                  ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    19                                  ; GNU General Public License for more details.
    20                                  ;
    21                                  ; You should have received a copy of the GNU General Public License
    22                                  ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
    23                                  ;
    24                                  ;
    25                                  ; SBC-188 board revisions:
    26                                  ;       1.0     production board
    27                                  ;	2.0	production board with errata
    28                                  ;------------------------------------------------------------------------
    29                                  ;	3.0	2 x 512k SRAM chips, GALs for glue logic
    30                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    31                                  	cpu	186
    32                                  %include	"config.asm"
    33                              <1> ;/*
    34                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    35                              <1> ; ANSI.CFG
    36                              <1> ;   Copied to CONFIG.ASM for general release.
    37                              <1> ;
    38                              <1> ;       Modify the parameters below to reflect your system
    39                              <1> ;
    40                              <1> ;
    41                              <1> ;   This version is for assembly by  NASM 0.98.39 or later
    42                              <1> ;
    43                              <1> ;   Copyright (C) 2010,2011 John R. Coffman.  All rights reserved.
    44                              <1> ;   Provided for hobbyist use on the N8VEM SBC-188 board.
    45                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    46                              <1> ;
    47                              <1> ; Define the serial terminal that the Video BIOS must emulate
    48                              <1> ; Set one of the following to 1
    49                              <1> ; If you have no idea what to choose, set TTY to 1
    50                              <1> TTY     equ     0       ; hardcopy -- cannot position the cursor
    51                              <1> DUMB    equ     0       ; dumb CRT -- ^H, ^J, ^K, ^L can move the cursor
    52                              <1> ANSI    equ     1       ; very smart, like a VT-100
    53                              <1> WYSE    equ     0       ; very smart Wyse series (30, 50, ...)
    54                              <1> ; others may get added in the future
    55                              <1> ;  ONE OF THE ABOVE must BE SET TO 1!!!!!
    56                              <1> ;
    57                              <1> ; Define the UART startup bit rate - 1200-19200 are most common
    58                              <1> ;UART_RATE	equ	0		; 1200
    59                              <1> ;UART_RATE	equ	1		; 2400
    60                              <1> ;UART_RATE	equ	2		; 4800
    61                              <1> UART_RATE	equ	3		; 9600
    62                              <1> ;UART_RATE	equ	4		; 19200
    63                              <1> ;UART_RATE	equ	5		; 38400
    64                              <1> ;UART_RATE	equ	6		; 57600
    65                              <1> ;UART_RATE	equ	7		; 115200
    66                              <1> 
    67                              <1> ; Does the serial terminal use the DSR/DTR protocol for flow control?
    68                              <1> ;UART_DSR_PROTOCOL	equ		1	; Yes!
    69                              <1> UART_DSR_PROTOCOL       equ             WYSE    ; Wyse always uses it
    70                              <1> 						; but not ANSI
    71                              <1> ; Define the size of the ROM image on the system in Kilobytes
    72                              <1> ; It may be smaller than the actual EPROM in use.
    73                              <1> ; The following sizes are supported:  32, 64, 128, and 256
    74                              <1> %ifndef ROM
    75                              <1> ROM             equ     32              ; 64 is the default
    76                              <1> %endif
    77                              <1> 
    78                              <1> ; Define the number of Wait States at which the ROM operates
    79                              <1> ROM_WS          equ     1               ; 0..3  (1 is the default)
    80                              <1> 
    81                              <1> ; Define the size in Kilobytes of DOS RAM (low SRAM plus EMM allocate RAM)
    82                              <1> ; This is a desired size and will only be present if a 4MEM board is added
    83                              <1> RAM_DOS         equ     640
    84                              <1> 
    85                              <1> ; Define the size of the low SRAM on the system in Kilobytes
    86                              <1> ; the default is 512 kilobytes
    87                              <1> RAM             equ     512             ; (512 is the default)
    88                              <1> 
    89                              <1> ; Define the number of Wait States at which the RAM operates
    90                              <1> RAM_WS          equ     0               ; 0..3  (0 is the default)
    91                              <1> 
    92                              <1> ; Define the number of Wait States for Local Peripheral devices (600-7FF)
    93                              <1> LCL_IO_WS       equ     1               ; 0..3  (1 is the default)
    94                              <1> 
    95                              <1> ; Define the number of Wait States for ECB BUS peripheral devices (4xx)
    96                              <1> BUS_IO_WS       equ     3               ; 0..3  (3 is the default)
    97                              <1> 
    98                              <1> ; Define the time zone in which we build the Relocatable BIOS
    99                              <1> %ifndef TIMEZONE
   100                              <1> %define TIMEZONE "CST"
   101                              <1> %endif
   102                              <1> 
   103                              <1> ; Has the REDBUG debugger been loaded?
   104                              <1> %ifndef SOFT_DEBUG
   105                              <1> %define SOFT_DEBUG 0
   106                              <1> %endif
   107                              <1> 
   108                              <1> ; Should the BIOS include "Tiny BASIC" in the image?
   109                              <1> %ifndef TBASIC
   110                              <1> TBASIC          equ     1		; default is 1
   111                              <1> %endif
   112                              <1> 
   113                              <1> ; Should the BIOS include the Floating Point Emulator?  The 80188 does
   114                              <1> ; not allow a floating point co-processor, so this is probably a good idea.
   115                              <1> %ifndef FPEM
   116                              <1> FPEM            equ     1               ; default is 1
   117                              <1> %endif
   118                              <1> 
   119                              <1> ; Should the Floating Point Emulator use temporary storage in the EBDA
   120                              <1> ; or at locations 0280h..3FFh in low memory?
   121                              <1> %if SOFT_DEBUG
   122                              <1> FPEM_USE_EBDA   equ     FPEM            ; default is 0
   123                              <1> %else
   124                              <1> FPEM_USE_EBDA   equ     0; FPEM            ; default is 0
   125                              <1> %endif
   126                              <1> 
   127                              <1> ; Define the size of the EPROM that is to be installed on the system
   128                              <1> ; It may be larger than the actual ROM image to be generated.
   129                              <1> %ifndef CHIP
   130                              <1> CHIP            equ     64
   131                              <1> %endif
   132                              <1> 
   133                              <1> ; Define the UART oscillator speed
   134                              <1> UART_OSC        equ     1843200         ; 1.8432 Mhz is specified
   135                              <1> 
   136                              <1> 
   137                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   138                              <1> ; end of the User configuration
   139                              <1> ;       Do Not modify anything below this point
   140                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   141                              <1> 
   142                              <1> ; Define existence of any uart chip
   143                              <1> UART		equ	TTY+DUMB+ANSI+WYSE
   144                              <1> startuplength   equ     512                     ; may be up to 1024
   145                              <1> startseg        equ     0FFFFh - (ROM*64) + 1
   146                              <1> highrom         equ     (ROM*400h)&0FFFFh
   147                              <1> startupseg      equ     0FFFFh - (startuplength>>4) + 1
   148                              <1> bios_data_seg   equ     040h            ; segment of BIOS data area
   149                              <1> 
   150                              <1> 
   151                              <1> %define ARG(n) [bp+2+(n)*2]
   152                              <1> 
   153                              <1> %macro  check   1.nolist
   154                              <1>  %if (%1)
   155                              <1>    %error Check Failure: %1
   156                              <1>  %endif
   157                              <1> %endm
   158                              <1> %macro  range   3.nolist
   159                              <1>  %if (%1)<(%2)
   160                              <1>    %error Out of Range: %1
   161                              <1>  %elif (%1)>(%3)
   162                              <1>    %error Out of Range: %1
   163                              <1>  %endif
   164                              <1> %endm
   165                              <1> _terminal equ UART
   166                              <1>  check   RAM_DOS&15
   167                              <1>  check   RAM&(RAM-1)
   168                              <1>  check   ROM&(ROM-1)
   169                              <1>  range   RAM,32,512
   170                              <1>  range   ROM,32,256
   171                              <1>  range   RAM_WS,0,3
   172                              <1>  range   ROM_WS,0,3
   173                              <1>  range   RAM_DOS,RAM,(1024-ROM)
   174                              <1>  range   LCL_IO_WS,0,3
   175                              <1>  range   BUS_IO_WS,0,3
   176                              <1>  range   UART_OSC,500000,16000000
   177                              <1>  range   UART_RATE,0,7
   178                              <1>  range	 UART,0,1
   179                              <1>  range	 _terminal,1,2
   180                              <1> 
   181                              <1> %ifndef SOFT_DEBUG
   182                              <1> %define SOFT_DEBUG 0
   183                              <1> %endif
   184                              <1> 
   185                              <1> %ifndef TRACE
   186                              <1> %define TRACE 0
   187                              <1> %endif
   188                              <1> 
   189                              <1> %ifdef MAKE_OBJECT_FILE
   190                              <1>         segment _DATA WORD PUBLIC CLASS=DATA
   191                              <1>         export _ROMsize
   192                              <1>         export _CHIPsize
   193                              <1> _ROMsize        dw      ROM
   194                              <1> _CHIPsize       dw      CHIP
   195                              <1> %endif
   196                              <1> ; end of the Hardware configuration file
   197                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   198                              <1> ;*/
    33                                  %include	"cpuregs.asm"
    34                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    35                              <1> ; CPUREGS.ASM
    36                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    37                              <1> ;
    38                              <1> ;   This version is for assembly by  NASM 0.98.39 or later
    39                              <1> ;
    40                              <1> ; Copyright (C) 2010,2011 John R. Coffman.  All rights reserved.
    41                              <1> ; Provided for hobbyist use on the N8VEM SBC-188 board.
    42                              <1> ;
    43                              <1> ; This program is free software: you can redistribute it and/or modify
    44                              <1> ; it under the terms of the GNU General Public License as published by
    45                              <1> ; the Free Software Foundation, either version 3 of the License, or
    46                              <1> ; (at your option) any later version.
    47                              <1> ;
    48                              <1> ; This program is distributed in the hope that it will be useful,
    49                              <1> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
    50                              <1> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    51                              <1> ; GNU General Public License for more details.
    52                              <1> ;
    53                              <1> ; You should have received a copy of the GNU General Public License
    54                              <1> ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
    55                              <1> ;
    56                              <1> ; Updated for the Duodyne 80c188 SBC
    57                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    58                              <1> %include	"macros.inc"
    59                              <2> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    60                              <2> ; MACROS.INC  
    61                              <2> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    62                              <2> ;
    63                              <2> ;   This version is for assembly by  NASM 0.98.39 or later
    64                              <2> ;
    65                              <2> ; Copyright (C) 2010,2011 John R. Coffman.  All rights reserved.
    66                              <2> ; Provided for hobbyist use on the N8VEM SBC-188 board.
    67                              <2> ;
    68                              <2> ; This program is free software: you can redistribute it and/or modify
    69                              <2> ; it under the terms of the GNU General Public License as published by
    70                              <2> ; the Free Software Foundation, either version 3 of the License, or
    71                              <2> ; (at your option) any later version.
    72                              <2> ;
    73                              <2> ; This program is distributed in the hope that it will be useful,
    74                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
    75                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    76                              <2> ; GNU General Public License for more details.
    77                              <2> ;
    78                              <2> ; You should have received a copy of the GNU General Public License
    79                              <2> ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
    80                              <2> ;
    81                              <2> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    82                              <2> 
    83                              <2> ; general macros for the SBC188 BIOS ASSEMBLY
    84                              <2> ;
    85                              <2> ;
    86                              <2> %ifndef __MACROS_DEFINED_
    87                              <2> %define __MACROS_DEFINED_ 1
    88                              <2> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    89                              <2> ;
    90                              <2> ; some useful macros:
    91                              <2> ;
    92                              <2> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    93                              <2> ;
    94                              <2> 	cpu	186
    95                              <2> 
    96                              <2> %imacro setloc  1.nolist
    97                              <2>  times   (%1-($-$$)) db 0FFh
    98                              <2> %endm
    99                              <2> 
   100                              <2> %imacro db_lo   1
   101                              <2>  db (%1)&255
   102                              <2> %endm
   103                              <2> 
   104                              <2> %imacro cnop    0.nolist
   105                              <2> %if SOFT_DEBUG
   106                              <2>         nop
   107                              <2> %endif
   108                              <2> %endm
   109                              <2> 
   110                              <2> %imacro popm 1-*.nolist
   111                              <2> %rep %0
   112                              <2> %ifidni %1,ALL
   113                              <2>  popa
   114                              <2> %elifidni %1,F
   115                              <2>  popf
   116                              <2> %else
   117                              <2>  pop %1
   118                              <2> %ifidni %1,DS
   119                              <2>  cnop
   120                              <2> %elifidni %1,ES
   121                              <2>  cnop
   122                              <2> %endif
   123                              <2> %endif
   124                              <2> %rotate 1
   125                              <2> %endrep
   126                              <2> %endm
   127                              <2> 
   128                              <2> %imacro pushm 1-*.nolist
   129                              <2> %rep %0
   130                              <2> %rotate -1
   131                              <2> %ifidni %1,ALL
   132                              <2>  pusha
   133                              <2> %elifidni %1,F
   134                              <2>  pushf
   135                              <2> %else
   136                              <2>  push %1
   137                              <2> %endif
   138                              <2> %endrep
   139                              <2> %endm
   140                              <2> 
   141                              <2> ;
   142                              <2> ; added from the 386EX project
   143                              <2> ;
   144                              <2> 
   145                              <2> ; call arguments
   146                              <2> %define ARG(n) [bp+2+(n)*2]
   147                              <2> 
   148                              <2> ;
   149                              <2> ; format of the BYTE initialization table:  address, byte
   150                              <2> ;
   151                              <2> %imacro  binit 2
   152                              <2>         dw      %1
   153                              <2>         db      %2
   154                              <2> %endmacro
   155                              <2> ; end with DW -1
   156                              <2> 
   157                              <2> ;
   158                              <2> ; format of the WORD initialization table:  address, word
   159                              <2> ;
   160                              <2> %imacro  winit 2
   161                              <2>         dw      %1
   162                              <2>         dw      %2
   163                              <2> %endmacro
   164                              <2> ; end with DW -1
   165                              <2> 
   166                              <2> 
   167                              <2> ; get the BIOS Data Area segment pointer to a [segment] register
   168                              <2> %imacro get_bda	1.nolist
   169                              <2> 	push	0x0040
   170                              <2> 	pop	%1
   171                              <2> 	cnop
   172                              <2> %endm
   173                              <2> 
   174                              <2> 
   175                              <2> %endif
    59                              <1> 
    60                              <1> 	cpu     186
    61                              <1> ;
    62                              <1> ;
    63                              <1> ; IBM model byte -- must be less than a 286
    64                              <1> ;
    65                              <1> 
    66                              <1> MODEL_BYTE		equ	0FEh	; PC-XT
    67                              <1> SUBMODEL_BYTE		equ	00h	;  "
    68                              <1> 
    69                              <1> 
    70                              <1> ; 80188 peripheral control register block address
    71                              <1> CPU_CSCR	        equ	0FF00h
    72                              <1> 
    73                              <1> ; Compatible Mode registers
    74                              <1> 
    75                              <1> cpu_relocation          equ     CPU_CSCR+0FEh
    76                              <1> 
    77                              <1> ; The memory and peripheral chip select register offsets from 0FF00h
    78                              <1> 
    79                              <1> cpu_umcs                equ     CPU_CSCR+0A0h          ; Upper memory select
    80                              <1> cpu_lmcs                equ     CPU_CSCR+0A2h          ; Lower memory select
    81                              <1> cpu_pacs                equ     CPU_CSCR+0A4h          ; Peripheral select
    82                              <1> cpu_mmcs                equ     CPU_CSCR+0A6h          ; Middle memory base
    83                              <1> cpu_mpcs                equ     CPU_CSCR+0A8h          ; Mid mem. & peripherals
    84                              <1> 
    85                              <1> ; Enhanced Mode registers
    86                              <1> 
    87                              <1> cpu_mdram               equ     CPU_CSCR+0E0h          ; memory partition reg.
    88                              <1> cpu_cdram               equ     CPU_CSCR+0E2h          ; clock prescaler
    89                              <1> cpu_edram               equ     CPU_CSCR+0E4h          ; Enable refresh reg.
    90                              <1> cpu_pdcon               equ     CPU_CSCR+0F0h          ; Power-Save control
    91                              <1> 
    92                              <1> 
    93                              <1> ; On-board internal peripheral equates
    94                              <1> ; Programmable Interrupt Controller
    95                              <1> PIC	        equ	CPU_CSCR+020H
    96                              <1> PIC_EOI	        equ	PIC+2           ; End Of Interrupt
    97                              <1> PIC_POLLR	equ	PIC+4
    98                              <1> PIC_POLLSR	equ	PIC+6
    99                              <1> PIC_IMASK	equ	PIC+8
   100                              <1> PIC_PMREG	equ	PIC+0AH
   101                              <1> PIC_SRVR	equ	PIC+0CH
   102                              <1> PIC_IRQR	equ	PIC+0EH
   103                              <1> PIC_IRQSR	equ	PIC+10H
   104                              <1> PIC_TCR	        equ	PIC+12H
   105                              <1> PIC_DMA0CR	equ	PIC+14H
   106                              <1> PIC_DMA1CR	equ	PIC+16H
   107                              <1> PIC_I0CON	equ	PIC+18H
   108                              <1> PIC_I1CON	equ	PIC+1AH
   109                              <1> PIC_I2CON	equ	PIC+1CH
   110                              <1> PIC_I3CON	equ	PIC+1EH
   111                              <1> 
   112                              <1> EOI_NSPEC       equ     8000h           ; Non-Specific EOI
   113                              <1> 
   114                              <1> ; Interrupt masks (Master Mode)
   115                              <1> ;
   116                              <1> mask_timer_all          equ     0001h
   117                              <1> mask_dma0               equ     0004h
   118                              <1> mask_dma1               equ     0008h
   119                              <1> mask_int0               equ     0010h
   120                              <1> mask_int1               equ     0020h
   121                              <1> mask_int2               equ     0040h
   122                              <1> mask_int3               equ     0080h
   123                              <1> 
   124                              <1> 
   125                              <1> 
   126                              <1> ; Timers
   127                              <1> TIM0	        equ	CPU_CSCR+050H
   128                              <1> TIM1	        equ	CPU_CSCR+058H
   129                              <1> TIM2	        equ	CPU_CSCR+060H
   130                              <1> 
   131                              <1> TCNT	        equ	0	; count register
   132                              <1> CMPA	        equ	2	; max count A
   133                              <1> CMPB	        equ	4	; max count B (not present on TIM2)
   134                              <1> TCON	        equ	6	; mode/control word
   135                              <1> 
   136                              <1> ; Timer control bits:
   137                              <1> tc_EN           equ     8000h   ; Enable bit
   138                              <1> tc_nINH         equ     4000h   ; not Inhibit Enable
   139                              <1> tc_INT          equ     2000h   ; Interrupt Enable
   140                              <1> tc_RIU          equ     1000h   ; Register A/B (0/1) in Use
   141                              <1> tc_MC           equ     0020h   ; Maximum Count reached
   142                              <1> tc_RTG          equ     0010h   ; Retrigger (internal source)
   143                              <1> tc_P            equ     0008h   ; Prescale internal clock (timers 0 & 1 only)
   144                              <1> tc_EXT          equ     0004h   ; External clock
   145                              <1> tc_ALT          equ     0002h   ; Alternate between A & B max count registers
   146                              <1> tc_CONT         equ     0001h   ; Continuous: continue after max count
   147                              <1> 
   148                              <1> 
   149                              <1> 
   150                              <1> 
   151                              <1> ; DMA
   152                              <1> DMA0	        equ	CPU_CSCR+0C0H
   153                              <1> DMA1	        equ	CPU_CSCR+0D0H
   154                              <1> DMASPL	        equ	0	; source pointer low
   155                              <1> DMASPU	        equ	2	; source pointer high
   156                              <1> DMADPL	        equ	4	; destination pointer low
   157                              <1> DMADPU	        equ	6	; destination pointer high
   158                              <1> DMATC	        equ	8	; terminal count
   159                              <1> DMACW	        equ	0AH	; control word
   160                              <1> 
   161                              <1> 
   162                              <1> 
   163                              <1> 
   164                              <1> 
   165                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   166                              <1> ;
   167                              <1> ;       SBC-188 external devices
   168                              <1> ;
   169                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   170                              <1> 
   171                              <1> IO_BASE			equ	0400h
   172                              <1> 
   173                              <1> 
   174                              <1> 
   175                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   176                              <1> ; The UART registers (Duodyne SBC 80c188 Console port)
   177                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   178                              <1> 
   179                              <1> uart_base               equ     IO_BASE+0280h
   180                              <1> uart_rbr                equ     uart_base       ;Rcvr Buffer / read only
   181                              <1> uart_thr                equ     uart_base       ;Transmit Holding / write only
   182                              <1> uart_ier                equ     uart_base+1     ;Interrupt Enable
   183                              <1> uart_iir                equ     uart_base+2     ;Interrupt Ident / read only
   184                              <1> uart_fcr                equ     uart_base+2     ;FIFO Control / write only
   185                              <1> uart_lcr                equ     uart_base+3     ;Line Control
   186                              <1> uart_mcr                equ     uart_base+4     ;Modem Control
   187                              <1> uart_lsr                equ     uart_base+5     ;Line Status
   188                              <1> uart_msr                equ     uart_base+6     ;Modem Status
   189                              <1> uart_sr			equ	uart_base+7	;Scratch
   190                              <1> 
   191                              <1> uart_dll                equ     uart_base       ;Divisor Latch LS Byte
   192                              <1> uart_dlm                equ     uart_base+1     ;Divisor Latch MS Byte
   193                              <1> 
   194                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   195                              <1> ; CONTROL LS259 PORT  (DuoDyne 80C188)
   196                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   197                              <1> CTRL259		equ	IO_BASE+0238H
   198                              <1> ; LEDS are at addresses 0..3
   199                              <1> ; other control ports on 4..7
   200                              <1> LED0		equ	CTRL259+0
   201                              <1> LED1		equ	LED0+1
   202                              <1> LED2		equ	LED0+2
   203                              <1> LED3		equ	LED0+3
   204                              <1> T1OSC18		equ	CTRL259+4	; ON=1.8432mhz, OFF="1" (for use of TIMER2)
   205                              <1> ;unused		equ	CTRL259+5
   206                              <1> ;unused		equ	CTRL259+6
   207                              <1> ;unused		equ	CTRL259+7
   208                              <1> 
   209                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   210                              <1> ; Front Panel Connector  (DuoDyne 80C188)
   211                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   212                              <1> FRONT_PANEL_LED	equ	IO_BASE+0230H
   213                              <1> 
   214                              <1> 
   215                              <1> 
   216                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   217                              <1> ; Floppy controller (Duodyne Disk IO)
   218                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   219                              <1> FDC	        equ	IO_BASE+0080H
   220                              <1> FDC_MSR         equ     FDC
   221                              <1> FDC_DATA        equ     FDC+1
   222                              <1> FDC_TC	        equ	FDC+2
   223                              <1> FDC_RES	        equ	FDC+3
   224                              <1> FDC_LDCR	equ	FDC+5
   225                              <1> FDC_LDOR	equ	FDC+6
   226                              <1> FDC_DACK        equ	FDC+6
   227                              <1> FDC_DACK_TC     equ     FDC+7
   228                              <1> 
   229                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   230                              <1> ; CH376 controller (Duodyne Multi IO)
   231                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   232                              <1> CH376	        equ	IO_BASE+004EH
   233                              <1> 
   234                              <1> 
   235                              <1> 
   236                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   237                              <1> ;DS1302 RTC (Duodyne Ram/ROM Card)
   238                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   239                              <1> RTC	equ	IO_BASE+0094H
   240                              <1> 
   241                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   242                              <1> ; PIO 82C55 I/O  (Duodyne Disk IO)
   243                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   244                              <1> PPI	        equ	IO_BASE+0088H
   245                              <1> 
   246                              <1> PIO_A	        equ	PPI+0	; (OUTPUT)
   247                              <1> PIO_B	        equ	PPI+1	; (INPUT)
   248                              <1> PIO_C	        equ	PPI+2	; (CENTRONICS control low nibble)
   249                              <1> PIO_CTRL	equ	PPI+3	; CONTROL BYTE PIO 82C55
   250                              <1> 
   251                              <1> portA           equ     PPI+0   ;
   252                              <1> portB           equ     PPI+1   ;
   253                              <1> portC           equ     PPI+2   ;
   254                              <1> 
   255                              <1> ; end CPUREGS.ASM
    34                                  %include	"date.asm"
    35                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    36                              <1> ; date.asm
    37                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    38                              <1> ; string 0 is for "startup.asm" inclusion; must be 8 chars exactly
    39                              <1> ; string 1 is for RBIOS.ASM inclusion; should be very readable
    40                              <1> ;
    41                              <1> ; N.B.  version 46 is Rich Cini's version for the 2S1P board
    42                              <1> ;
    43                              <1> ; so we jump from BIOS 045 to 047, the first BIOS to support
    44                              <1> ; the Version 3.0 board (with 1024K memory on-board)
    45                              <1> ;
    46                              <1> ; Definitions for version 3.5-2:
    47                              <1> ;
    48                              <1> ; Updated for the Duodyne 80c188 SBC
    49                              <1> 
    50                              <1> %define DATE_STRING0	"10/27/24"
    51                              <1> %define DATE_STRING1	"27-Oct-2024"
    52                              <1> 
    53                              <1> %define VERSION_MAJOR		3
    54                              <1> %define VERSION_MINOR		5
    55                              <1> %define VERSION_REVISION	2
    56                              <1> %define VERSION_SUFFIX		""
    57                              <1> %define VERSION_SEQUENCE	66
    58                              <1> 
    59                              <1> %define VERSION_STRING		"3.5-D",VERSION_SUFFIX
    60                              <1> 
    61                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    62                              <1> ; Revision information:
    63                              <1> ;  ver.	2.1 -- table-driven support for all IBM floppy types
    64                              <1> ;	2.2 -- Dual IDE driver; CVDU memory sizing
    65                              <1> ;	2.3 -- font_vga corrects (i grave) (n_tilde)
    66                              <1> ;	    &  Dual SDcard & Minix boot
    67                              <1> ;	2.4 -- Int 15h multiprogramming hooks: fn90, fn91 (never done)
    68                              <1> ;	3.0 -- VGA3 support
    69                              <1> ;	3.1 -- SBC-188 v.3 board support
    70                              <1> ;	3.2 -- IDE8 support on the v.3 board
    71                              <1> ;	3.3 -- add 2S1P board support (2 SIO & PPort)
    72                              <1> ;	3.4 -- floppy drives did not work
    73                              <1> ;	3.5 -- back to 3.3, sequence #51
    74                              <1> ;		change NVRAM battery backup setup to #53
    75                              <1> ;		re-install 3.4 boot fix for FreeDOS
    76                              <1> ;       3.5-D  Remove SBC-188 specific items and customize for Duodyne
    77                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    35                                  %include	"equates.asm"
    36                              <1> ;========================================================================
    37                              <1> ; EQUATES.ASM -- Lots of Defintions for Relocatable BIOS
    38                              <1> ;========================================================================
    39                              <1> ;   for the N8VEM SBC-188 v.00.4 and 00.5
    40                              <1> ;
    41                              <1> ;   This version is for assembly by  NASM 0.98.39 or later
    42                              <1> ;
    43                              <1> ; Copyright (C) 2010 John R. Coffman.  All rights reserved.
    44                              <1> ; Provided for hobbyist use on the N8VEM SBC-188 board.
    45                              <1> ;
    46                              <1> ; This program is free software: you can redistribute it and/or modify
    47                              <1> ; it under the terms of the GNU General Public License as published by
    48                              <1> ; the Free Software Foundation, either version 3 of the License, or
    49                              <1> ; (at your option) any later version.
    50                              <1> ;
    51                              <1> ; This program is distributed in the hope that it will be useful,
    52                              <1> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
    53                              <1> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    54                              <1> ; GNU General Public License for more details.
    55                              <1> ;
    56                              <1> ; You should have received a copy of the GNU General Public License
    57                              <1> ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
    58                              <1> ;
    59                              <1> ;========================================================================
    60                              <1> 
    61                              <1>         global  FPEM_segment
    62                              <1> 
    63                              <1> 
    64                              <1> %include "segdef.asm"
    65                              <2> ;========================================================================
    66                              <2> ; SEGDEF.ASM -- Lots of Defintions for Relocatable BIOS
    67                              <2> ;========================================================================
    68                              <2> ;   for the N8VEM SBC-188 v.00.4 and 00.5
    69                              <2> ;
    70                              <2> ;   This version is for assembly by  NASM 0.98.39 or later
    71                              <2> ;
    72                              <2> ; Copyright (C) 2010 John R. Coffman.  All rights reserved.
    73                              <2> ; Provided for hobbyist use on the N8VEM SBC-188 board.
    74                              <2> ;
    75                              <2> ; This program is free software: you can redistribute it and/or modify
    76                              <2> ; it under the terms of the GNU General Public License as published by
    77                              <2> ; the Free Software Foundation, either version 3 of the License, or
    78                              <2> ; (at your option) any later version.
    79                              <2> ;
    80                              <2> ; This program is distributed in the hope that it will be useful,
    81                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
    82                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    83                              <2> ; GNU General Public License for more details.
    84                              <2> ;
    85                              <2> ; You should have received a copy of the GNU General Public License
    86                              <2> ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
    87                              <2> ;
    88                              <2> ;========================================================================
    89                              <2> 
    90                              <2> %ifndef __SEGDEF_
    91                              <2> %define __SEGDEF_
    92                              <2> 
    93                              <2> 	SEGMENT  _TEXT ALIGN=2 PUBLIC CLASS=CODE
    94                              <2>         SEGMENT  CONST ALIGN=2 PUBLIC CLASS=DATA
    95                              <2>         SEGMENT  CONST2 ALIGN=2 PUBLIC CLASS=DATA
    96                              <2> 	SEGMENT  _DATA ALIGN=16 PUBLIC CLASS=DATA
    97                              <2> 	SEGMENT  _BSS  ALIGN=2 PUBLIC CLASS=BSS
    98                              <2> ;;;        SEGMENT  _BASIC ALIGN=16 PUBLIC CLASS=BASIC
    99                              <2> 
   100                              <2> 	GROUP	DGROUP CONST CONST2 _DATA _BSS
   101                              <2> 
   102                              <2> %endif
   103                              <2> 
    65                              <1> %include "ascii.asm"
    66                              <2> ; ascii.asm
    67                              <2> ;
    68                              <2> CTRL            equ     1Fh     ; masks a character to CTRL-x
    69                              <2> 
    70                              <2> NUL     equ     00h
    71                              <2> BEL     equ     (CTRL & 'G')
    72                              <2> BS      equ     08h		; ^H
    73                              <2> HT      equ     09h		; ^I
    74                              <2> LF	equ	0Ah		; ^J
    75                              <2> NL      equ     LF
    76                              <2> VT	equ	0Bh		; ^K
    77                              <2> FWD	equ	0Ch		; ^L
    78                              <2> CR	equ	0Dh
    79                              <2> XON     equ     (CTRL & 'Q')
    80                              <2> XOFF    equ     (CTRL & 'S')
    81                              <2> DC1     equ     XON
    82                              <2> DC3     equ     XOFF
    83                              <2> ESC     equ	1Bh
    84                              <2> 
    85                              <2> 
    66                              <1> 
    67                              <1> 
    68                              <1> ; POST error codes. Presently one byte but can expand to word.
    69                              <1> ER_BIOS equ	01h		; Bad ROM bios checksum, patch last byte
    70                              <1> ER_RAM	equ	02h		; Bad RAM in main memory, replace
    71                              <1> ER_CRT	equ	04h		; Bad RAM in video card, replace
    72                              <1> ER_FDC	equ	08h		; Bad FDC
    73                              <1> ER_UNK1	equ	10h		; {unassigned}
    74                              <1> ER_MEM	equ	20h		; Bad RAM in vector area, replace
    75                              <1> ER_ROM	equ	40h		; Bad ROM in expansion area, bad checksum
    76                              <1> ER_UNK2	equ	80h		; {unassigned}
    77                              <1> 
    78                              <1> 
    79                              <1> 
    80                              <1> ;; ************************ BIOS Data Segment ******************************
    81                              <1> ;; BIOS data segment - not all will  be used
    82                              <1> ;                struc   BIOS_DATA_AREA  ; at 0040:0000
    83                              <1> %include "bda.inc"
    84                              <2> ;/*======================================================================
    85                              <2> ; bda.inc -- BIOS data area definitions
    86                              <2> ;========================================================================
    87                              <2> ;   for the N8VEM SBC-188
    88                              <2> ;
    89                              <2> ;   This version is for assembly by  NASM 0.98.39 or later
    90                              <2> ;
    91                              <2> ; Copyright (C) 2013 John R. Coffman.  All rights reserved.
    92                              <2> ; Provided for hobbyist use on the N8VEM SBC-188 board.
    93                              <2> ;
    94                              <2> ; This program is free software: you can redistribute it and/or modify
    95                              <2> ; it under the terms of the GNU General Public License as published by
    96                              <2> ; the Free Software Foundation, either version 3 of the License, or
    97                              <2> ; (at your option) any later version.
    98                              <2> ;
    99                              <2> ; This program is distributed in the hope that it will be useful,
   100                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
   101                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   102                              <2> ; GNU General Public License for more details.
   103                              <2> ;
   104                              <2> ; You should have received a copy of the GNU General Public License
   105                              <2> ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
   106                              <2> ;
   107                              <2> ;========================================================================
   108                              <2> 
   109                              <2> 			;*/ extern				/*
   110                              <2> 	ABSOLUTE  0	;*/ struct BDA {			/*
   111 00000000 ????????????????    <2> serial_ports    resw    4	;*/	word	serial_ports[4];	/*
   112 00000008 ????????????????    <2> parallel_ports  resw    4	;*/	word	parallel_ports[4];	/*
   113 00000010 ????                <2> equipment_flag  resw    1	;*/	EQFL	equipment_flag;		/*
   114                              <2> ;	dw	?		; 40:10 	; Equipment present word
   115                              <2> ;  						;  = (1 iff floppies) *     1.
   116                              <2> ;                                               ;  + (1 iff 187     ) *     2.
   117                              <2> ;  						;  + (#+1 64K sys ram) *    4.
   118                              <2> ;  						;  + (init crt mode ) *    16.
   119                              <2> ;  						;  + (# of floppies ) *    64.
   120                              <2> ;  						;  + (# serial ports) *   512.
   121                              <2> ;  						;  + (1 iff toy port) *  4096.
   122                              <2> ;                                               ;  + (1 iff modem   ) *  8192.
   123                              <2> ;  						;  + (# parallel LPT) * 16384.
   124 00000012 ??                  <2> mfg_test_flags  resb    1	;*/	byte	mfg_test_flags;	/* 40:12 unused by us
   125 00000013 ????                <2> memory_size     resw    1	;*/	word	memory_size;	/* 40:13 kilobytes
   126                              <2> uart_kbd_ctrl_R	equ	$	;*/				/*** JRC: count of ctrl-R's for reboot
   127 00000015 ??                  <2> IPL_errors      resb    1	;*/	byte	IPL_errors;	/* 40:15 IPL errors<-table/scratchpad
   128 00000016 ??                  <2> sbc188_rev       resb    1	;*/	byte	sbc188_rev;	/* was 'unused_01' before BIOS047
   129                              <2> ;;---------------[Keyboard data area]------------;
   130 00000017 ????                <2> keyboard_flags_0 resw   1	;*/	word	keyboard_flags_0;  /* 40:17 Shift/Alt/etc. keyboard flags
   131                              <2> keyboard_flags_1 equ	$-1	;     2nd byte	keyboard_flags_1;
   132 00000019 ??                  <2> keypad_char	resb	1	;*/	byte	keypad_char;	/* 40:19 Alt-KEYPAD char. goes here
   133 0000001A ????                <2> kbd_buffer_head resw    1	;*/	word	kbd_buffer_head;   /* 40:1A --> keyboard buffer head
   134 0000001C ????                <2> kbd_buffer_tail resw    1	;*/	word	kbd_buffer_tail;   /* 40:1C --> keyboard buffer tail
   135 0000001E <res 20h>           <2> kbd_buffer      resw    16	;*/	word	kbd_buffer[16];	/* 40:1E Keyboard Buffer (Scan,Value)
   136                              <2> kbd_buffer_last	equ	$	;*/				/*
   137                              <2> ;;---------------[Diskette data area]------------;
   138 0000003E ??                  <2> fdc_drv_calib   resb    1	;*/	byte	fdc_drive_calib;   /* 40:3E
   139 0000003F ??                  <2> fdc_motor_LDOR  resb    1	;*/	byte	fdc_motor_LDOR;	   /* 40:3F Motor, DMA, select control
   140 00000040 ??                  <2> fdc_motor_ticks resb    1	;*/	byte	fdc_motor_ticks;   /* 40:40 ticks til motor off
   141 00000041 ??                  <2> fdc_status      resb    1	;*/	byte	fdc_status;	   /* 40:41
   142                              <2> ;				Floppy return code stat byte
   143                              <2> ;				;  1 = bad ic 765 command req.
   144                              <2> ;				;  2 = address mark not found
   145                              <2> ;				;  3 = write to protected disk
   146                              <2> ;				;  4 = sector not found
   147                              <2> ;				;  8 = data late (DMA overrun)
   148                              <2> ;				;  9 = DMA failed 64K page end
   149                              <2> ;				; 16 = bad CRC on floppy read
   150                              <2> ;				; 32 = bad NEC 765 controller
   151                              <2> ;				; 64 = seek operation failed
   152                              <2> ;				;128 = disk drive timed out
   153 00000042 ??????????????      <2> fdc_ctrl_status resb    7	;*/	byte	fdc_ctrl_status[7];  /* 40:42 Status bytes from NEC 765
   154                              <2> ;;---------------[Video display area]------------;
   155 00000049 ??                  <2> video_mode      resb    1	;*/	byte	video_mode;	/* 40:49
   156                              <2> ;			 	; Current CRT mode  (software)
   157                              <2> ;				;  0 = 40 x 25 text (no color)
   158                              <2> ;				;  1 = 40 x 25 text (16 color)
   159                              <2> ;				;  2 = 80 x 25 text (no color)
   160                              <2> ;				;  3 = 80 x 25 text (16 color)
   161                              <2> ;				;  4 = 320 x 200 grafix 4 color
   162                              <2> ;				;  5 = 320 x 200 grafix 0 color
   163                              <2> ;				;  6 = 640 x 200 grafix 0 color
   164                              <2> ;				;  7 = 80 x 25 text (mono card)
   165 0000004A ????                <2> video_columns   resw    1	;*/	word video_columns;	/* 40:4A Columns on CRT screen
   166 0000004C ????                <2> video_regen_bytes  resw 1	;*/	word video_regen_bytes;	/* 40:4C Bytes in the regen region
   167 0000004E ????                <2> video_regen_offset resw 1	;*/	word video_regen_offset;/* 40:4E Byte offset in regen region
   168 00000050 <res 10h>           <2> video_cursor_pos  resw  8	;*/	word video_cursor_pos[8];  /* 40:50 Cursor pos for up to 8 pages
   169 00000060 ????                <2> video_cursor_mode resw  1	;*/	word video_cursor_mode;	/* 40:60 Current cursor mode setting
   170 00000062 ??                  <2> video_page      resb    1	;*/	byte video_page;	/* 40:62 Current page on display
   171 00000063 ????                <2> video_base_seg  resw    1	;*/	word video_base_seg;	/* 40:63 Base address (B000h or B800h)
   172 00000065 ??                  <2> video_hw_mode   resb    1	;*/	byte video_hw_mode;	/* 40:65 ic 6845 mode reg. (hardware)
   173 00000066 ??                  <2> video_cga_palette resb  1	;*/	byte video_cga_palette;	/* 40:66 Current CGA palette
   174                              <2> ;;---------------[Used to setup ROM]-------------;
   175 00000067 ????????            <2> eprom_address   resd    1	;*/	dword eprom_address;	/* 40:67 Eprom base Offset,Segment
   176 0000006B ??                  <2> spurious_irq    resb    1	;*/	byte spurious_irq;	/* 40:6B Last spurious interrupt IRQ
   177                              <2> ;;---------------[Timer data area]---------------;
   178 0000006C ????????            <2> timer_ticks     resd    1	;*/	dword timer_ticks;	/* 40:6C Ticks since midnight (lo,hi)
   179 00000070 ??                  <2> timer_new_day   resb    1	;*/	byte timer_new_day;	/* 40:70 Non-zero if new day
   180                              <2> ;;---------------[System data area]--------------;
   181 00000071 ??                  <2> break_flag      resb    1	;*/	byte break_flag;	/* 40:71 Sign bit set iff break
   182 00000072 ????                <2> warm_boot       resw    1	;*/	word warm_boot;		/* 40:72 Warm boot iff==1234h
   183                              <2> ;;---------------[Hard disk scratchpad]----------;
   184 00000074 ????????            <2> hdd_scratch     resd    1	;*/	word hdd_scratch[2];	/* 40:74
   185                              <2> ;;---------------[Timout areas/PRT/LPT]----------;
   186 00000078 ????????            <2> lpt_timeout     resb    4	;*/	byte lpt_timeout[4];	/* 40:78 Ticks for LPT 1-4 timeouts
   187 0000007C ????????            <2> com_timeout     resb    4	;*/	byte com_timeout[4];	/* 40:7C Ticks for COM 1-4 timeouts
   188                              <2> ;;---obsolete----[Keyboard buf start/end]---jrc--;
   189 00000080 ????                <2> kbd_buffer_start resw   1	;*/	word kbd_buffer_start;	/* 40:80 KBD buffer head (PC/AT)
   190 00000082 ????                <2> kbd_buffer_end  resw    1	;*/	word kbd_buffer_end;	/* 40:82 KBD buffer tail (PC/AT)
   191                              <2> ;;---------------[EGA stuff]---------------------;
   192 00000084 ??????????????      <2> EGA_stuff	resb	7	;*/	byte EGA_stuff[7];	/* 40:84 Unspecified EGA data
   193                              <2> ;;---------------[Floppy/Fixed Media Info]-------------;
   194 0000008B ??                  <2> fdc_last_rate	resb	1	;*/	byte fdc_last_rate;	/* 40:8B Last floppy step rate/data rate?
   195 0000008C ????????            <2> fx_misc_unused	resb	4	;*/	byte fx_misc_unused[4];	/* 40:8C Fixed disk miscellaneous ???
   196 00000090 ????                <2> fdc_disk_state	resb	2	;*/	byte fdc_disk_state[2];	/* 40:90 Floppy disk state
   197 00000092 ????                <2> fdc_op_start	resb	2	;*/	byte fdc_op_start[2];	/* 40:92 Floppy operation start state machine
   198 00000094 ????                <2> fdc_cylinder	resb	2	;*/	byte fdc_cylinder[2];	/* 40:94 Floppy present cylinder
   199                              <2> ;;---------------[Additional KBD flags]----------------;
   200 00000096 ??                  <2> kbd_flag_3	resb	1	;*/	byte kbd_flag_3;	/* 40:96 kbd ???
   201 00000097 ??                  <2> kbd_flag_2	resb	1	;*/	byte kbd_flag_2;	/* 40:97 kbd ???
   202                              <2> ;;---------------[RTC/timer1 data]---------------------;
   203 00000098 ????????            <2> user_semaphore	resw	2	;*/	byte *user_semaphore;	/* 40:98 User semaphore in (bit 7)
   204 0000009C ????????            <2> rtc_count	resd	1	;*/	dword rtc_count;	/* 40:9C RTC tick counter
   205 000000A0 ??                  <2> rtc_wait_active	resb	1	;*/	byte rtc_wait_active;	/* 40:A0 Busy=01, Posted=80h,
   206                              <2> ;;---------------[Cassette I/O stuff]------------------;
   207 000000A1 ??                  <2> last_val	resb	1	;*/	byte last_val;		/* 40:A1 Last byte read value
   208 000000A2 ????                <2> crc_reg		resw	1	;*/	word crc_reg;		/* 40:A2 CRC accumulation area
   209                              <2> ;									Post Acknowleged=00;
   210 000000A4 ??                  <2> EGA_data	resb	1	;*/	byte EGA_data;		/* 40:A4 Various usage
   211 000000A5 ????                <2> SDstatus	resb	2	;*/	byte SDstatus[2];	/* 40:A5 Status byte from command
   212 000000A7 ????                <2> SDcardtype	resb	2	;*/	byte SDcardtype[2];	/* 40:A7 SDcard type SDSC=2, HC=3, ...
   213                              <2> ;
   214 000000A9 ????????            <2> fixed_disk_tab	resb	4	;*/	byte fixed_disk_tab[4];	/* dispatch table to fixed disk drivers
   215 000000AD ??                  <2> wait12_count	resb	1	;*/	byte wait12_count;	/* 40:AD 12usec CX count
   216 000000AE ??                  <2> lock_count	resb	1	;*/	byte lock_count;	/* 40:AE lock level counter
   217 000000AF ??                  <2> EMS_start       resb    1	;*/	byte EMS_start;		/* start EMS allocation from here
   218                              <2> fx80		equ	$	;*/	struct EDD_disk fx80;	/* fixed disk parameter area 0
   219 000000B0 ????                <2> fx_log_cylinders resw   1	;	word fx_log_cylinders;	 logical number of cylinders
   220 000000B2 ??                  <2> fx_log_heads    resb    1	;	byte fx_log_heads;	 logical number of heads
   221 000000B3 ??                  <2> fx_signature	resb	1	;	byte fx_signature;	 A0h signature = translated geom
   222 000000B4 ??                  <2> fx_phys_sectors	resb    1       ;	byte fx_phys_sectors;	 physical number of sectors per track
   223 000000B5 ????                <2> fx_LBA_high     resw    1       ;	word fx_LBA_high;	 high word of LBA28 number of sectors
   224 000000B7 ??                  <2> fx_reserved	resb	1	;	byte fx_reserved;	 reserved for future use
   225 000000B8 ??                  <2> fx_drive_control resb   1       ;	byte fx_drive_control;	 flag bits for IDE head register
   226 000000B9 ????                <2> fx_phys_cylinders resw	1	;	word fx_phys_cylinders;	 physical number of cylinders
   227 000000BB ??                  <2> fx_phys_heads	resb	1	;	byte fx_phys_heads;	 physical number of heads
   228 000000BC ????                <2> fx_LBA_low	resw	1	;	word fx_LBA_low;	 low word of LBA28 number of sectors
   229 000000BE ??                  <2> fx_log_sectors	resb	1	;	byte fx_log_sectors;	 logical number of sectors per track
   230 000000BF ??                  <2> fx_checksum	resb	1	;	byte fx_checksum;	 checksum, dunno how to compute
   231 000000C0 <res 10h>           <2> fx81            resb    16	;*/	struct EDD_disk fx81;	/* fixed disk parameter area 1
   232 000000D0 <res 10h>           <2> fx82            resb    16	;*/	struct EDD_disk fx82;	/* fixed disk parameter area 2
   233 000000E0 <res 10h>           <2> fx83            resb    16	;*/	struct EDD_disk fx83;	/* fixed disk parameter area 3
   234                              <2> ;
   235                              <2> ;
   236                              <2> 
   237 000000F0 ????                <2> FPEM_segment    resw    1       ;*/	word FPEM_segment;	/* FPEM data segment
   238                              <2> 
   239 000000F2 ????                <2> EBDA_paragraph  resw    1       ;*/	word EBDA_paragraph;	/* lowest EBDA paragraph
   240                              <2> 
   241 000000F4 ????                <2> dma0_cw         resw    1       ;*/	word dma0_cw;		/* end of dma control word
   242 000000F6 ????                <2> dma1_cw         resw    1       ;*/	word dma1_cw;		/*   ditto
   243                              <2> 
   244 000000F8 ????                <2> fdc_type	resb	2	;*/	byte fdc_type[2];	/* disk type in low nibble, alternate in hi nib
   245                              <2> 
   246 000000FA ????????            <2> debug_static_ptr  resw	2	;*/	void *debug_static_ptr;	/* pointer to debug static area
   247                              <2> 
   248 000000FE ??                  <2> n_fixed_disks   resb    1       ;*/	byte n_fixed_disks;	/* number of fixed disks
   249                              <2> 
   250 000000FF ??                  <2> cpu_xtal        resb    1       ;*/	byte cpu_xtal;		/* CPU crystal frequency in Mhz
   251                              <2> ;								   CPU clock is half of this
   252                              <2> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   253                              <2> ;
   254                              <2> ;  System configuration stuff below
   255                              <2> ;	c.f., CONFIG.ASM (ANSI.CFG, CVDU.CFG, etc.), User configuration stuff
   256                              <2> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   257                              <2> %if 0				;*/
   258                              <2> #define FIXED_DISK_MAX 4		/*
   259                              <2> %else
   260                              <2> %define FIXED_DISK_MAX 4
   261                              <2> %endif
   262                              <2> %if 0				;*/
   263                              <2> #define PPIDE_driver 1		/*
   264                              <2> %else
   265                              <2> %define PPIDE_driver 1
   266                              <2> %endif
   267                              <2> %if 0				;*/
   268                              <2> #define USB_driver 1		/*
   269                              <2> %else
   270                              <2> %define USB_driver 1
   271                              <2> %endif
   272                              <2> 				;*/
    84                              <1> 
    85                              <1> ;  this must be the same in EQUATES.H */
    86                              <1> %if SOFT_DEBUG
    87                              <1> %define NBREAK  8
    88                              <1> %endif
    89                              <1> 
    90                              <1> 
    91                              <1> %if 0
    92                              <1>         segment _TEXT
    93                              <1> ;; *************************************************************************
    94                              <1> 
    95                              <1> 
    96                              <1> 
    97                              <1> 
    98                              <1> ;; ************************ DOS Data Segment *******************************
    99                              <1> ;dosdir	SEGMENT at 50h				; Boot disk directory from IPL
   100                              <1> ;xerox	label	byte				;  0 if Print Screen idle
   101                              <1> ;						;  1 if PrtSc xeroxing screen
   102                              <1> ;						;255 if PrtSc error in xerox
   103                              <1> ;						;  ...non-grafix PrtSc in bios
   104                              <1> ;	db	200h dup(?)			; PC-DOS bootstrap procedure
   105                              <1> ;						;  ...IBMBIO.COM buffers the
   106                              <1> ;						;  ...directory of the boot
   107                              <1> ;						;  ...device here at IPL time
   108                              <1> ;						;  ...when locating the guts
   109                              <1> ;						;  ...of the operating system
   110                              <1> ;						;  ...filename "IBMDOS.COM"
   111                              <1> ;dosdir	ends
   112                              <1> ;; *************************************************************************
   113                              <1> ;; ************************ DOS IPL Segment ********************************
   114                              <1> ;dosseg	SEGMENT at 70h				; "Kernel" of PC-DOS op sys
   115                              <1> ;;IBMBIO.COM file loaded by boot block. Device Drivers/Bootstrap. CONTIGUOUS<---
   116                              <1> ;;IBMDOS.COM operating system nucleus immediately follows IBMBIO.COM and       !
   117                              <1> ;;     doesn`t have to be contiguous.  The IBMDOS operating system nucleus     !
   118                              <1> ;;     binary image is loaded by transient code in IBMBIO binary image	      !
   119                              <1> ;dosseg	ends					;			      !
   120                              <1> ;iplseg	SEGMENT at 0h				; Segment for boot block      !
   121                              <1> ;;The following boot block is loaded with 512 bytes on the first sector of     !
   122                              <1> ;;the bootable device by code resident in the ROM-resident bios.  Control is   !
   123                              <1> ;;then transferred to the first word 0000:7C00 of the disk-resident bootstrap  !
   124                              <1> ;	ORG	07C00h				;  ..offset for boot block    !
   125                              <1> ;boot	db	200h dup(?)			;  ..start disk resident boot--
   126                              <1> ;iplseg	ends
   127                              <1> 
   128                              <1> %endif
    36                                  
    37                                          segment         _TEXT
    38                                  
    39                                  	global	ident2, _unique
    40                                          global  begin_here
    41                                  	extern	cold_boot
    42                                  
    43                                  ; startup jumps to this absolute location
    44                                  ..start:
    45                                  begin_here:
    46 00000000 E9(0000)                        jmp     cold_boot
    47                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    48                                  ;  Put the Copyright notice right at the beginning of the ROM.
    49                                  ;  It may be printed second, but it should be at the most obvious
    50                                  ;  location in the ROM image.
    51                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    52                                  ident2:
    53 00000003 25313261                	db	"%12a"
    54 00000007 0D0A                            db      CR,LF
    55 00000009 436F70797269676874-             db      "Copyright (C) 2010-2020 by The RetroBrew Users' Group.  All rights reserved."
    55 00000012 202843292032303130-
    55 0000001B 2D3230323020627920-
    55 00000024 54686520526574726F-
    55 0000002D 427265772055736572-
    55 00000036 73272047726F75702E-
    55 0000003F 2020416C6C20726967-
    55 00000048 687473207265736572-
    55 00000051 7665642E           
    56 00000055 0D0A                            db      CR,LF
    57 00000057 50726F766964656420-             db      "Provided for hobbyist use on the RetroBrew SBC-188 board."
    57 00000060 666F7220686F626279-
    57 00000069 69737420757365206F-
    57 00000072 6E2074686520526574-
    57 0000007B 726F42726577205342-
    57 00000084 432D31383820626F61-
    57 0000008D 72642E             
    58 00000090 2020416C6C20636F64-             db      "  All code may be"
    58 00000099 65206D6179206265   
    59 000000A1 0D0A                            db      CR,LF
    60 000000A3 7573656420756E6465-             db      "used under the terms of the GNU General Public License, a copy of which"
    60 000000AC 722074686520746572-
    60 000000B5 6D73206F6620746865-
    60 000000BE 20474E552047656E65-
    60 000000C7 72616C205075626C69-
    60 000000D0 63204C6963656E7365-
    60 000000D9 2C206120636F707920-
    60 000000E2 6F66207768696368   
    61 000000EA 0D0A                            db      CR,LF
    62 000000EC 697320636F6E746169-             db      "is contained in the file COPYING in the top-level source directory."
    62 000000F5 6E656420696E207468-
    62 000000FE 652066696C6520434F-
    62 00000107 5059494E4720696E20-
    62 00000110 74686520746F702D6C-
    62 00000119 6576656C20736F7572-
    62 00000122 636520646972656374-
    62 0000012B 6F72792E           
    63 0000012F 0D0A                            db      CR,LF
    64 00000131 00                      	db	0
    65                                  	
    66 00000132 32372D4F63742D3230-     _unique:	db	DATE_STRING1, VERSION_STRING, 0
    66 0000013B 3234332E352D4400   
    67                                  
    68                                  
