Module: /mnt/fileserver/Vintage/Projects/duodyne/25 processor.80c188/firmware/BIOS/nvram.c
GROUP: 'DGROUP' CONST,CONST2,_DATA

File contains no line numbers.
Segment: _TEXT BYTE USE16 00001108 bytes
0000                          set_battery_:
0000    53                        push        bx 
0001    51                        push        cx 
0002    52                        push        dx 
0003    56                        push        si 
0004    C8 56 00 00               enter       0x0056,0x00 
0008    B8 08 00                  mov         ax,0x0008 
000B    E8 00 00                  call        @rtc_get_loc 
000E    88 46 FC                  mov         byte ptr -0x4[bp],al 
0011    24 F0                     and         al,0xf0 
0013    3C A0                     cmp         al,0xa0 
0015    75 05                     jne         L$1 
0017    BE 01 00                  mov         si,0x0001 
001A    EB 02                     jmp         L$2 
001C                          L$1:
001C    31 F6                     xor         si,si 
001E                          L$2:
001E    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
0021    30 E4                     xor         ah,ah 
0023    89 C3                     mov         bx,ax 
0025    C1 FB 02                  sar         bx,0x02 
0028    83 E3 03                  and         bx,0x0003 
002B    88 5E FE                  mov         byte ptr -0x2[bp],bl 
002E    24 03                     and         al,0x03 
0030    88 46 FA                  mov         byte ptr -0x6[bp],al 
0033    80 FB 01                  cmp         bl,0x01 
0036    74 05                     je          L$3 
0038    80 FB 02                  cmp         bl,0x02 
003B    75 05                     jne         L$4 
003D                          L$3:
003D    B8 01 00                  mov         ax,0x0001 
0040    EB 02                     jmp         L$5 
0042                          L$4:
0042    30 C0                     xor         al,al 
0044                          L$5:
0044    21 C6                     and         si,ax 
0046    80 7E FA 00               cmp         byte ptr -0x6[bp],0x00 
004A    74 05                     je          L$6 
004C    BA 01 00                  mov         dx,0x0001 
004F    EB 02                     jmp         L$7 
0051                          L$6:
0051    31 D2                     xor         dx,dx 
0053                          L$7:
0053    21 D6                     and         si,dx 
0055    74 0C                     je          L$8 
0057    8A 4E FA                  mov         cl,byte ptr -0x6[bp] 
005A    B0 01                     mov         al,0x01 
005C    D2 E0                     shl         al,cl 
005E    88 46 FA                  mov         byte ptr -0x6[bp],al 
0061    EB 04                     jmp         L$9 
0063                          L$8:
0063    C6 46 FE 00               mov         byte ptr -0x2[bp],0x00 
0067                          L$9:
0067    85 F6                     test        si,si 
0069    74 05                     je          L$10 
006B    B8 7D 00                  mov         ax,offset DGROUP:L$221 
006E    EB 03                     jmp         L$11 
0070                          L$10:
0070    B8 80 00                  mov         ax,offset DGROUP:L$222 
0073                          L$11:
0073    8C DB                     mov         bx,ds 
0075    53                        push        bx 
0076    50                        push        ax 
0077    1E                        push        ds 
0078    68 84 00                  push        offset DGROUP:L$223 
007B    E8 00 00                  call        _cprintf 
007E    83 C4 08                  add         sp,0x0008 
0081    85 F6                     test        si,si 
0083    74 38                     je          L$16 
0085    8A 46 FA                  mov         al,byte ptr -0x6[bp] 
0088    30 E4                     xor         ah,ah 
008A    50                        push        ax 
008B    3C 08                     cmp         al,0x08 
008D    75 05                     jne         L$12 
008F    B8 A7 00                  mov         ax,offset DGROUP:L$224 
0092    EB 03                     jmp         L$13 
0094                          L$12:
0094    B8 A9 00                  mov         ax,offset DGROUP:L$225 
0097                          L$13:
0097    8C DB                     mov         bx,ds 
0099    53                        push        bx 
009A    50                        push        ax 
009B    80 7E FE 01               cmp         byte ptr -0x2[bp],0x01 
009F    75 05                     jne         L$14 
00A1    BA AA 00                  mov         dx,offset DGROUP:L$226 
00A4    EB 03                     jmp         L$15 
00A6                          L$14:
00A6    BA AE 00                  mov         dx,offset DGROUP:L$227 
00A9                          L$15:
00A9    8C DB                     mov         bx,ds 
00AB    53                        push        bx 
00AC    52                        push        dx 
00AD    8A 56 FE                  mov         dl,byte ptr -0x2[bp] 
00B0    30 F6                     xor         dh,dh 
00B2    52                        push        dx 
00B3    1E                        push        ds 
00B4    68 B4 00                  push        offset DGROUP:L$228 
00B7    E8 00 00                  call        _cprintf 
00BA    83 C4 10                  add         sp,0x0010 
00BD                          L$16:
00BD    BE 01 00                  mov         si,0x0001 
00C0                          L$17:
00C0    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
00C3    30 E4                     xor         ah,ah 
00C5    50                        push        ax 
00C6    1E                        push        ds 
00C7    68 E8 00                  push        offset DGROUP:L$229 
00CA    E8 00 00                  call        _cprintf 
00CD    83 C4 06                  add         sp,0x0006 
00D0    BB 50 00                  mov         bx,0x0050 
00D3    8C D2                     mov         dx,ss 
00D5    8D 46 AA                  lea         ax,-0x56[bp] 
00D8    E8 00 00                  call        getline_ 
00DB    16                        push        ss 
00DC    07                        pop         es 
00DD    8D 5E AA                  lea         bx,-0x56[bp] 
00E0                          L$18:
00E0    26 8A 07                  mov         al,byte ptr es:[bx] 
00E3    3C 20                     cmp         al,0x20 
00E5    74 04                     je          L$19 
00E7    3C 09                     cmp         al,0x09 
00E9    75 03                     jne         L$20 
00EB                          L$19:
00EB    43                        inc         bx 
00EC    EB F2                     jmp         L$18 
00EE                          L$20:
00EE    84 C0                     test        al,al 
00F0    74 0A                     je          L$21 
00F2    89 D8                     mov         ax,bx 
00F4    8C C2                     mov         dx,es 
00F6    E8 00 00                  call        atoi_ 
00F9    88 46 FE                  mov         byte ptr -0x2[bp],al 
00FC                          L$21:
00FC    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
00FF    84 C0                     test        al,al 
0101    75 05                     jne         L$22 
0103    88 46 FC                  mov         byte ptr -0x4[bp],al 
0106    EB 12                     jmp         L$24 
0108                          L$22:
0108    3C 01                     cmp         al,0x01 
010A    75 06                     jne         L$23 
010C    C6 46 FC A5               mov         byte ptr -0x4[bp],0xa5 
0110    EB 08                     jmp         L$24 
0112                          L$23:
0112    3C 02                     cmp         al,0x02 
0114    75 AA                     jne         L$17 
0116    C6 46 FC AA               mov         byte ptr -0x4[bp],0xaa 
011A                          L$24:
011A    85 F6                     test        si,si 
011C    7C A2                     jl          L$17 
011E    8A 56 FC                  mov         dl,byte ptr -0x4[bp] 
0121    30 F6                     xor         dh,dh 
0123    B8 08 00                  mov         ax,0x0008 
0126    E8 00 00                  call        @rtc_set_loc 
0129    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
012C    E9 71 07                  jmp         L$107 

Routine Size: 303 bytes,    Routine Base: _TEXT + 0000

012F                          idow_:
012F    51                        push        cx 
0130    56                        push        si 
0131    57                        push        di 
0132    C8 10 00 00               enter       0x0010,0x00 
0136    50                        push        ax 
0137    52                        push        dx 
0138    89 DE                     mov         si,bx 
013A    BB 64 00                  mov         bx,0x0064 
013D    89 F0                     mov         ax,si 
013F    99                        cwd         
0140    F7 FB                     idiv        bx 
0142    31 FF                     xor         di,di 
0144                          L$25:
0144    8A 85 00 00               mov         al,byte ptr _dpm0[di] 
0148    88 43 F0                  mov         byte ptr -0x10[bp+di],al 
014B    47                        inc         di 
014C    83 FF 0C                  cmp         di,0x000c 
014F    7C F3                     jl          L$25 
0151    81 FE 2F 06               cmp         si,0x062f 
0155    7C 19                     jl          L$26 
0157    81 FE 0F 27               cmp         si,0x270f 
015B    7F 13                     jg          L$26 
015D    8B 46 EC                  mov         ax,word ptr -0x14[bp] 
0160    3D 01 00                  cmp         ax,0x0001 
0163    7C 0B                     jl          L$26 
0165    3D 0C 00                  cmp         ax,0x000c 
0168    7F 06                     jg          L$26 
016A    83 7E EE 01               cmp         word ptr -0x12[bp],0x0001 
016E    7D 06                     jge         L$27 
0170                          L$26:
0170    B8 63 00                  mov         ax,0x0063 
0173    E9 B4 00                  jmp         L$36 
0176                          L$27:
0176    89 D0                     mov         ax,dx 
0178    C1 F8 0F                  sar         ax,0x0f 
017B    89 D3                     mov         bx,dx 
017D    31 C3                     xor         bx,ax 
017F    29 C3                     sub         bx,ax 
0181    83 E3 03                  and         bx,0x0003 
0184    31 C3                     xor         bx,ax 
0186    29 C3                     sub         bx,ax 
0188    75 04                     jne         L$28 
018A    85 D2                     test        dx,dx 
018C    75 0C                     jne         L$29 
018E                          L$28:
018E    BB 90 01                  mov         bx,0x0190 
0191    89 F0                     mov         ax,si 
0193    99                        cwd         
0194    F7 FB                     idiv        bx 
0196    85 D2                     test        dx,dx 
0198    75 05                     jne         L$30 
019A                          L$29:
019A    BB 01 00                  mov         bx,0x0001 
019D    EB 02                     jmp         L$31 
019F                          L$30:
019F    31 DB                     xor         bx,bx 
01A1                          L$31:
01A1    89 5E FE                  mov         word ptr -0x2[bp],bx 
01A4    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
01A7    00 46 FB                  add         byte ptr -0x5[bp],al 
01AA    83 6E EC 03               sub         word ptr -0x14[bp],0x0003 
01AE    83 7E EC 00               cmp         word ptr -0x14[bp],0x0000 
01B2    7D 05                     jge         L$32 
01B4    83 46 EC 0C               add         word ptr -0x14[bp],0x000c 
01B8    4E                        dec         si 
01B9                          L$32:
01B9    8B 7E EC                  mov         di,word ptr -0x14[bp] 
01BC    8A 43 F0                  mov         al,byte ptr -0x10[bp+di] 
01BF    30 E4                     xor         ah,ah 
01C1    3B 46 EE                  cmp         ax,word ptr -0x12[bp] 
01C4    7D 05                     jge         L$33 
01C6    B8 62 00                  mov         ax,0x0062 
01C9    EB 5F                     jmp         L$36 
01CB                          L$33:
01CB    BB 64 00                  mov         bx,0x0064 
01CE    89 F0                     mov         ax,si 
01D0    99                        cwd         
01D1    F7 FB                     idiv        bx 
01D3    89 46 FC                  mov         word ptr -0x4[bp],ax 
01D6    89 F0                     mov         ax,si 
01D8    99                        cwd         
01D9    F7 FB                     idiv        bx 
01DB    89 D6                     mov         si,dx 
01DD    C7 46 FE 00 00            mov         word ptr -0x2[bp],0x0000 
01E2                          L$34:
01E2    8B 5E FE                  mov         bx,word ptr -0x2[bp] 
01E5    3B 5E EC                  cmp         bx,word ptr -0x14[bp] 
01E8    7D 0F                     jge         L$35 
01EA    89 DF                     mov         di,bx 
01EC    8A 43 F0                  mov         al,byte ptr -0x10[bp+di] 
01EF    30 E4                     xor         ah,ah 
01F1    01 46 EE                  add         word ptr -0x12[bp],ax 
01F4    FF 46 FE                  inc         word ptr -0x2[bp] 
01F7    EB E9                     jmp         L$34 
01F9                          L$35:
01F9    6B 5E FC 05               imul        bx,word ptr -0x4[bp],0x0005 
01FD    01 F3                     add         bx,si 
01FF    89 F0                     mov         ax,si 
0201    99                        cwd         
0202    B1 02                     mov         cl,0x02 
0204    D3 E2                     shl         dx,cl 
0206    1B C2                     sbb         ax,dx 
0208    D3 F8                     sar         ax,cl 
020A    01 C3                     add         bx,ax 
020C    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
020F    99                        cwd         
0210    B1 02                     mov         cl,0x02 
0212    D3 E2                     shl         dx,cl 
0214    1B C2                     sbb         ax,dx 
0216    D3 F8                     sar         ax,cl 
0218    01 D8                     add         ax,bx 
021A    40                        inc         ax 
021B    40                        inc         ax 
021C    01 46 EE                  add         word ptr -0x12[bp],ax 
021F    BB 07 00                  mov         bx,0x0007 
0222    8B 46 EE                  mov         ax,word ptr -0x12[bp] 
0225    99                        cwd         
0226    F7 FB                     idiv        bx 
0228    89 D0                     mov         ax,dx 
022A                          L$36:
022A    C9                        leave       
022B    5F                        pop         di 
022C    5E                        pop         si 
022D    59                        pop         cx 
022E    C3                        ret         

Routine Size: 256 bytes,    Routine Base: _TEXT + 012F

022F                          Date_:
022F    53                        push        bx 
0230    51                        push        cx 
0231    56                        push        si 
0232    57                        push        di 
0233    C8 6E 00 00               enter       0x006e,0x00 
0237    50                        push        ax 
0238    52                        push        dx 
0239    B8 03 00                  mov         ax,0x0003 
023C    E8 00 00                  call        @rtc_get_loc 
023F    88 46 FE                  mov         byte ptr -0x2[bp],al 
0242    B8 04 00                  mov         ax,0x0004 
0245    E8 00 00                  call        @rtc_get_loc 
0248    88 46 F8                  mov         byte ptr -0x8[bp],al 
024B    B8 05 00                  mov         ax,0x0005 
024E    E8 00 00                  call        @rtc_get_loc 
0251    88 46 F6                  mov         byte ptr -0xa[bp],al 
0254    88 46 FA                  mov         byte ptr -0x6[bp],al 
0257    B8 06 00                  mov         ax,0x0006 
025A    E8 00 00                  call        @rtc_get_loc 
025D    88 46 F4                  mov         byte ptr -0xc[bp],al 
0260    B8 01 80                  mov         ax,0x8001 
0263    E8 00 00                  call        @rtc_get_loc 
0266    88 46 FC                  mov         byte ptr -0x4[bp],al 
0269    8A 46 F6                  mov         al,byte ptr -0xa[bp] 
026C    3C 01                     cmp         al,0x01 
026E    72 04                     jb          L$37 
0270    3C 07                     cmp         al,0x07 
0272    76 04                     jbe         L$38 
0274                          L$37:
0274    C6 46 FA 08               mov         byte ptr -0x6[bp],0x08 
0278                          L$38:
0278    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
027B    84 C0                     test        al,al 
027D    75 16                     jne         L$39 
027F    B0 01                     mov         al,0x01 
0281    88 46 F8                  mov         byte ptr -0x8[bp],al 
0284    88 46 FE                  mov         byte ptr -0x2[bp],al 
0287    C6 46 FA 03               mov         byte ptr -0x6[bp],0x03 
028B    C6 46 F4 80               mov         byte ptr -0xc[bp],0x80 
028F    C6 46 FC 19               mov         byte ptr -0x4[bp],0x19 
0293    EB 0A                     jmp         L$40 
0295                          L$39:
0295    8E 46 8E                  mov         es,word ptr -0x72[bp] 
0298    8B 5E 90                  mov         bx,word ptr -0x70[bp] 
029B    26 88 47 01               mov         byte ptr es:0x1[bx],al 
029F                          L$40:
029F    8A 46 F4                  mov         al,byte ptr -0xc[bp] 
02A2    30 E4                     xor         ah,ah 
02A4    50                        push        ax 
02A5    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
02A8    50                        push        ax 
02A9    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
02AC    50                        push        ax 
02AD    8A 46 F8                  mov         al,byte ptr -0x8[bp] 
02B0    50                        push        ax 
02B1    8A 5E FA                  mov         bl,byte ptr -0x6[bp] 
02B4    30 FF                     xor         bh,bh 
02B6    C1 E3 02                  shl         bx,0x02 
02B9    FF B7 FE FF               push        word ptr _dow-0x2[bx] 
02BD    FF B7 FC FF               push        word ptr _dow-0x4[bx] 
02C1    1E                        push        ds 
02C2    68 2F 01                  push        offset DGROUP:L$230 
02C5    E8 00 00                  call        _cprintf 
02C8    83 C4 10                  add         sp,0x0010 
02CB    1E                        push        ds 
02CC    68 52 01                  push        offset DGROUP:L$231 
02CF    E8 00 00                  call        _cprintf 
02D2    83 C4 04                  add         sp,0x0004 
02D5    BB 50 00                  mov         bx,0x0050 
02D8    8C D2                     mov         dx,ss 
02DA    8D 46 92                  lea         ax,-0x6e[bp] 
02DD    E8 00 00                  call        getline_ 
02E0    8A 46 92                  mov         al,byte ptr -0x6e[bp] 
02E3    84 C0                     test        al,al 
02E5    75 05                     jne         L$41 
02E7    30 E4                     xor         ah,ah 
02E9    E9 E9 01                  jmp         L$60 
02EC                          L$41:
02EC    B1 2F                     mov         cl,0x2f 
02EE    8C D2                     mov         dx,ss 
02F0    8D 76 92                  lea         si,-0x6e[bp] 
02F3    1E                        push        ds 
02F4    8E DA                     mov         ds,dx 
02F6                          L$42:
02F6    8A 04                     mov         al,byte ptr [si] 
02F8    3A C1                     cmp         al,cl 
02FA    74 09                     je          L$43 
02FC    46                        inc         si 
02FD    3C 00                     cmp         al,0x00 
02FF    75 F5                     jne         L$42 
0301    2B F6                     sub         si,si 
0303    2B D2                     sub         dx,dx 
0305                          L$43:
0305    1F                        pop         ds 
0306    89 56 E2                  mov         word ptr -0x1e[bp],dx 
0309    85 D2                     test        dx,dx 
030B    75 09                     jne         L$45 
030D    85 F6                     test        si,si 
030F    75 05                     jne         L$45 
0311                          L$44:
0311    31 C0                     xor         ax,ax 
0313    E9 BF 01                  jmp         L$60 
0316                          L$45:
0316    8E C2                     mov         es,dx 
0318    26 C6 04 00               mov         byte ptr es:[si],0x00 
031C    8D 5C 01                  lea         bx,0x1[si] 
031F    8C D2                     mov         dx,ss 
0321    8D 46 92                  lea         ax,-0x6e[bp] 
0324    E8 00 00                  call        atoi_ 
0327    89 C7                     mov         di,ax 
0329    89 DE                     mov         si,bx 
032B    8B 56 E2                  mov         dx,word ptr -0x1e[bp] 
032E    1E                        push        ds 
032F    8E DA                     mov         ds,dx 
0331                          L$46:
0331    8A 04                     mov         al,byte ptr [si] 
0333    3A C1                     cmp         al,cl 
0335    74 09                     je          L$47 
0337    46                        inc         si 
0338    3C 00                     cmp         al,0x00 
033A    75 F5                     jne         L$46 
033C    2B F6                     sub         si,si 
033E    2B D2                     sub         dx,dx 
0340                          L$47:
0340    1F                        pop         ds 
0341    89 D1                     mov         cx,dx 
0343    85 D2                     test        dx,dx 
0345    75 04                     jne         L$48 
0347    85 F6                     test        si,si 
0349    74 C6                     je          L$44 
034B                          L$48:
034B    8E C2                     mov         es,dx 
034D    26 C6 04 00               mov         byte ptr es:[si],0x00 
0351    46                        inc         si 
0352    89 D8                     mov         ax,bx 
0354    8B 56 E2                  mov         dx,word ptr -0x1e[bp] 
0357    E8 00 00                  call        atoi_ 
035A    89 46 E4                  mov         word ptr -0x1c[bp],ax 
035D    89 F0                     mov         ax,si 
035F    89 CA                     mov         dx,cx 
0361    E8 00 00                  call        atoi_ 
0364    89 C6                     mov         si,ax 
0366    3D 63 00                  cmp         ax,0x0063 
0369    7F 0C                     jg          L$50 
036B    3D 50 00                  cmp         ax,0x0050 
036E    7D 03                     jge         L$49 
0370    83 C6 64                  add         si,0x0064 
0373                          L$49:
0373    81 C6 6C 07               add         si,0x076c 
0377                          L$50:
0377    56                        push        si 
0378    FF 76 E4                  push        word ptr -0x1c[bp] 
037B    57                        push        di 
037C    1E                        push        ds 
037D    68 66 01                  push        offset DGROUP:L$232 
0380    E8 00 00                  call        _cprintf 
0383    83 C4 0A                  add         sp,0x000a 
0386    83 FF 64                  cmp         di,0x0064 
0389    7D 16                     jge         L$51 
038B    89 F8                     mov         ax,di 
038D    99                        cwd         
038E    BB 0A 00                  mov         bx,0x000a 
0391    F7 FB                     idiv        bx 
0393    89 C1                     mov         cx,ax 
0395    C1 E1 04                  shl         cx,0x04 
0398    89 F8                     mov         ax,di 
039A    99                        cwd         
039B    F7 FB                     idiv        bx 
039D    09 D1                     or          cx,dx 
039F    EB 03                     jmp         L$52 
03A1                          L$51:
03A1    B9 FF 00                  mov         cx,0x00ff 
03A4                          L$52:
03A4    88 4E F8                  mov         byte ptr -0x8[bp],cl 
03A7    8B 46 E4                  mov         ax,word ptr -0x1c[bp] 
03AA    3D 64 00                  cmp         ax,0x0064 
03AD    7D 15                     jge         L$53 
03AF    99                        cwd         
03B0    BB 0A 00                  mov         bx,0x000a 
03B3    F7 FB                     idiv        bx 
03B5    89 C1                     mov         cx,ax 
03B7    C1 E1 04                  shl         cx,0x04 
03BA    8B 46 E4                  mov         ax,word ptr -0x1c[bp] 
03BD    99                        cwd         
03BE    F7 FB                     idiv        bx 
03C0    09 D1                     or          cx,dx 
03C2    EB 03                     jmp         L$54 
03C4                          L$53:
03C4    B9 FF 00                  mov         cx,0x00ff 
03C7                          L$54:
03C7    88 4E FE                  mov         byte ptr -0x2[bp],cl 
03CA    89 F0                     mov         ax,si 
03CC    99                        cwd         
03CD    BB 64 00                  mov         bx,0x0064 
03D0    F7 FB                     idiv        bx 
03D2    89 C1                     mov         cx,ax 
03D4    39 D8                     cmp         ax,bx 
03D6    7D 1B                     jge         L$55 
03D8    99                        cwd         
03D9    BB 0A 00                  mov         bx,0x000a 
03DC    F7 FB                     idiv        bx 
03DE    C1 E0 04                  shl         ax,0x04 
03E1    89 46 EA                  mov         word ptr -0x16[bp],ax 
03E4    89 C8                     mov         ax,cx 
03E6    99                        cwd         
03E7    F7 FB                     idiv        bx 
03E9    8B 46 EA                  mov         ax,word ptr -0x16[bp] 
03EC    09 D0                     or          ax,dx 
03EE    89 46 F2                  mov         word ptr -0xe[bp],ax 
03F1    EB 05                     jmp         L$56 
03F3                          L$55:
03F3    C7 46 F2 FF 00            mov         word ptr -0xe[bp],0x00ff 
03F8                          L$56:
03F8    8A 46 F2                  mov         al,byte ptr -0xe[bp] 
03FB    88 46 FC                  mov         byte ptr -0x4[bp],al 
03FE    89 F0                     mov         ax,si 
0400    99                        cwd         
0401    BB 64 00                  mov         bx,0x0064 
0404    F7 FB                     idiv        bx 
0406    89 D1                     mov         cx,dx 
0408    39 DA                     cmp         dx,bx 
040A    7D 1D                     jge         L$57 
040C    89 D0                     mov         ax,dx 
040E    99                        cwd         
040F    BB 0A 00                  mov         bx,0x000a 
0412    F7 FB                     idiv        bx 
0414    C1 E0 04                  shl         ax,0x04 
0417    89 46 EA                  mov         word ptr -0x16[bp],ax 
041A    89 C8                     mov         ax,cx 
041C    99                        cwd         
041D    F7 FB                     idiv        bx 
041F    8B 46 EA                  mov         ax,word ptr -0x16[bp] 
0422    09 D0                     or          ax,dx 
0424    89 46 F0                  mov         word ptr -0x10[bp],ax 
0427    EB 05                     jmp         L$58 
0429                          L$57:
0429    C7 46 F0 FF 00            mov         word ptr -0x10[bp],0x00ff 
042E                          L$58:
042E    89 F3                     mov         bx,si 
0430    89 FA                     mov         dx,di 
0432    8B 46 E4                  mov         ax,word ptr -0x1c[bp] 
0435    E8 00 00                  call        idow_ 
0438    3C 07                     cmp         al,0x07 
043A    76 10                     jbe         L$59 
043C    30 E4                     xor         ah,ah 
043E    50                        push        ax 
043F    1E                        push        ds 
0440    68 7E 01                  push        offset DGROUP:L$233 
0443    E8 00 00                  call        _cprintf 
0446    83 C4 06                  add         sp,0x0006 
0449    E9 C5 FE                  jmp         L$44 
044C                          L$59:
044C    FE C0                     inc         al 
044E    88 46 FA                  mov         byte ptr -0x6[bp],al 
0451    88 46 EA                  mov         byte ptr -0x16[bp],al 
0454    C6 46 EB 00               mov         byte ptr -0x15[bp],0x00 
0458    FF 76 EA                  push        word ptr -0x16[bp] 
045B    8A 46 F0                  mov         al,byte ptr -0x10[bp] 
045E    88 46 E6                  mov         byte ptr -0x1a[bp],al 
0461    C6 46 E7 00               mov         byte ptr -0x19[bp],0x00 
0465    FF 76 E6                  push        word ptr -0x1a[bp] 
0468    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
046B    88 46 E8                  mov         byte ptr -0x18[bp],al 
046E    C6 46 E9 00               mov         byte ptr -0x17[bp],0x00 
0472    FF 76 E8                  push        word ptr -0x18[bp] 
0475    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
0478    88 46 EC                  mov         byte ptr -0x14[bp],al 
047B    C6 46 ED 00               mov         byte ptr -0x13[bp],0x00 
047F    FF 76 EC                  push        word ptr -0x14[bp] 
0482    8A 46 F8                  mov         al,byte ptr -0x8[bp] 
0485    88 46 EE                  mov         byte ptr -0x12[bp],al 
0488    C6 46 EF 00               mov         byte ptr -0x11[bp],0x00 
048C    FF 76 EE                  push        word ptr -0x12[bp] 
048F    1E                        push        ds 
0490    68 A0 01                  push        offset DGROUP:L$234 
0493    E8 00 00                  call        _cprintf 
0496    83 C4 0E                  add         sp,0x000e 
0499    31 D2                     xor         dx,dx 
049B    B8 07 00                  mov         ax,0x0007 
049E    E8 00 00                  call        @rtc_set_loc 
04A1    8B 56 EC                  mov         dx,word ptr -0x14[bp] 
04A4    B8 03 00                  mov         ax,0x0003 
04A7    E8 00 00                  call        @rtc_set_loc 
04AA    8B 56 EE                  mov         dx,word ptr -0x12[bp] 
04AD    B8 04 00                  mov         ax,0x0004 
04B0    E8 00 00                  call        @rtc_set_loc 
04B3    8B 56 EA                  mov         dx,word ptr -0x16[bp] 
04B6    B8 05 00                  mov         ax,0x0005 
04B9    E8 00 00                  call        @rtc_set_loc 
04BC    8B 56 E6                  mov         dx,word ptr -0x1a[bp] 
04BF    B8 06 00                  mov         ax,0x0006 
04C2    E8 00 00                  call        @rtc_set_loc 
04C5    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
04C8    8E 46 8E                  mov         es,word ptr -0x72[bp] 
04CB    8B 5E 90                  mov         bx,word ptr -0x70[bp] 
04CE    26 88 47 01               mov         byte ptr es:0x1[bx],al 
04D2    8B 46 E8                  mov         ax,word ptr -0x18[bp] 
04D5                          L$60:
04D5    C9                        leave       
04D6    5F                        pop         di 
04D7                          L$61:
04D7    5E                        pop         si 
04D8    59                        pop         cx 
04D9    5B                        pop         bx 
04DA    C3                        ret         

Routine Size: 684 bytes,    Routine Base: _TEXT + 022F

04DB                          Time_:
04DB    53                        push        bx 
04DC    51                        push        cx 
04DD    52                        push        dx 
04DE    56                        push        si 
04DF    57                        push        di 
04E0    C8 5A 00 00               enter       0x005a,0x00 
04E4    31 C0                     xor         ax,ax 
04E6    E8 00 00                  call        @rtc_get_loc 
04E9    88 46 F6                  mov         byte ptr -0xa[bp],al 
04EC    C6 46 F7 00               mov         byte ptr -0x9[bp],0x00 
04F0    8B 46 F6                  mov         ax,word ptr -0xa[bp] 
04F3    89 46 FA                  mov         word ptr -0x6[bp],ax 
04F6    B8 01 00                  mov         ax,0x0001 
04F9    E8 00 00                  call        @rtc_get_loc 
04FC    88 46 FC                  mov         byte ptr -0x4[bp],al 
04FF    C6 46 FD 00               mov         byte ptr -0x3[bp],0x00 
0503    8B 7E FC                  mov         di,word ptr -0x4[bp] 
0506    B8 02 00                  mov         ax,0x0002 
0509    E8 00 00                  call        @rtc_get_loc 
050C    88 C3                     mov         bl,al 
050E    30 FF                     xor         bh,bh 
0510    89 5E FE                  mov         word ptr -0x2[bp],bx 
0513    F6 46 FA 80               test        byte ptr -0x6[bp],0x80 
0517    74 0C                     je          L$62 
0519    1E                        push        ds 
051A    68 DC 01                  push        offset DGROUP:L$235 
051D    E8 00 00                  call        _cprintf 
0520    83 C4 04                  add         sp,0x0004 
0523    EB 0F                     jmp         L$63 
0525                          L$62:
0525    FF 76 F6                  push        word ptr -0xa[bp] 
0528    57                        push        di 
0529    53                        push        bx 
052A    1E                        push        ds 
052B    68 F3 01                  push        offset DGROUP:L$236 
052E    E8 00 00                  call        _cprintf 
0531    83 C4 0A                  add         sp,0x000a 
0534                          L$63:
0534    1E                        push        ds 
0535    68 0F 02                  push        offset DGROUP:L$237 
0538    E8 00 00                  call        _cprintf 
053B    83 C4 04                  add         sp,0x0004 
053E    BB 50 00                  mov         bx,0x0050 
0541    8C D2                     mov         dx,ss 
0543    8D 46 A6                  lea         ax,-0x5a[bp] 
0546    E8 00 00                  call        getline_ 
0549    80 7E A6 00               cmp         byte ptr -0x5a[bp],0x00 
054D    74 65                     je          L$69 
054F    B1 3A                     mov         cl,0x3a 
0551    8C D2                     mov         dx,ss 
0553    8D 76 A6                  lea         si,-0x5a[bp] 
0556    1E                        push        ds 
0557    8E DA                     mov         ds,dx 
0559                          L$64:
0559    8A 04                     mov         al,byte ptr [si] 
055B    3A C1                     cmp         al,cl 
055D    74 09                     je          L$65 
055F    46                        inc         si 
0560    3C 00                     cmp         al,0x00 
0562    75 F5                     jne         L$64 
0564    2B F6                     sub         si,si 
0566    2B D2                     sub         dx,dx 
0568                          L$65:
0568    1F                        pop         ds 
0569    89 D3                     mov         bx,dx 
056B    85 D2                     test        dx,dx 
056D    75 04                     jne         L$66 
056F    85 F6                     test        si,si 
0571    74 69                     je          L$73 
0573                          L$66:
0573    8E C2                     mov         es,dx 
0575    26 C6 04 00               mov         byte ptr es:[si],0x00 
0579    89 56 F8                  mov         word ptr -0x8[bp],dx 
057C    8D 7C 01                  lea         di,0x1[si] 
057F    8C D2                     mov         dx,ss 
0581    8D 46 A6                  lea         ax,-0x5a[bp] 
0584    E8 00 00                  call        atoi_ 
0587    89 46 FE                  mov         word ptr -0x2[bp],ax 
058A    89 FE                     mov         si,di 
058C    89 DA                     mov         dx,bx 
058E    1E                        push        ds 
058F    8E DA                     mov         ds,dx 
0591                          L$67:
0591    8A 04                     mov         al,byte ptr [si] 
0593    3A C1                     cmp         al,cl 
0595    74 09                     je          L$68 
0597    46                        inc         si 
0598    3C 00                     cmp         al,0x00 
059A    75 F5                     jne         L$67 
059C    2B F6                     sub         si,si 
059E    2B D2                     sub         dx,dx 
05A0                          L$68:
05A0    1F                        pop         ds 
05A1    89 F1                     mov         cx,si 
05A3    89 D3                     mov         bx,dx 
05A5    85 D2                     test        dx,dx 
05A7    75 0E                     jne         L$70 
05A9    85 F6                     test        si,si 
05AB    75 0A                     jne         L$70 
05AD    C7 46 FA 00 00            mov         word ptr -0x6[bp],0x0000 
05B2    EB 0C                     jmp         L$71 
05B4                          L$69:
05B4    E9 E5 00                  jmp         L$82 
05B7                          L$70:
05B7    8E C2                     mov         es,dx 
05B9    26 C6 04 00               mov         byte ptr es:[si],0x00 
05BD    8D 4C 01                  lea         cx,0x1[si] 
05C0                          L$71:
05C0    89 F8                     mov         ax,di 
05C2    8B 56 F8                  mov         dx,word ptr -0x8[bp] 
05C5    E8 00 00                  call        atoi_ 
05C8    89 C7                     mov         di,ax 
05CA    85 DB                     test        bx,bx 
05CC    75 04                     jne         L$72 
05CE    85 C9                     test        cx,cx 
05D0    74 0A                     je          L$73 
05D2                          L$72:
05D2    89 C8                     mov         ax,cx 
05D4    89 DA                     mov         dx,bx 
05D6    E8 00 00                  call        atoi_ 
05D9    89 46 FA                  mov         word ptr -0x6[bp],ax 
05DC                          L$73:
05DC    83 7E FE 17               cmp         word ptr -0x2[bp],0x0017 
05E0    76 03                     jbe         L$75 
05E2                          L$74:
05E2    E9 4F FF                  jmp         L$63 
05E5                          L$75:
05E5    83 FF 3B                  cmp         di,0x003b 
05E8    77 F8                     ja          L$74 
05EA    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
05ED    3D 3B 00                  cmp         ax,0x003b 
05F0    77 F0                     ja          L$74 
05F2    50                        push        ax 
05F3    57                        push        di 
05F4    FF 76 FE                  push        word ptr -0x2[bp] 
05F7    1E                        push        ds 
05F8    68 23 02                  push        offset DGROUP:L$238 
05FB    E8 00 00                  call        _cprintf 
05FE    83 C4 0A                  add         sp,0x000a 
0601    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
0604    3D 64 00                  cmp         ax,0x0064 
0607    73 19                     jae         L$76 
0609    31 D2                     xor         dx,dx 
060B    BB 0A 00                  mov         bx,0x000a 
060E    F7 F3                     div         bx 
0610    89 C1                     mov         cx,ax 
0612    C1 E1 04                  shl         cx,0x04 
0615    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
0618    31 D2                     xor         dx,dx 
061A    F7 F3                     div         bx 
061C    89 CB                     mov         bx,cx 
061E    09 D3                     or          bx,dx 
0620    EB 03                     jmp         L$77 
0622                          L$76:
0622    BB FF 00                  mov         bx,0x00ff 
0625                          L$77:
0625    88 DA                     mov         dl,bl 
0627    30 F6                     xor         dh,dh 
0629    89 56 FA                  mov         word ptr -0x6[bp],dx 
062C    8A 56 FA                  mov         dl,byte ptr -0x6[bp] 
062F    80 CA 80                  or          dl,0x80 
0632    31 C0                     xor         ax,ax 
0634    E8 00 00                  call        @rtc_set_loc 
0637    83 FF 64                  cmp         di,0x0064 
063A    73 1B                     jae         L$78 
063C    89 F8                     mov         ax,di 
063E    31 D2                     xor         dx,dx 
0640    BB 0A 00                  mov         bx,0x000a 
0643    F7 F3                     div         bx 
0645    89 C3                     mov         bx,ax 
0647    C1 E3 04                  shl         bx,0x04 
064A    89 F8                     mov         ax,di 
064C    31 D2                     xor         dx,dx 
064E    B9 0A 00                  mov         cx,0x000a 
0651    F7 F1                     div         cx 
0653    09 D3                     or          bx,dx 
0655    EB 03                     jmp         L$79 
0657                          L$78:
0657    BB FF 00                  mov         bx,0x00ff 
065A                          L$79:
065A    88 DA                     mov         dl,bl 
065C    30 F6                     xor         dh,dh 
065E    B8 01 00                  mov         ax,0x0001 
0661    E8 00 00                  call        @rtc_set_loc 
0664    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
0667    3D 64 00                  cmp         ax,0x0064 
066A    73 19                     jae         L$80 
066C    31 D2                     xor         dx,dx 
066E    BB 0A 00                  mov         bx,0x000a 
0671    F7 F3                     div         bx 
0673    89 C1                     mov         cx,ax 
0675    C1 E1 04                  shl         cx,0x04 
0678    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
067B    31 D2                     xor         dx,dx 
067D    F7 F3                     div         bx 
067F    89 CB                     mov         bx,cx 
0681    09 D3                     or          bx,dx 
0683    EB 03                     jmp         L$81 
0685                          L$80:
0685    BB FF 00                  mov         bx,0x00ff 
0688                          L$81:
0688    88 DA                     mov         dl,bl 
068A    30 F6                     xor         dh,dh 
068C    B8 02 00                  mov         ax,0x0002 
068F    E8 00 00                  call        @rtc_set_loc 
0692    8A 56 FA                  mov         dl,byte ptr -0x6[bp] 
0695    30 F6                     xor         dh,dh 
0697    31 C0                     xor         ax,ax 
0699    E8 00 00                  call        @rtc_set_loc 
069C                          L$82:
069C    C9                        leave       
069D    5F                        pop         di 
069E    E9 00 02                  jmp         L$108 

Routine Size: 454 bytes,    Routine Base: _TEXT + 04DB

06A1                          setup_serial_:
06A1    53                        push        bx 
06A2    51                        push        cx 
06A3    52                        push        dx 
06A4    56                        push        si 
06A5    57                        push        di 
06A6    C8 0E 00 00               enter       0x000e,0x00 
06AA    88 46 FE                  mov         byte ptr -0x2[bp],al 
06AD                          L$83:
06AD    8A 5E FE                  mov         bl,byte ptr -0x2[bp] 
06B0    30 FF                     xor         bh,bh 
06B2    C1 E3 02                  shl         bx,0x02 
06B5    FF B7 02 00               push        word ptr _rates+0x2[bx] 
06B9    FF B7 00 00               push        word ptr _rates[bx] 
06BD    1E                        push        ds 
06BE    68 39 02                  push        offset DGROUP:L$239 
06C1    E8 00 00                  call        _cprintf 
06C4    83 C4 08                  add         sp,0x0008 
06C7    BB 0A 00                  mov         bx,0x000a 
06CA    8C D2                     mov         dx,ss 
06CC    8D 46 F2                  lea         ax,-0xe[bp] 
06CF    E8 00 00                  call        getline_ 
06D2    80 7E F2 00               cmp         byte ptr -0xe[bp],0x00 
06D6    74 07                     je          L$84 
06D8    C7 46 FC 00 00            mov         word ptr -0x4[bp],0x0000 
06DD    EB 0C                     jmp         L$86 
06DF                          L$84:
06DF    E9 79 00                  jmp         L$91 
06E2                          L$85:
06E2    FF 46 FC                  inc         word ptr -0x4[bp] 
06E5    83 7E FC 08               cmp         word ptr -0x4[bp],0x0008 
06E9    7D 2D                     jge         L$89 
06EB                          L$86:
06EB    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
06EE    C1 E3 02                  shl         bx,0x02 
06F1    C4 BF 00 00               les         di,dword ptr _rates[bx] 
06F5    8C D6                     mov         si,ss 
06F7    8D 46 F2                  lea         ax,-0xe[bp] 
06FA    1E                        push        ds 
06FB    96                        xchg        ax,si 
06FC    8E D8                     mov         ds,ax 
06FE                          L$87:
06FE    AC                        lodsb       
06FF    26 8A 25                  mov         ah,byte ptr es:[di] 
0702    2A C4                     sub         al,ah 
0704    75 05                     jne         L$88 
0706    47                        inc         di 
0707    3A C4                     cmp         al,ah 
0709    75 F3                     jne         L$87 
070B                          L$88:
070B    18 E4                     sbb         ah,ah 
070D    1F                        pop         ds 
070E    85 C0                     test        ax,ax 
0710    75 D0                     jne         L$85 
0712    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
0715    88 46 FE                  mov         byte ptr -0x2[bp],al 
0718                          L$89:
0718    83 7E FC 08               cmp         word ptr -0x4[bp],0x0008 
071C    75 3D                     jne         L$91 
071E    1E                        push        ds 
071F    68 64 02                  push        offset DGROUP:L$240 
0722    E8 00 00                  call        _cprintf 
0725    83 C4 04                  add         sp,0x0004 
0728    C7 46 FC 00 00            mov         word ptr -0x4[bp],0x0000 
072D                          L$90:
072D    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
0730    C1 E3 02                  shl         bx,0x02 
0733    FF B7 02 00               push        word ptr _rates+0x2[bx] 
0737    FF B7 00 00               push        word ptr _rates[bx] 
073B    1E                        push        ds 
073C    68 8D 02                  push        offset DGROUP:L$241 
073F    E8 00 00                  call        _cprintf 
0742    83 C4 08                  add         sp,0x0008 
0745    FF 46 FC                  inc         word ptr -0x4[bp] 
0748    83 7E FC 08               cmp         word ptr -0x4[bp],0x0008 
074C    7C DF                     jl          L$90 
074E    1E                        push        ds 
074F    68 91 02                  push        offset DGROUP:L$242 
0752    E8 00 00                  call        _cprintf 
0755    83 C4 04                  add         sp,0x0004 
0758    E9 52 FF                  jmp         L$83 
075B                          L$91:
075B    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
075E    E9 3B FF                  jmp         L$82 

Routine Size: 192 bytes,    Routine Base: _TEXT + 06A1

0761                          floppy_ask_:
0761    51                        push        cx 
0762    56                        push        si 
0763    57                        push        di 
0764    C8 1A 00 00               enter       0x001a,0x00 
0768    89 C6                     mov         si,ax 
076A    89 D7                     mov         di,dx 
076C    89 5E FA                  mov         word ptr -0x6[bp],bx 
076F    8D 47 02                  lea         ax,0x2[bx] 
0772    01 C6                     add         si,ax 
0774    8A 46 FA                  mov         al,byte ptr -0x6[bp] 
0777    04 41                     add         al,0x41 
0779    88 46 FC                  mov         byte ptr -0x4[bp],al 
077C                          L$92:
077C    8E C7                     mov         es,di 
077E    26 8A 04                  mov         al,byte ptr es:[si] 
0781    24 0F                     and         al,0x0f 
0783    88 46 FE                  mov         byte ptr -0x2[bp],al 
0786    30 E4                     xor         ah,ah 
0788    50                        push        ax 
0789    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
078C    50                        push        ax 
078D    1E                        push        ds 
078E    68 93 02                  push        offset DGROUP:L$243 
0791    E8 00 00                  call        _cprintf 
0794    83 C4 08                  add         sp,0x0008 
0797    BB 14 00                  mov         bx,0x0014 
079A    8C D2                     mov         dx,ss 
079C    8D 46 E6                  lea         ax,-0x1a[bp] 
079F    E8 00 00                  call        getline_ 
07A2    80 7E E6 00               cmp         byte ptr -0x1a[bp],0x00 
07A6    74 0B                     je          L$93 
07A8    8C D2                     mov         dx,ss 
07AA    8D 46 E6                  lea         ax,-0x1a[bp] 
07AD    E8 00 00                  call        atoi_ 
07B0    88 46 FE                  mov         byte ptr -0x2[bp],al 
07B3                          L$93:
07B3    8A 4E FE                  mov         cl,byte ptr -0x2[bp] 
07B6    B8 01 00                  mov         ax,0x0001 
07B9    D3 E0                     shl         ax,cl 
07BB    85 06 00 00               test        word ptr _ftype_OK,ax 
07BF    74 BB                     je          L$92 
07C1    8E C7                     mov         es,di 
07C3    26 88 0C                  mov         byte ptr es:[si],cl 
07C6    84 C9                     test        cl,cl 
07C8    75 0A                     jne         L$94 
07CA    83 7E FA 00               cmp         word ptr -0x6[bp],0x0000 
07CE    75 04                     jne         L$94 
07D0    26 88 4C 01               mov         byte ptr es:0x1[si],cl 
07D4                          L$94:
07D4    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
07D7    30 E4                     xor         ah,ah 
07D9    E9 4E FA                  jmp         L$36 

Routine Size: 123 bytes,    Routine Base: _TEXT + 0761

07DC                          Floppy_:
07DC    53                        push        bx 
07DD    51                        push        cx 
07DE    56                        push        si 
07DF    57                        push        di 
07E0    C8 02 00 00               enter       0x0002,0x00 
07E4    89 C7                     mov         di,ax 
07E6    89 56 FE                  mov         word ptr -0x2[bp],dx 
07E9    31 F6                     xor         si,si 
07EB    1E                        push        ds 
07EC    68 AE 02                  push        offset DGROUP:L$244 
07EF    E8 00 00                  call        _cprintf 
07F2    83 C4 04                  add         sp,0x0004 
07F5    31 C9                     xor         cx,cx 
07F7    EB 0C                     jmp         L$96 
07F9                          L$95:
07F9    01 C6                     add         si,ax 
07FB    41                        inc         cx 
07FC    85 D2                     test        dx,dx 
07FE    74 1A                     je          L$97 
0800    83 F9 02                  cmp         cx,0x0002 
0803    7D 15                     jge         L$97 
0805                          L$96:
0805    89 CB                     mov         bx,cx 
0807    89 F8                     mov         ax,di 
0809    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
080C    E8 00 00                  call        floppy_ask_ 
080F    89 C2                     mov         dx,ax 
0811    85 C0                     test        ax,ax 
0813    74 E4                     je          L$95 
0815    B8 01 00                  mov         ax,0x0001 
0818    EB DF                     jmp         L$95 
081A                          L$97:
081A    83 FE 01                  cmp         si,0x0001 
081D    76 06                     jbe         L$98 
081F    1E                        push        ds 
0820    68 21 03                  push        offset DGROUP:L$245 
0823    EB 0B                     jmp         L$101 
0825                          L$98:
0825    85 F6                     test        si,si 
0827    75 03                     jne         L$100 
0829                          L$99:
0829    E9 A9 FC                  jmp         L$60 
082C                          L$100:
082C    1E                        push        ds 
082D    68 66 03                  push        offset DGROUP:L$246 
0830                          L$101:
0830    E8 00 00                  call        _cprintf 
0833    83 C4 04                  add         sp,0x0004 
0836    EB F1                     jmp         L$99 

Routine Size: 92 bytes,    Routine Base: _TEXT + 07DC

0838                          @nvram_check:
0838    56                        push        si 
0839    C8 02 00 00               enter       0x0002,0x00 
083D    C6 46 FE 00               mov         byte ptr -0x2[bp],0x00 
0841    31 F6                     xor         si,si 
0843                          L$102:
0843    89 F0                     mov         ax,si 
0845    80 CC 80                  or          ah,0x80 
0848    E8 00 00                  call        @rtc_get_loc 
084B    00 46 FE                  add         byte ptr -0x2[bp],al 
084E    46                        inc         si 
084F    83 FE 1F                  cmp         si,0x001f 
0852    7C EF                     jl          L$102 
0854    80 7E FE 5A               cmp         byte ptr -0x2[bp],0x5a 
0858    75 05                     jne         L$103 
085A    31 C0                     xor         ax,ax 
085C    C9                        leave       
085D    5E                        pop         si 
085E    C3                        ret         
085F                          L$103:
085F    B8 01 00                  mov         ax,0x0001 
0862    C9                        leave       
0863    5E                        pop         si 
0864    C3                        ret         

Routine Size: 45 bytes,    Routine Base: _TEXT + 0838

0865                          setup_ppide_:
0865    53                        push        bx 
0866    51                        push        cx 
0867    52                        push        dx 
0868    56                        push        si 
0869    C8 14 00 00               enter       0x0014,0x00 
086D    89 C6                     mov         si,ax 
086F                          L$104:
086F    56                        push        si 
0870    1E                        push        ds 
0871    68 9B 03                  push        offset DGROUP:L$247 
0874    E8 00 00                  call        _cprintf 
0877    83 C4 06                  add         sp,0x0006 
087A    BB 14 00                  mov         bx,0x0014 
087D    8C D2                     mov         dx,ss 
087F    8D 46 EC                  lea         ax,-0x14[bp] 
0882    E8 00 00                  call        getline_ 
0885    80 7E EC 00               cmp         byte ptr -0x14[bp],0x00 
0889    74 0A                     je          L$105 
088B    8C D2                     mov         dx,ss 
088D    8D 46 EC                  lea         ax,-0x14[bp] 
0890    E8 00 00                  call        atoi_ 
0893    89 C6                     mov         si,ax 
0895                          L$105:
0895    85 F6                     test        si,si 
0897    7C D6                     jl          L$104 
0899    83 FE 02                  cmp         si,0x0002 
089C    7F D1                     jg          L$104 
089E                          L$106:
089E    89 F0                     mov         ax,si 
08A0                          L$107:
08A0    C9                        leave       
08A1                          L$108:
08A1    5E                        pop         si 
08A2    5A                        pop         dx 
08A3    59                        pop         cx 
08A4    5B                        pop         bx 
08A5    C3                        ret         

Routine Size: 65 bytes,    Routine Base: _TEXT + 0865

08A6                          setup_usb_:
08A6    53                        push        bx 
08A7    51                        push        cx 
08A8    52                        push        dx 
08A9    56                        push        si 
08AA    C8 14 00 00               enter       0x0014,0x00 
08AE    89 C6                     mov         si,ax 
08B0                          L$109:
08B0    56                        push        si 
08B1    1E                        push        ds 
08B2    68 D4 03                  push        offset DGROUP:L$248 
08B5    E8 00 00                  call        _cprintf 
08B8    83 C4 06                  add         sp,0x0006 
08BB    BB 14 00                  mov         bx,0x0014 
08BE    8C D2                     mov         dx,ss 
08C0    8D 46 EC                  lea         ax,-0x14[bp] 
08C3    E8 00 00                  call        getline_ 
08C6    80 7E EC 00               cmp         byte ptr -0x14[bp],0x00 
08CA    74 0A                     je          L$110 
08CC    8C D2                     mov         dx,ss 
08CE    8D 46 EC                  lea         ax,-0x14[bp] 
08D1    E8 00 00                  call        atoi_ 
08D4    89 C6                     mov         si,ax 
08D6                          L$110:
08D6    85 F6                     test        si,si 
08D8    7C D6                     jl          L$109 
08DA    83 FE 01                  cmp         si,0x0001 
08DD    7F D1                     jg          L$109 
08DF    EB BD                     jmp         L$106 

Routine Size: 59 bytes,    Routine Base: _TEXT + 08A6

08E1                          setup_fixed_boot_:
08E1    53                        push        bx 
08E2    51                        push        cx 
08E3    56                        push        si 
08E4    57                        push        di 
08E5    C8 16 00 00               enter       0x0016,0x00 
08E9    89 C1                     mov         cx,ax 
08EB    8E C2                     mov         es,dx 
08ED    89 C3                     mov         bx,ax 
08EF    26 8A 47 0C               mov         al,byte ptr es:0xc[bx] 
08F3    30 E4                     xor         ah,ah 
08F5    89 C7                     mov         di,ax 
08F7    31 F6                     xor         si,si 
08F9    C7 46 FE 06 00            mov         word ptr -0x2[bp],0x0006 
08FE    8E C2                     mov         es,dx 
0900                          L$111:
0900    8B 5E FE                  mov         bx,word ptr -0x2[bp] 
0903    01 CB                     add         bx,cx 
0905    26 8A 07                  mov         al,byte ptr es:[bx] 
0908    30 E4                     xor         ah,ah 
090A    01 C6                     add         si,ax 
090C    FF 46 FE                  inc         word ptr -0x2[bp] 
090F    83 7E FE 0C               cmp         word ptr -0x2[bp],0x000c 
0913    7C EB                     jl          L$111 
0915    B8 01 00                  mov         ax,0x0001 
0918    89 46 FE                  mov         word ptr -0x2[bp],ax 
091B    83 FE 04                  cmp         si,0x0004 
091E    7E 05                     jle         L$112 
0920    BE 04 00                  mov         si,0x0004 
0923    EB 0B                     jmp         L$113 
0925                          L$112:
0925    39 C6                     cmp         si,ax 
0927    7F 07                     jg          L$113 
0929    89 F7                     mov         di,si 
092B    C7 46 FE 00 00            mov         word ptr -0x2[bp],0x0000 
0930                          L$113:
0930    39 F7                     cmp         di,si 
0932    7F 04                     jg          L$114 
0934    85 FF                     test        di,di 
0936    75 03                     jne         L$115 
0938                          L$114:
0938    BF 01 00                  mov         di,0x0001 
093B                          L$115:
093B    83 7E FE 00               cmp         word ptr -0x2[bp],0x0000 
093F    74 2F                     je          L$116 
0941    57                        push        di 
0942    56                        push        si 
0943    1E                        push        ds 
0944    68 07 04                  push        offset DGROUP:L$249 
0947    E8 00 00                  call        _cprintf 
094A    83 C4 08                  add         sp,0x0008 
094D    BB 14 00                  mov         bx,0x0014 
0950    8C D2                     mov         dx,ss 
0952    8D 46 EA                  lea         ax,-0x16[bp] 
0955    E8 00 00                  call        getline_ 
0958    80 7E EA 00               cmp         byte ptr -0x16[bp],0x00 
095C    74 12                     je          L$116 
095E    8C D2                     mov         dx,ss 
0960    8D 46 EA                  lea         ax,-0x16[bp] 
0963    E8 00 00                  call        atoi_ 
0966    89 C7                     mov         di,ax 
0968    85 C0                     test        ax,ax 
096A    7E CF                     jle         L$115 
096C    39 F0                     cmp         ax,si 
096E    7F CB                     jg          L$115 
0970                          L$116:
0970    89 F8                     mov         ax,di 
0972    E9 60 FB                  jmp         L$60 

Routine Size: 148 bytes,    Routine Base: _TEXT + 08E1

0975                          setup_boot_sig_check_:
0975    53                        push        bx 
0976    51                        push        cx 
0977    52                        push        dx 
0978    56                        push        si 
0979    C8 14 00 00               enter       0x0014,0x00 
097D    50                        push        ax 
097E    F6 46 EA 02               test        byte ptr -0x16[bp],0x02 
0982    75 05                     jne         L$117 
0984    BE 01 00                  mov         si,0x0001 
0987    EB 02                     jmp         L$118 
0989                          L$117:
0989    31 F6                     xor         si,si 
098B                          L$118:
098B    85 F6                     test        si,si 
098D    74 05                     je          L$120 
098F                          L$119:
098F    BA 2D 04                  mov         dx,offset DGROUP:L$250 
0992    EB 03                     jmp         L$121 
0994                          L$120:
0994    BA 31 04                  mov         dx,offset DGROUP:L$251 
0997                          L$121:
0997    8C D8                     mov         ax,ds 
0999    50                        push        ax 
099A    52                        push        dx 
099B    1E                        push        ds 
099C    68 35 04                  push        offset DGROUP:L$252 
099F    E8 00 00                  call        _cprintf 
09A2    83 C4 08                  add         sp,0x0008 
09A5    BB 14 00                  mov         bx,0x0014 
09A8    8C D2                     mov         dx,ss 
09AA    8D 46 EC                  lea         ax,-0x14[bp] 
09AD    E8 00 00                  call        getline_ 
09B0    8A 46 EC                  mov         al,byte ptr -0x14[bp] 
09B3    84 C0                     test        al,al 
09B5    74 21                     je          L$124 
09B7    3C 4E                     cmp         al,0x4e 
09B9    72 10                     jb          L$122 
09BB    76 24                     jbe         L$125 
09BD    3C 79                     cmp         al,0x79 
09BF    74 26                     je          L$126 
09C1    3C 6E                     cmp         al,0x6e 
09C3    74 1C                     je          L$125 
09C5    3C 59                     cmp         al,0x59 
09C7    74 1E                     je          L$126 
09C9    EB 08                     jmp         L$123 
09CB                          L$122:
09CB    3C 31                     cmp         al,0x31 
09CD    74 18                     je          L$126 
09CF    3C 30                     cmp         al,0x30 
09D1    74 0E                     je          L$125 
09D3                          L$123:
09D3    BE 02 00                  mov         si,0x0002 
09D6    EB B7                     jmp         L$119 
09D8                          L$124:
09D8    83 FE 01                  cmp         si,0x0001 
09DB    77 AE                     ja          L$118 
09DD    85 F6                     test        si,si 
09DF    75 06                     jne         L$126 
09E1                          L$125:
09E1    80 4E EA 02               or          byte ptr -0x16[bp],0x02 
09E5    EB 04                     jmp         L$127 
09E7                          L$126:
09E7    80 66 EA FD               and         byte ptr -0x16[bp],0xfd 
09EB                          L$127:
09EB    8B 46 EA                  mov         ax,word ptr -0x16[bp] 
09EE    E9 AF FE                  jmp         L$107 

Routine Size: 124 bytes,    Routine Base: _TEXT + 0975

09F1                          putstring_:
09F1    51                        push        cx 
09F2    56                        push        si 
09F3    57                        push        di 
09F4    C8 82 00 00               enter       0x0082,0x00 
09F8    89 C6                     mov         si,ax 
09FA    89 56 FE                  mov         word ptr -0x2[bp],dx 
09FD    89 DA                     mov         dx,bx 
09FF    8C D7                     mov         di,ss 
0A01    8D 9E 7E FF               lea         bx,-0x82[bp] 
0A05    31 C0                     xor         ax,ax 
0A07                          L$128:
0A07    39 D0                     cmp         ax,dx 
0A09    7D 1F                     jge         L$129 
0A0B    46                        inc         si 
0A0C    8E 46 FE                  mov         es,word ptr -0x2[bp] 
0A0F    26 8A 0C                  mov         cl,byte ptr es:[si] 
0A12    8E C7                     mov         es,di 
0A14    26 88 0F                  mov         byte ptr es:[bx],cl 
0A17    43                        inc         bx 
0A18    8E 46 FE                  mov         es,word ptr -0x2[bp] 
0A1B    26 8A 4C FF               mov         cl,byte ptr es:-0x1[si] 
0A1F    8E C7                     mov         es,di 
0A21    26 88 0F                  mov         byte ptr es:[bx],cl 
0A24    43                        inc         bx 
0A25    46                        inc         si 
0A26    40                        inc         ax 
0A27    40                        inc         ax 
0A28    EB DD                     jmp         L$128 
0A2A                          L$129:
0A2A    8E C7                     mov         es,di 
0A2C    26 C6 07 00               mov         byte ptr es:[bx],0x00 
0A30    8E C7                     mov         es,di 
0A32                          L$130:
0A32    8D 86 7E FF               lea         ax,-0x82[bp] 
0A36    39 C3                     cmp         bx,ax 
0A38    76 0E                     jbe         L$131 
0A3A    26 80 7F FF 20            cmp         byte ptr es:-0x1[bx],0x20 
0A3F    77 07                     ja          L$131 
0A41    4B                        dec         bx 
0A42    26 C6 07 00               mov         byte ptr es:[bx],0x00 
0A46    EB EA                     jmp         L$130 
0A48                          L$131:
0A48    8C D7                     mov         di,ss 
0A4A    8D 9E 7E FF               lea         bx,-0x82[bp] 
0A4E    8E C7                     mov         es,di 
0A50                          L$132:
0A50    26 8A 07                  mov         al,byte ptr es:[bx] 
0A53    84 C0                     test        al,al 
0A55    74 07                     je          L$133 
0A57    3C 20                     cmp         al,0x20 
0A59    77 03                     ja          L$133 
0A5B    43                        inc         bx 
0A5C    EB F2                     jmp         L$132 
0A5E                          L$133:
0A5E    57                        push        di 
0A5F    53                        push        bx 
0A60    1E                        push        ds 
0A61    68 55 04                  push        offset DGROUP:L$253 
0A64    E8 00 00                  call        _cprintf 
0A67    83 C4 08                  add         sp,0x0008 
0A6A    E9 BD F7                  jmp         L$36 

Routine Size: 124 bytes,    Routine Base: _TEXT + 09F1

0A6D                          p_bda_fx_:
0A6D    53                        push        bx 
0A6E    51                        push        cx 
0A6F    56                        push        si 
0A70    C8 02 00 00               enter       0x0002,0x00 
0A74    88 C1                     mov         cl,al 
0A76    A1 00 00                  mov         ax,word ptr _bios_data_area_ptr 
0A79    8B 36 02 00               mov         si,word ptr _bios_data_area_ptr+0x2 
0A7D    05 B0 00                  add         ax,0x00b0 
0A80    80 F9 80                  cmp         cl,0x80 
0A83    75 05                     jne         L$134 
0A85    BB 04 01                  mov         bx,0x0104 
0A88    EB 0C                     jmp         L$136 
0A8A                          L$134:
0A8A    80 F9 81                  cmp         cl,0x81 
0A8D    75 05                     jne         L$135 
0A8F    BB 18 01                  mov         bx,0x0118 
0A92    EB 02                     jmp         L$136 
0A94                          L$135:
0A94    31 DB                     xor         bx,bx 
0A96                          L$136:
0A96    31 D2                     xor         dx,dx 
0A98    80 E1 0F                  and         cl,0x0f 
0A9B    88 4E FE                  mov         byte ptr -0x2[bp],cl 
0A9E    C6 46 FF 00               mov         byte ptr -0x1[bp],0x00 
0AA2    8B 4E FE                  mov         cx,word ptr -0x2[bp] 
0AA5    C1 E1 04                  shl         cx,0x04 
0AA8    01 C8                     add         ax,cx 
0AAA    89 D1                     mov         cx,dx 
0AAC    09 D9                     or          cx,bx 
0AAE    74 09                     je          L$137 
0AB0    8E C2                     mov         es,dx 
0AB2    26 89 07                  mov         word ptr es:[bx],ax 
0AB5    26 89 77 02               mov         word ptr es:0x2[bx],si 
0AB9                          L$137:
0AB9    89 F2                     mov         dx,si 
0ABB    C9                        leave       
0ABC    E9 18 FA                  jmp         L$61 

Routine Size: 82 bytes,    Routine Base: _TEXT + 0A6D

0ABF                          @setup_fixed_disk:
0ABF    56                        push        si 
0AC0    57                        push        di 
0AC1    C8 14 02 00               enter       0x0214,0x00 
0AC5    88 56 F8                  mov         byte ptr -0x8[bp],dl 
0AC8    88 5E FC                  mov         byte ptr -0x4[bp],bl 
0ACB    8A 66 08                  mov         ah,byte ptr 0x8[bp] 
0ACE    C0 E4 04                  shl         ah,0x04 
0AD1    88 66 FE                  mov         byte ptr -0x2[bp],ah 
0AD4    30 F6                     xor         dh,dh 
0AD6    52                        push        dx 
0AD7    30 E4                     xor         ah,ah 
0AD9    50                        push        ax 
0ADA    80 FB 02                  cmp         bl,0x02 
0ADD    75 05                     jne         L$138 
0ADF    BA 58 04                  mov         dx,offset DGROUP:L$254 
0AE2    EB 0D                     jmp         L$140 
0AE4                          L$138:
0AE4    80 FB 04                  cmp         bl,0x04 
0AE7    75 05                     jne         L$139 
0AE9    BA 5E 04                  mov         dx,offset DGROUP:L$255 
0AEC    EB 03                     jmp         L$140 
0AEE                          L$139:
0AEE    BA 62 04                  mov         dx,offset DGROUP:L$256 
0AF1                          L$140:
0AF1    8C D8                     mov         ax,ds 
0AF3    50                        push        ax 
0AF4    52                        push        dx 
0AF5    1E                        push        ds 
0AF6    68 6A 04                  push        offset DGROUP:L$257 
0AF9    E8 00 00                  call        _cprintf 
0AFC    83 C4 0C                  add         sp,0x000c 
0AFF    80 7E FC 02               cmp         byte ptr -0x4[bp],0x02 
0B03    75 12                     jne         L$141 
0B05    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
0B08    30 E4                     xor         ah,ah 
0B0A    50                        push        ax 
0B0B    8D 96 EC FD               lea         dx,-0x214[bp] 
0B0F    16                        push        ss 
0B10    52                        push        dx 
0B11    E8 00 00                  call        _PPIDE_READ_ID 
0B14    83 C4 06                  add         sp,0x0006 
0B17                          L$141:
0B17    80 7E FC 04               cmp         byte ptr -0x4[bp],0x04 
0B1B    75 12                     jne         L$142 
0B1D    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
0B20    30 E4                     xor         ah,ah 
0B22    50                        push        ax 
0B23    8D 96 EC FD               lea         dx,-0x214[bp] 
0B27    16                        push        ss 
0B28    52                        push        dx 
0B29    E8 00 00                  call        _USB_READ_ID 
0B2C    83 C4 06                  add         sp,0x0006 
0B2F                          L$142:
0B2F    1E                        push        ds 
0B30    68 8A 04                  push        offset DGROUP:L$258 
0B33    E8 00 00                  call        _cprintf 
0B36    83 C4 04                  add         sp,0x0004 
0B39    BB 28 00                  mov         bx,0x0028 
0B3C    8C D2                     mov         dx,ss 
0B3E    8D 86 22 FE               lea         ax,-0x1de[bp] 
0B42    E8 00 00                  call        putstring_ 
0B45    1E                        push        ds 
0B46    68 92 04                  push        offset DGROUP:L$259 
0B49    E8 00 00                  call        _cprintf 
0B4C    83 C4 04                  add         sp,0x0004 
0B4F    BB 14 00                  mov         bx,0x0014 
0B52    8C D2                     mov         dx,ss 
0B54    8D 86 00 FE               lea         ax,-0x200[bp] 
0B58    E8 00 00                  call        putstring_ 
0B5B    1E                        push        ds 
0B5C    68 9C 04                  push        offset DGROUP:L$260 
0B5F    E8 00 00                  call        _cprintf 
0B62    83 C4 04                  add         sp,0x0004 
0B65    BB 08 00                  mov         bx,0x0008 
0B68    8C D2                     mov         dx,ss 
0B6A    8D 86 1A FE               lea         ax,-0x1e6[bp] 
0B6E    E8 00 00                  call        putstring_ 
0B71    F6 86 4F FE 02            test        byte ptr -0x1b1[bp],0x02 
0B76    74 05                     je          L$143 
0B78    BA A9 00                  mov         dx,offset DGROUP:L$225 
0B7B    EB 03                     jmp         L$144 
0B7D                          L$143:
0B7D    BA A8 04                  mov         dx,offset DGROUP:L$261 
0B80                          L$144:
0B80    8C D8                     mov         ax,ds 
0B82    50                        push        ax 
0B83    52                        push        dx 
0B84    FF B6 F8 FD               push        word ptr -0x208[bp] 
0B88    FF B6 F2 FD               push        word ptr -0x20e[bp] 
0B8C    FF B6 EE FD               push        word ptr -0x212[bp] 
0B90    1E                        push        ds 
0B91    68 AC 04                  push        offset DGROUP:L$262 
0B94    E8 00 00                  call        _cprintf 
0B97    83 C4 0E                  add         sp,0x000e 
0B9A    FF B6 60 FE               push        word ptr -0x1a0[bp] 
0B9E    FF B6 5E FE               push        word ptr -0x1a2[bp] 
0BA2    FF B6 5C FE               push        word ptr -0x1a4[bp] 
0BA6    FF B6 5A FE               push        word ptr -0x1a6[bp] 
0BAA    FF B6 58 FE               push        word ptr -0x1a8[bp] 
0BAE    1E                        push        ds 
0BAF    68 D7 04                  push        offset DGROUP:L$263 
0BB2    E8 00 00                  call        _cprintf 
0BB5    83 C4 0E                  add         sp,0x000e 
0BB8    FF B6 66 FE               push        word ptr -0x19a[bp] 
0BBC    FF B6 64 FE               push        word ptr -0x19c[bp] 
0BC0    1E                        push        ds 
0BC1    68 FD 04                  push        offset DGROUP:L$264 
0BC4    E8 00 00                  call        _cprintf 
0BC7    83 C4 08                  add         sp,0x0008 
0BCA    FF B6 B6 FE               push        word ptr -0x14a[bp] 
0BCE    FF B6 B4 FE               push        word ptr -0x14c[bp] 
0BD2    FF B6 BA FE               push        word ptr -0x146[bp] 
0BD6    FF B6 B8 FE               push        word ptr -0x148[bp] 
0BDA    1E                        push        ds 
0BDB    68 0F 05                  push        offset DGROUP:L$265 
0BDE    E8 00 00                  call        _cprintf 
0BE1    83 C4 0C                  add         sp,0x000c 
0BE4    8A 46 F8                  mov         al,byte ptr -0x8[bp] 
0BE7    30 E4                     xor         ah,ah 
0BE9    E8 00 00                  call        p_bda_fx_ 
0BEC    89 C3                     mov         bx,ax 
0BEE    8E C2                     mov         es,dx 
0BF0    89 C6                     mov         si,ax 
0BF2    89 56 F0                  mov         word ptr -0x10[bp],dx 
0BF5    8B BE EE FD               mov         di,word ptr -0x212[bp] 
0BF9    C7 46 EC 00 00            mov         word ptr -0x14[bp],0x0000 
0BFE    26 89 7F 09               mov         word ptr es:0x9[bx],di 
0C02    8B 86 F2 FD               mov         ax,word ptr -0x20e[bp] 
0C06    89 46 EE                  mov         word ptr -0x12[bp],ax 
0C09    8A 86 F2 FD               mov         al,byte ptr -0x20e[bp] 
0C0D    26 88 47 0B               mov         byte ptr es:0xb[bx],al 
0C11    8B 86 F8 FD               mov         ax,word ptr -0x208[bp] 
0C15    89 46 F6                  mov         word ptr -0xa[bp],ax 
0C18    8A 86 F8 FD               mov         al,byte ptr -0x208[bp] 
0C1C    26 88 47 04               mov         byte ptr es:0x4[bx],al 
0C20    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
0C23    84 C0                     test        al,al 
0C25    74 05                     je          L$145 
0C27    B8 10 00                  mov         ax,0x0010 
0C2A    EB 02                     jmp         L$146 
0C2C                          L$145:
0C2C    30 E4                     xor         ah,ah 
0C2E                          L$146:
0C2E    0C A0                     or          al,0xa0 
0C30    89 C2                     mov         dx,ax 
0C32    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
0C35    30 E4                     xor         ah,ah 
0C37    09 D0                     or          ax,dx 
0C39    8E 46 F0                  mov         es,word ptr -0x10[bp] 
0C3C    26 88 44 08               mov         byte ptr es:0x8[si],al 
0C40    F6 86 4F FE 02            test        byte ptr -0x1b1[bp],0x02 
0C45    74 25                     je          L$147 
0C47    8B 86 64 FE               mov         ax,word ptr -0x19c[bp] 
0C4B    26 89 44 0C               mov         word ptr es:0xc[si],ax 
0C4F    8B 86 66 FE               mov         ax,word ptr -0x19a[bp] 
0C53    80 E4 0F                  and         ah,0x0f 
0C56    26 89 44 05               mov         word ptr es:0x5[si],ax 
0C5A    8B 86 66 FE               mov         ax,word ptr -0x19a[bp] 
0C5E    C1 E8 0C                  shr         ax,0x0c 
0C61    26 88 44 07               mov         byte ptr es:0x7[si],al 
0C65    26 80 4C 08 40            or          byte ptr es:0x8[si],0x40 
0C6A    EB 13                     jmp         L$148 
0C6C                          L$147:
0C6C    8B 86 5E FE               mov         ax,word ptr -0x1a2[bp] 
0C70    26 89 44 0C               mov         word ptr es:0xc[si],ax 
0C74    8B 86 60 FE               mov         ax,word ptr -0x1a0[bp] 
0C78    80 E4 0F                  and         ah,0x0f 
0C7B    26 89 44 05               mov         word ptr es:0x5[si],ax 
0C7F                          L$148:
0C7F    C6 46 FA 00               mov         byte ptr -0x6[bp],0x00 
0C83    8B 46 EC                  mov         ax,word ptr -0x14[bp] 
0C86    09 F8                     or          ax,di 
0C88    75 07                     jne         L$149 
0C8A    31 FF                     xor         di,di 
0C8C    C7 46 EC 01 00            mov         word ptr -0x14[bp],0x0001 
0C91                          L$149:
0C91    8B 5E EE                  mov         bx,word ptr -0x12[bp] 
0C94    89 F8                     mov         ax,di 
0C96    8B 56 EC                  mov         dx,word ptr -0x14[bp] 
0C99    E8 00 00                  call        @mulLS 
0C9C    8B 5E F6                  mov         bx,word ptr -0xa[bp] 
0C9F    E8 00 00                  call        @mulLS 
0CA2    89 46 F2                  mov         word ptr -0xe[bp],ax 
0CA5    89 56 F4                  mov         word ptr -0xc[bp],dx 
0CA8                          L$150:
0CA8    83 7E EC 00               cmp         word ptr -0x14[bp],0x0000 
0CAC    75 06                     jne         L$151 
0CAE    81 FF 00 04               cmp         di,0x0400 
0CB2    76 33                     jbe         L$153 
0CB4                          L$151:
0CB4    81 7E EE FF 00            cmp         word ptr -0x12[bp],0x00ff 
0CB9    73 2C                     jae         L$153 
0CBB    D1 66 EE                  shl         word ptr -0x12[bp],0x01 
0CBE    81 7E EE FF 00            cmp         word ptr -0x12[bp],0x00ff 
0CC3    76 05                     jbe         L$152 
0CC5    C7 46 EE FF 00            mov         word ptr -0x12[bp],0x00ff 
0CCA                          L$152:
0CCA    8B 5E F6                  mov         bx,word ptr -0xa[bp] 
0CCD    8B 46 F2                  mov         ax,word ptr -0xe[bp] 
0CD0    8B 56 F4                  mov         dx,word ptr -0xc[bp] 
0CD3    E8 00 00                  call        @divLS 
0CD6    8B 5E EE                  mov         bx,word ptr -0x12[bp] 
0CD9    E8 00 00                  call        @divLS 
0CDC    89 C7                     mov         di,ax 
0CDE    89 56 EC                  mov         word ptr -0x14[bp],dx 
0CE1    C6 46 FA A0               mov         byte ptr -0x6[bp],0xa0 
0CE5    EB C1                     jmp         L$150 
0CE7                          L$153:
0CE7    83 7E EC 00               cmp         word ptr -0x14[bp],0x0000 
0CEB    75 06                     jne         L$154 
0CED    81 FF 00 04               cmp         di,0x0400 
0CF1    76 26                     jbe         L$155 
0CF3                          L$154:
0CF3    83 7E F6 3F               cmp         word ptr -0xa[bp],0x003f 
0CF7    73 20                     jae         L$155 
0CF9    B8 3F 00                  mov         ax,0x003f 
0CFC    89 46 F6                  mov         word ptr -0xa[bp],ax 
0CFF    89 C3                     mov         bx,ax 
0D01    8B 46 F2                  mov         ax,word ptr -0xe[bp] 
0D04    8B 56 F4                  mov         dx,word ptr -0xc[bp] 
0D07    E8 00 00                  call        @divLS 
0D0A    8B 5E EE                  mov         bx,word ptr -0x12[bp] 
0D0D    E8 00 00                  call        @divLS 
0D10    89 C7                     mov         di,ax 
0D12    89 56 EC                  mov         word ptr -0x14[bp],dx 
0D15    C6 46 FA A0               mov         byte ptr -0x6[bp],0xa0 
0D19                          L$155:
0D19    83 7E EC 00               cmp         word ptr -0x14[bp],0x0000 
0D1D    75 06                     jne         L$156 
0D1F    81 FF 00 04               cmp         di,0x0400 
0D23    76 08                     jbe         L$157 
0D25                          L$156:
0D25    BF 00 04                  mov         di,0x0400 
0D28    C7 46 EC 00 00            mov         word ptr -0x14[bp],0x0000 
0D2D                          L$157:
0D2D    8E 46 F0                  mov         es,word ptr -0x10[bp] 
0D30    26 89 3C                  mov         word ptr es:[si],di 
0D33    8A 46 EE                  mov         al,byte ptr -0x12[bp] 
0D36    26 88 44 02               mov         byte ptr es:0x2[si],al 
0D3A    8A 46 F6                  mov         al,byte ptr -0xa[bp] 
0D3D    26 88 44 0E               mov         byte ptr es:0xe[si],al 
0D41    8A 46 FA                  mov         al,byte ptr -0x6[bp] 
0D44    26 88 44 03               mov         byte ptr es:0x3[si],al 
0D48    3C A0                     cmp         al,0xa0 
0D4A    75 24                     jne         L$158 
0D4C    8B 5E EE                  mov         bx,word ptr -0x12[bp] 
0D4F    89 F8                     mov         ax,di 
0D51    8B 56 EC                  mov         dx,word ptr -0x14[bp] 
0D54    E8 00 00                  call        @mulLS 
0D57    8B 5E F6                  mov         bx,word ptr -0xa[bp] 
0D5A    E8 00 00                  call        @mulLS 
0D5D    52                        push        dx 
0D5E    50                        push        ax 
0D5F    FF 76 F6                  push        word ptr -0xa[bp] 
0D62    FF 76 EE                  push        word ptr -0x12[bp] 
0D65    57                        push        di 
0D66    1E                        push        ds 
0D67    68 29 05                  push        offset DGROUP:L$266 
0D6A    E8 00 00                  call        _cprintf 
0D6D    83 C4 0E                  add         sp,0x000e 
0D70                          L$158:
0D70    89 F2                     mov         dx,si 
0D72    8B 7E F0                  mov         di,word ptr -0x10[bp] 
0D75    30 C0                     xor         al,al 
0D77    88 46 FE                  mov         byte ptr -0x2[bp],al 
0D7A    30 E4                     xor         ah,ah 
0D7C    8E C7                     mov         es,di 
0D7E                          L$159:
0D7E    89 D3                     mov         bx,dx 
0D80    42                        inc         dx 
0D81    26 8A 1F                  mov         bl,byte ptr es:[bx] 
0D84    00 5E FE                  add         byte ptr -0x2[bp],bl 
0D87    40                        inc         ax 
0D88    3D 0F 00                  cmp         ax,0x000f 
0D8B    72 F1                     jb          L$159 
0D8D    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
0D90    8E 46 F0                  mov         es,word ptr -0x10[bp] 
0D93    26 88 44 0F               mov         byte ptr es:0xf[si],al 
0D97    26 F6 5C 0F               neg         byte ptr es:0xf[si] 
0D9B    1E                        push        ds 
0D9C    68 91 02                  push        offset DGROUP:L$242 
0D9F    E8 00 00                  call        _cprintf 
0DA2    83 C4 04                  add         sp,0x0004 
0DA5    C9                        leave       
0DA6    5F                        pop         di 
0DA7    5E                        pop         si 
0DA8    C2 02 00                  ret         0x0002 

Routine Size: 748 bytes,    Routine Base: _TEXT + 0ABF

0DAB                          put_char_array_:
0DAB    51                        push        cx 
0DAC    56                        push        si 
0DAD    57                        push        di 
0DAE    C8 02 00 00               enter       0x0002,0x00 
0DB2    89 C6                     mov         si,ax 
0DB4    89 D7                     mov         di,dx 
0DB6    88 5E FE                  mov         byte ptr -0x2[bp],bl 
0DB9                          L$160:
0DB9    FE 4E FE                  dec         byte ptr -0x2[bp] 
0DBC    80 7E FE FF               cmp         byte ptr -0x2[bp],0xff 
0DC0    75 03                     jne         L$161 
0DC2    E9 65 F4                  jmp         L$36 
0DC5                          L$161:
0DC5    8E C7                     mov         es,di 
0DC7    26 8A 04                  mov         al,byte ptr es:[si] 
0DCA    30 E4                     xor         ah,ah 
0DCC    46                        inc         si 
0DCD    E8 00 00                  call        @uart_putchar 
0DD0    EB E7                     jmp         L$160 

Routine Size: 39 bytes,    Routine Base: _TEXT + 0DAB

0DD2                          @nvram_apply:
0DD2    56                        push        si 
0DD3    57                        push        di 
0DD4    C8 08 00 00               enter       0x0008,0x00 
0DD8    31 F6                     xor         si,si 
0DDA    89 76 FE                  mov         word ptr -0x2[bp],si 
0DDD    EB 09                     jmp         L$163 
0DDF                          L$162:
0DDF    FF 46 FE                  inc         word ptr -0x2[bp] 
0DE2    83 7E FE 02               cmp         word ptr -0x2[bp],0x0002 
0DE6    7D 3F                     jge         L$165 
0DE8                          L$163:
0DE8    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
0DEB    40                        inc         ax 
0DEC    40                        inc         ax 
0DED    80 CC 80                  or          ah,0x80 
0DF0    E8 00 00                  call        @rtc_get_loc 
0DF3    88 C3                     mov         bl,al 
0DF5    3C 04                     cmp         al,0x04 
0DF7    75 03                     jne         L$164 
0DF9    80 CB 30                  or          bl,0x30 
0DFC                          L$164:
0DFC    C4 3E 00 00               les         di,dword ptr _bios_data_area_ptr 
0E00    03 7E FE                  add         di,word ptr -0x2[bp] 
0E03    26 88 9D F8 00            mov         byte ptr es:0xf8[di],bl 
0E08    84 DB                     test        bl,bl 
0E0A    74 D3                     je          L$162 
0E0C    88 D8                     mov         al,bl 
0E0E    24 0F                     and         al,0x0f 
0E10    30 E4                     xor         ah,ah 
0E12    50                        push        ax 
0E13    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
0E16    05 41 00                  add         ax,0x0041 
0E19    50                        push        ax 
0E1A    1E                        push        ds 
0E1B    68 5A 05                  push        offset DGROUP:L$267 
0E1E    E8 00 00                  call        _cprintf 
0E21    83 C4 08                  add         sp,0x0008 
0E24    46                        inc         si 
0E25    EB B8                     jmp         L$162 
0E27                          L$165:
0E27    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
0E2B    83 C3 10                  add         bx,0x0010 
0E2E    85 F6                     test        si,si 
0E30    74 05                     je          L$166 
0E32    B8 01 00                  mov         ax,0x0001 
0E35    EB 02                     jmp         L$167 
0E37                          L$166:
0E37    31 C0                     xor         ax,ax 
0E39                          L$167:
0E39    25 01 00                  and         ax,0x0001 
0E3C    26 80 27 FE               and         byte ptr es:[bx],0xfe 
0E40    26 09 07                  or          word ptr es:[bx],ax 
0E43    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
0E47    83 C3 10                  add         bx,0x0010 
0E4A    85 F6                     test        si,si 
0E4C    74 01                     je          L$168 
0E4E    4E                        dec         si 
0E4F                          L$168:
0E4F    83 E6 03                  and         si,0x0003 
0E52    26 80 27 3F               and         byte ptr es:[bx],0x3f 
0E56    C1 E6 06                  shl         si,0x06 
0E59    26 09 37                  or          word ptr es:[bx],si 
0E5C    C7 46 F8 00 00            mov         word ptr -0x8[bp],0x0000 
0E61    B8 07 80                  mov         ax,0x8007 
0E64    E8 00 00                  call        @rtc_get_loc 
0E67    30 E4                     xor         ah,ah 
0E69    89 C7                     mov         di,ax 
0E6B    83 E7 03                  and         di,0x0003 
0E6E    30 C0                     xor         al,al 
0E70    89 46 F8                  mov         word ptr -0x8[bp],ax 
0E73    89 FE                     mov         si,di 
0E75    C1 E6 02                  shl         si,0x02 
0E78    89 76 F8                  mov         word ptr -0x8[bp],si 
0E7B    B8 06 80                  mov         ax,0x8006 
0E7E    E8 00 00                  call        @rtc_get_loc 
0E81    30 E4                     xor         ah,ah 
0E83    24 03                     and         al,0x03 
0E85    89 46 FA                  mov         word ptr -0x6[bp],ax 
0E88    83 E6 FC                  and         si,0xfffc 
0E8B    89 76 F8                  mov         word ptr -0x8[bp],si 
0E8E    09 46 F8                  or          word ptr -0x8[bp],ax 
0E91    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
0E95    8A 56 F8                  mov         dl,byte ptr -0x8[bp] 
0E98    26 88 97 FE 00            mov         byte ptr es:0xfe[bx],dl 
0E9D    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
0EA1    83 C3 10                  add         bx,0x0010 
0EA4    85 C0                     test        ax,ax 
0EA6    74 04                     je          L$169 
0EA8    30 C0                     xor         al,al 
0EAA    EB 03                     jmp         L$170 
0EAC                          L$169:
0EAC    B8 01 00                  mov         ax,0x0001 
0EAF                          L$170:
0EAF    30 E4                     xor         ah,ah 
0EB1    24 03                     and         al,0x03 
0EB3    26 80 67 01 3F            and         byte ptr es:0x1[bx],0x3f 
0EB8    C1 E0 0E                  shl         ax,0x0e 
0EBB    26 09 07                  or          word ptr es:[bx],ax 
0EBE    8B 76 FA                  mov         si,word ptr -0x6[bp] 
0EC1    01 FE                     add         si,di 
0EC3    FF 76 F8                  push        word ptr -0x8[bp] 
0EC6    56                        push        si 
0EC7    57                        push        di 
0EC8    FF 76 FA                  push        word ptr -0x6[bp] 
0ECB    1E                        push        ds 
0ECC    68 6E 05                  push        offset DGROUP:L$268 
0ECF    E8 00 00                  call        _cprintf 
0ED2    83 C4 0C                  add         sp,0x000c 
0ED5    1E                        push        ds 
0ED6    68 91 02                  push        offset DGROUP:L$242 
0ED9    E8 00 00                  call        _cprintf 
0EDC    83 C4 04                  add         sp,0x0004 
0EDF    83 FE 04                  cmp         si,0x0004 
0EE2    7E 03                     jle         L$171 
0EE4    BE 04 00                  mov         si,0x0004 
0EE7                          L$171:
0EE7    31 C0                     xor         ax,ax 
0EE9    89 46 FE                  mov         word ptr -0x2[bp],ax 
0EEC    89 46 FC                  mov         word ptr -0x4[bp],ax 
0EEF                          L$172:
0EEF    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
0EF2    3B 46 FA                  cmp         ax,word ptr -0x6[bp] 
0EF5    73 20                     jae         L$173 
0EF7    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
0EFA    39 C6                     cmp         si,ax 
0EFC    7E 19                     jle         L$173 
0EFE    8A 56 FC                  mov         dl,byte ptr -0x4[bp] 
0F01    80 CA 02                  or          dl,0x02 
0F04    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
0F08    01 C3                     add         bx,ax 
0F0A    26 88 97 A9 00            mov         byte ptr es:0xa9[bx],dl 
0F0F    FF 46 FC                  inc         word ptr -0x4[bp] 
0F12    FF 46 FE                  inc         word ptr -0x2[bp] 
0F15    EB D8                     jmp         L$172 
0F17                          L$173:
0F17    C7 46 FC 00 00            mov         word ptr -0x4[bp],0x0000 
0F1C                          L$174:
0F1C    3B 7E FC                  cmp         di,word ptr -0x4[bp] 
0F1F    76 20                     jbe         L$175 
0F21    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
0F24    39 C6                     cmp         si,ax 
0F26    7E 19                     jle         L$175 
0F28    8A 56 FC                  mov         dl,byte ptr -0x4[bp] 
0F2B    80 CA 04                  or          dl,0x04 
0F2E    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
0F32    01 C3                     add         bx,ax 
0F34    26 88 97 A9 00            mov         byte ptr es:0xa9[bx],dl 
0F39    FF 46 FC                  inc         word ptr -0x4[bp] 
0F3C    FF 46 FE                  inc         word ptr -0x2[bp] 
0F3F    EB DB                     jmp         L$174 
0F41                          L$175:
0F41    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
0F44    3D 04 00                  cmp         ax,0x0004 
0F47    7D 11                     jge         L$176 
0F49    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
0F4D    01 C3                     add         bx,ax 
0F4F    26 C6 87 A9 00 00         mov         byte ptr es:0xa9[bx],0x00 
0F55    FF 46 FE                  inc         word ptr -0x2[bp] 
0F58    EB E7                     jmp         L$175 
0F5A                          L$176:
0F5A    31 C0                     xor         ax,ax 
0F5C    89 46 FE                  mov         word ptr -0x2[bp],ax 
0F5F    89 46 FC                  mov         word ptr -0x4[bp],ax 
0F62                          L$177:
0F62    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
0F65    3B 46 FA                  cmp         ax,word ptr -0x6[bp] 
0F68    73 26                     jae         L$178 
0F6A    3B 76 FE                  cmp         si,word ptr -0x2[bp] 
0F6D    7E 21                     jle         L$178 
0F6F    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
0F72    30 E4                     xor         ah,ah 
0F74    50                        push        ax 
0F75    8A 56 FE                  mov         dl,byte ptr -0x2[bp] 
0F78    80 C2 80                  add         dl,0x80 
0F7B    30 F6                     xor         dh,dh 
0F7D    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
0F80    04 43                     add         al,0x43 
0F82    BB 02 00                  mov         bx,0x0002 
0F85    E8 00 00                  call        @setup_fixed_disk 
0F88    FF 46 FC                  inc         word ptr -0x4[bp] 
0F8B    FF 46 FE                  inc         word ptr -0x2[bp] 
0F8E    EB D2                     jmp         L$177 
0F90                          L$178:
0F90    C7 46 FC 00 00            mov         word ptr -0x4[bp],0x0000 
0F95                          L$179:
0F95    3B 7E FC                  cmp         di,word ptr -0x4[bp] 
0F98    76 26                     jbe         L$180 
0F9A    3B 76 FE                  cmp         si,word ptr -0x2[bp] 
0F9D    7E 21                     jle         L$180 
0F9F    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
0FA2    30 E4                     xor         ah,ah 
0FA4    50                        push        ax 
0FA5    8A 56 FE                  mov         dl,byte ptr -0x2[bp] 
0FA8    80 C2 80                  add         dl,0x80 
0FAB    30 F6                     xor         dh,dh 
0FAD    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
0FB0    04 43                     add         al,0x43 
0FB2    BB 04 00                  mov         bx,0x0004 
0FB5    E8 00 00                  call        @setup_fixed_disk 
0FB8    FF 46 FC                  inc         word ptr -0x4[bp] 
0FBB    FF 46 FE                  inc         word ptr -0x2[bp] 
0FBE    EB D5                     jmp         L$179 
0FC0                          L$180:
0FC0    1E                        push        ds 
0FC1    68 96 05                  push        offset DGROUP:L$269 
0FC4    E8 00 00                  call        _cprintf 
0FC7    83 C4 04                  add         sp,0x0004 
0FCA    C7 46 FE 00 00            mov         word ptr -0x2[bp],0x0000 
0FCF                          L$181:
0FCF    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
0FD3    03 5E FE                  add         bx,word ptr -0x2[bp] 
0FD6    26 8A 87 A9 00            mov         al,byte ptr es:0xa9[bx] 
0FDB    30 E4                     xor         ah,ah 
0FDD    50                        push        ax 
0FDE    1E                        push        ds 
0FDF    68 A8 05                  push        offset DGROUP:L$270 
0FE2    E8 00 00                  call        _cprintf 
0FE5    83 C4 06                  add         sp,0x0006 
0FE8    FF 46 FE                  inc         word ptr -0x2[bp] 
0FEB    83 7E FE 04               cmp         word ptr -0x2[bp],0x0004 
0FEF    7C DE                     jl          L$181 
0FF1    1E                        push        ds 
0FF2    68 AE 05                  push        offset DGROUP:L$271 
0FF5    E8 00 00                  call        _cprintf 
0FF8    83 C4 04                  add         sp,0x0004 
0FFB    C9                        leave       
0FFC    5F                        pop         di 
0FFD    5E                        pop         si 
0FFE    C3                        ret         

Routine Size: 557 bytes,    Routine Base: _TEXT + 0DD2

0FFF                          @nvram_setup:
0FFF    56                        push        si 
1000    C8 20 00 00               enter       0x0020,0x00 
1004    E8 00 00                  call        @nvram_check 
1007    85 C0                     test        ax,ax 
1009    74 1C                     je          L$183 
100B    1E                        push        ds 
100C    68 B1 05                  push        offset DGROUP:L$272 
100F    E8 00 00                  call        _cprintf 
1012    83 C4 04                  add         sp,0x0004 
1015    31 F6                     xor         si,si 
1017                          L$182:
1017    C6 42 E0 00               mov         byte ptr -0x20[bp+si],0x00 
101B    46                        inc         si 
101C    83 FE 1F                  cmp         si,0x001f 
101F    7C F6                     jl          L$182 
1021    C6 46 E5 03               mov         byte ptr -0x1b[bp],0x03 
1025    EB 1D                     jmp         L$185 
1027                          L$183:
1027    1E                        push        ds 
1028    68 CC 05                  push        offset DGROUP:L$273 
102B    E8 00 00                  call        _cprintf 
102E    83 C4 04                  add         sp,0x0004 
1031    31 F6                     xor         si,si 
1033                          L$184:
1033    89 F0                     mov         ax,si 
1035    80 CC 80                  or          ah,0x80 
1038    E8 00 00                  call        @rtc_get_loc 
103B    88 42 E0                  mov         byte ptr -0x20[bp+si],al 
103E    46                        inc         si 
103F    83 FE 1F                  cmp         si,0x001f 
1042    7C EF                     jl          L$184 
1044                          L$185:
1044    31 C0                     xor         ax,ax 
1046    E8 00 00                  call        @rtc_get_loc 
1049    24 80                     and         al,0x80 
104B    74 06                     je          L$186 
104D    1E                        push        ds 
104E    68 DC 01                  push        offset DGROUP:L$235 
1051    EB 04                     jmp         L$187 
1053                          L$186:
1053    1E                        push        ds 
1054    68 E5 05                  push        offset DGROUP:L$274 
1057                          L$187:
1057    E8 00 00                  call        _cprintf 
105A    83 C4 04                  add         sp,0x0004 
105D    31 D2                     xor         dx,dx 
105F    B8 07 00                  mov         ax,0x0007 
1062    E8 00 00                  call        @rtc_set_loc 
1065    8C D2                     mov         dx,ss 
1067    8D 46 E0                  lea         ax,-0x20[bp] 
106A    E8 00 00                  call        Date_ 
106D    E8 00 00                  call        Time_ 
1070    8C D2                     mov         dx,ss 
1072    8D 46 E0                  lea         ax,-0x20[bp] 
1075    E8 00 00                  call        Floppy_ 
1078    31 C0                     xor         ax,ax 
107A    E8 00 00                  call        set_battery_ 
107D    88 46 E0                  mov         byte ptr -0x20[bp],al 
1080    1E                        push        ds 
1081    68 FC 05                  push        offset DGROUP:L$275 
1084    E8 00 00                  call        _cprintf 
1087    83 C4 04                  add         sp,0x0004 
108A    8A 46 E6                  mov         al,byte ptr -0x1a[bp] 
108D    30 E4                     xor         ah,ah 
108F    E8 00 00                  call        setup_ppide_ 
1092    88 46 E6                  mov         byte ptr -0x1a[bp],al 
1095    8A 46 E7                  mov         al,byte ptr -0x19[bp] 
1098    30 E4                     xor         ah,ah 
109A    E8 00 00                  call        setup_usb_ 
109D    88 46 E7                  mov         byte ptr -0x19[bp],al 
10A0    8A 46 E4                  mov         al,byte ptr -0x1c[bp] 
10A3    30 E4                     xor         ah,ah 
10A5    E8 00 00                  call        setup_boot_sig_check_ 
10A8    88 46 E4                  mov         byte ptr -0x1c[bp],al 
10AB    8A 46 E5                  mov         al,byte ptr -0x1b[bp] 
10AE    30 E4                     xor         ah,ah 
10B0    E8 00 00                  call        setup_serial_ 
10B3    88 46 E5                  mov         byte ptr -0x1b[bp],al 
10B6    31 F6                     xor         si,si 
10B8    30 C0                     xor         al,al 
10BA                          L$188:
10BA    2A 42 E0                  sub         al,byte ptr -0x20[bp+si] 
10BD    46                        inc         si 
10BE    83 FE 1E                  cmp         si,0x001e 
10C1    7C F7                     jl          L$188 
10C3    04 5A                     add         al,0x5a 
10C5    88 46 FE                  mov         byte ptr -0x2[bp],al 
10C8    31 F6                     xor         si,si 
10CA                          L$189:
10CA    8A 52 E0                  mov         dl,byte ptr -0x20[bp+si] 
10CD    30 F6                     xor         dh,dh 
10CF    89 F0                     mov         ax,si 
10D1    80 CC 80                  or          ah,0x80 
10D4    E8 00 00                  call        @rtc_set_loc 
10D7    46                        inc         si 
10D8    83 FE 1F                  cmp         si,0x001f 
10DB    7C ED                     jl          L$189 
10DD    BA 80 00                  mov         dx,0x0080 
10E0    B8 07 00                  mov         ax,0x0007 
10E3    E8 00 00                  call        @rtc_set_loc 
10E6    C9                        leave       
10E7    5E                        pop         si 
10E8    C3                        ret         

Routine Size: 234 bytes,    Routine Base: _TEXT + 0FFF

10E9                          @nvram_get_video:
10E9    56                        push        si 
10EA    89 C6                     mov         si,ax 
10EC    E8 00 00                  call        @nvram_check 
10EF    85 C0                     test        ax,ax 
10F1    74 04                     je          L$190 
10F3    89 F0                     mov         ax,si 
10F5    EB 08                     jmp         L$191 
10F7                          L$190:
10F7    B8 05 80                  mov         ax,0x8005 
10FA    E8 00 00                  call        @rtc_get_loc 
10FD    30 E4                     xor         ah,ah 
10FF                          L$191:
10FF    3D 07 00                  cmp         ax,0x0007 
1102    7E 02                     jle         L$192 
1104    89 F0                     mov         ax,si 
1106                          L$192:
1106    5E                        pop         si 
1107    C3                        ret         

Routine Size: 31 bytes,    Routine Base: _TEXT + 10E9

No disassembly errors

Segment: CONST WORD USE16 00000611 bytes
0000                          L$193:
0000    53 75 6E 00                                     Sun.
0004                          L$194:
0004    4D 6F 6E 00                                     Mon.
0008                          L$195:
0008    54 75 65 00                                     Tue.
000C                          L$196:
000C    57 65 64 00                                     Wed.
0010                          L$197:
0010    54 68 75 00                                     Thu.
0014                          L$198:
0014    46 72 69 00                                     Fri.
0018                          L$199:
0018    53 61 74 00                                     Sat.
001C                          L$200:
001C    3F 3F 3F 00                                     ???.
0020                          L$201:
0020    4A 61 6E 00                                     Jan.
0024                          L$202:
0024    46 65 62 00                                     Feb.
0028                          L$203:
0028    4D 61 72 00                                     Mar.
002C                          L$204:
002C    41 70 72 00                                     Apr.
0030                          L$205:
0030    4D 61 79 00                                     May.
0034                          L$206:
0034    4A 75 6E 00                                     Jun.
0038                          L$207:
0038    4A 75 6C 00                                     Jul.
003C                          L$208:
003C    41 75 67 00                                     Aug.
0040                          L$209:
0040    53 65 70 00                                     Sep.
0044                          L$210:
0044    4F 63 74 00                                     Oct.
0048                          L$211:
0048    4E 6F 76 00                                     Nov.
004C                          L$212:
004C    44 65 63 00                                     Dec.
0050                          L$213:
0050    31 32 30 30 00                                  1200.
0055                          L$214:
0055    32 34 30 30 00                                  2400.
005A                          L$215:
005A    34 38 30 30 00                                  4800.
005F                          L$216:
005F    39 36 30 30 00                                  9600.
0064                          L$217:
0064    31 39 32 30 30 00                               19200.
006A                          L$218:
006A    33 38 34 30 30 00                               38400.
0070                          L$219:
0070    35 37 36 30 30 00                               57600.
0076                          L$220:
0076    31 31 35 32 30 30 00                            115200.
007D                          L$221:
007D    45 6E 00                                        En.
0080                          L$222:
0080    44 69 73 00                                     Dis.
0084                          L$223:
0084    54 72 69 63 6B 6C 65 20 63 68 61 72 67 65 20 62 Trickle charge b
0094    61 63 6B 75 70 20 69 73 20 25 73 61 62 6C 65 64 ackup is %sabled
00A4    2E 0A 00                                        ...
00A7                          L$224:
00A7    6E 00                                           n.
00A9                          L$225:
00A9    00                                              .
00AA                          L$226:
00AA    20 69 73 00                                      is.
00AE                          L$227:
00AE    73 20 61 72 65 00                               s are.
00B4                          L$228:
00B4    20 20 20 25 64 20 64 69 6F 64 65 25 73 20 75 73    %d diode%s us
00C4    65 64 2E 20 20 41 25 73 20 25 64 4B 20 72 65 73 ed.  A%s %dK res
00D4    69 73 74 6F 72 20 69 73 20 73 65 6C 65 63 74 65 istor is selecte
00E4    64 2E 0A 00                                     d...
00E8                          L$229:
00E8    4E 56 52 41 4D 20 62 61 63 6B 75 70 3A 20 20 30 NVRAM backup:  0
00F8    3D 64 69 73 61 62 6C 65 2C 20 31 3D 53 75 70 65 =disable, 1=Supe
0108    72 63 61 70 28 34 2E 33 76 29 2C 20 32 3D 4E 69 rcap(4.3v), 2=Ni
0118    63 61 64 2F 4C 69 49 6F 6E 28 33 2E 36 76 29 20 cad/LiIon(3.6v) 
0128    5B 25 64 5D 3A 20 00                            [%d]: .
012F                          L$230:
012F    44 61 74 65 20 72 65 61 64 3A 20 20 25 73 20 25 Date read:  %s %
013F    30 32 78 2F 25 30 32 78 2F 25 30 32 78 25 30 32 02x/%02x/%02x%02
014F    78 0A 00                                        x..
0152                          L$231:
0152    44 61 74 65 20 5B 6D 6D 2F 64 64 2F 79 79 79 79 Date [mm/dd/yyyy
0162    5D 3A 20 00                                     ]: .
0166                          L$232:
0166    42 69 6E 61 72 79 20 64 61 74 65 3A 20 20 25 64 Binary date:  %d
0176    2F 25 64 2F 25 64 0A 00                         /%d/%d..
017E                          L$233:
017E    49 6E 76 61 6C 69 64 20 64 61 74 65 20 65 6E 74 Invalid date ent
018E    65 72 65 64 2E 20 20 28 63 6F 64 65 20 25 64 29 ered.  (code %d)
019E    0A 00                                           ..
01A0                          L$234:
01A0    42 43 44 20 64 61 74 65 20 74 6F 20 62 65 20 73 BCD date to be s
01B0    65 74 20 74 6F 20 44 53 31 33 30 32 3A 20 20 25 et to DS1302:  %
01C0    30 32 78 2F 25 30 32 78 2F 25 30 32 78 25 30 32 02x/%02x/%02x%02
01D0    78 20 20 64 6F 77 28 25 78 29 0A 00             x  dow(%x)..
01DC                          L$235:
01DC    54 68 65 20 63 6C 6F 63 6B 20 69 73 20 73 74 6F The clock is sto
01EC    70 70 65 64 2E 0A 00                            pped...
01F3                          L$236:
01F3    54 69 6D 65 20 72 65 61 64 3A 20 20 25 30 32 78 Time read:  %02x
0203    3A 25 30 32 78 3A 25 30 32 78 0A 00             :%02x:%02x..
020F                          L$237:
020F    54 69 6D 65 20 5B 68 68 3A 6D 6D 5B 3A 73 73 5D Time [hh:mm[:ss]
021F    5D 3A 20 00                                     ]: .
0223                          L$238:
0223    52 65 61 64 20 69 6E 20 25 64 3A 25 30 32 64 3A Read in %d:%02d:
0233    25 30 32 64 0A 00                               %02d..
0239                          L$239:
0239    53 65 72 69 61 6C 20 63 6F 6E 73 6F 6C 65 20 70 Serial console p
0249    6F 72 74 20 73 70 65 65 64 20 28 62 69 74 73 2F ort speed (bits/
0259    73 65 63 29 20 5B 25 73 5D 3A 00                sec) [%s]:.
0264                          L$240:
0264    49 6E 76 61 6C 69 64 20 73 65 6C 65 63 74 69 6F Invalid selectio
0274    6E 2C 20 73 75 70 70 6F 72 74 65 64 20 76 61 6C n, supported val
0284    75 65 73 20 61 72 65 3A 00                      ues are:.
028D                          L$241:
028D    20 25 73 00                                      %s.
0291                          L$242:
0291    0A 00                                           ..
0293                          L$243:
0293    44 72 69 76 65 20 25 63 3A 20 64 69 73 6B 20 74 Drive %c: disk t
02A3    79 70 65 20 5B 25 64 5D 3A 20 00                ype [%d]: .
02AE                          L$244:
02AE    46 6C 6F 70 70 79 20 54 79 70 65 73 20 61 72 65 Floppy Types are
02BE    3A 0A 20 20 20 20 30 20 3D 20 6E 6F 74 20 70 72 :.    0 = not pr
02CE    65 73 65 6E 74 0A 20 20 20 20 31 20 3D 20 33 36 esent.    1 = 36
02DE    30 4B 20 35 2E 32 35 22 0A 20 20 20 20 32 20 3D 0K 5.25".    2 =
02EE    20 31 2E 32 4D 20 35 2E 32 35 22 0A 20 20 20 20  1.2M 5.25".    
02FE    33 20 3D 20 20 37 32 30 4B 20 33 2E 35 22 0A 20 3 =  720K 3.5". 
030E    20 20 20 34 20 3D 20 31 2E 34 34 4D 20 33 2E 35    4 = 1.44M 3.5
031E    22 0A 00                                        "..
0321                          L$245:
0321    2A 2A 2A 20 57 69 74 68 20 74 77 6F 20 66 6C 6F *** With two flo
0331    70 70 69 65 73 2C 20 61 6E 20 49 42 4D 20 63 61 ppies, an IBM ca
0341    62 6C 65 20 77 69 74 68 20 61 74 20 74 77 69 73 ble with at twis
0351    74 20 69 73 20 4D 41 4E 44 41 54 4F 52 59 2E 20 t is MANDATORY. 
0361    2A 2A 2A 0A 00                                  ***..
0366                          L$246:
0366    43 6F 6E 6E 65 63 74 20 61 20 73 69 6E 67 6C 65 Connect a single
0376    20 66 6C 6F 70 70 79 20 77 69 74 68 20 61 20 63  floppy with a c
0386    61 62 6C 65 20 77 69 74 68 20 6E 6F 20 74 77 69 able with no twi
0396    73 74 2E 0A 00                                  st...
039B                          L$247:
039B    4E 75 6D 62 65 72 20 28 30 2E 2E 32 29 20 6F 66 Number (0..2) of
03AB    20 44 75 6F 64 79 6E 65 20 44 69 73 6B 49 4F 20  Duodyne DiskIO 
03BB    50 50 49 44 45 20 66 69 78 65 64 20 64 69 73 6B PPIDE fixed disk
03CB    73 20 5B 25 64 5D 3A 20 00                      s [%d]: .
03D4                          L$248:
03D4    4E 75 6D 62 65 72 20 28 30 2E 2E 31 29 20 6F 66 Number (0..1) of
03E4    20 44 75 6F 64 79 6E 65 20 4D 75 6C 74 69 2D 69  Duodyne Multi-i
03F4    6F 20 55 53 42 20 64 69 73 6B 73 20 5B 25 64 5D o USB disks [%d]
0404    3A 20 00                                        : .
0407                          L$249:
0407    4D 61 6B 65 20 64 69 73 6B 20 5B 31 2E 2E 25 64 Make disk [1..%d
0417    5D 20 74 68 65 20 43 3A 20 64 72 69 76 65 20 5B ] the C: drive [
0427    25 64 5D 3A 20 00                               %d]: .
042D                          L$250:
042D    59 2F 6E 00                                     Y/n.
0431                          L$251:
0431    4E 2F 79 00                                     N/y.
0435                          L$252:
0435    43 68 65 63 6B 20 44 4F 53 20 62 6F 6F 74 20 73 Check DOS boot s
0445    69 67 6E 61 74 75 72 65 20 5B 25 73 5D 3A 20 00 ignature [%s]: .
0455                          L$253:
0455    25 73 00                                        %s.
0458                          L$254:
0458    50 50 49 44 45 00                               PPIDE.
045E                          L$255:
045E    55 53 42 00                                     USB.
0462                          L$256:
0462    55 4E 4B 4E 4F 57 4E 00                         UNKNOWN.
046A                          L$257:
046A    20 20 20 25 73 20 66 69 78 65 64 20 64 69 73 6B    %s fixed disk
047A    20 25 63 3A 20 20 20 20 28 30 78 25 78 29 0A 00  %c:    (0x%x)..
048A                          L$258:
048A    4D 6F 64 65 6C 3A 20 00                         Model: .
0492                          L$259:
0492    0A 53 65 72 69 61 6C 3A 20 00                   .Serial: .
049C                          L$260:
049C    0A 46 69 72 6D 77 61 72 65 3A 20 00             .Firmware: .
04A8                          L$261:
04A8    6F 75 74 00                                     out.
04AC                          L$262:
04AC    0A 47 65 6F 6D 65 74 72 79 3A 20 20 25 75 3A 25 .Geometry:  %u:%
04BC    75 3A 25 75 20 20 20 77 69 74 68 25 73 20 4C 42 u:%u   with%s LB
04CC    41 20 73 75 70 70 6F 72 74 0A 00                A support..
04D7                          L$263:
04D7    43 75 72 72 65 6E 74 3A 20 20 20 25 75 3A 25 75 Current:   %u:%u
04E7    3A 25 75 20 20 20 63 61 70 61 63 69 74 79 3A 20 :%u   capacity: 
04F7    20 25 6C 75 0A 00                                %lu..
04FD                          L$264:
04FD    4C 42 41 20 53 65 63 74 6F 72 73 3A 20 20 25 6C LBA Sectors:  %l
050D    75 00                                           u.
050F                          L$265:
050F    20 20 20 28 34 38 2D 62 69 74 29 3A 20 20 30 78    (48-bit):  0x
051F    25 6C 78 25 30 38 6C 78 0A 00                   %lx%08lx..
0529                          L$266:
0529    54 72 61 6E 73 6C 61 74 65 64 20 67 65 6F 6D 65 Translated geome
0539    74 72 79 3A 20 20 25 75 3A 25 75 3A 25 75 20 20 try:  %u:%u:%u  
0549    20 63 61 70 61 63 69 74 79 3A 20 20 25 6C 64 0A  capacity:  %ld.
0559    00                                              .
055A                          L$267:
055A    46 6C 6F 70 70 79 20 25 63 3A 20 74 79 70 65 20 Floppy %c: type 
056A    25 64 0A 00                                     %d..
056E                          L$268:
056E    0A 50 50 49 3D 25 64 20 20 55 53 42 3D 25 64 20 .PPI=%d  USB=%d 
057E    20 55 6E 69 74 73 3D 25 64 20 20 20 62 64 69 73  Units=%d   bdis
058E    6B 3D 25 30 32 78 0A 00                         k=%02x..
0596                          L$269:
0596    0A 46 69 78 65 64 5F 44 69 73 6B 5F 54 61 62 3A .Fixed_Disk_Tab:
05A6    20 00                                            .
05A8                          L$270:
05A8    20 25 30 32 78 00                                %02x.
05AE                          L$271:
05AE    0A 0A 00                                        ...
05B1                          L$272:
05B1    4E 56 52 41 4D 20 63 68 65 63 6B 73 75 6D 20 69 NVRAM checksum i
05C1    73 20 69 6E 76 61 6C 69 64 0A 00                s invalid..
05CC                          L$273:
05CC    4E 56 52 41 4D 20 63 68 65 63 6B 73 75 6D 20 69 NVRAM checksum i
05DC    73 20 76 61 6C 69 64 0A 00                      s valid..
05E5                          L$274:
05E5    54 68 65 20 63 6C 6F 63 6B 20 69 73 20 72 75 6E The clock is run
05F5    6E 69 6E 67 2E 0A 00                            ning...
05FC                          L$275:
05FC    20 20 20 46 69 78 65 64 20 44 69 73 6B 20 53 65    Fixed Disk Se
060C    74 75 70 0A 00                                  tup..

Segment: CONST2 WORD USE16 0000007E bytes
0000                          _dpm0:
0000    1F 1E 1F 1E 1F 1F 1E 1F 1E 1F 1F 1C             ............
000C                          _dow:
000C    00 00 00 00                                     DD	DGROUP:L$193
0010    04 00 00 00                                     DD	DGROUP:L$194
0014    08 00 00 00                                     DD	DGROUP:L$195
0018    0C 00 00 00                                     DD	DGROUP:L$196
001C    10 00 00 00                                     DD	DGROUP:L$197
0020    14 00 00 00                                     DD	DGROUP:L$198
0024    18 00 00 00                                     DD	DGROUP:L$199
0028    1C 00 00 00                                     DD	DGROUP:L$200
002C                          _month:
002C    20 00 00 00                                     DD	DGROUP:L$201
0030    24 00 00 00                                     DD	DGROUP:L$202
0034    28 00 00 00                                     DD	DGROUP:L$203
0038    2C 00 00 00                                     DD	DGROUP:L$204
003C    30 00 00 00                                     DD	DGROUP:L$205
0040    34 00 00 00                                     DD	DGROUP:L$206
0044    38 00 00 00                                     DD	DGROUP:L$207
0048    3C 00 00 00                                     DD	DGROUP:L$208
004C    40 00 00 00                                     DD	DGROUP:L$209
0050    44 00 00 00                                     DD	DGROUP:L$210
0054    48 00 00 00                                     DD	DGROUP:L$211
0058    4C 00 00 00                                     DD	DGROUP:L$212
005C                          _rates:
005C    50 00 00 00                                     DD	DGROUP:L$213
0060    55 00 00 00                                     DD	DGROUP:L$214
0064    5A 00 00 00                                     DD	DGROUP:L$215
0068    5F 00 00 00                                     DD	DGROUP:L$216
006C    64 00 00 00                                     DD	DGROUP:L$217
0070    6A 00 00 00                                     DD	DGROUP:L$218
0074    70 00 00 00                                     DD	DGROUP:L$219
0078    76 00 00 00                                     DD	DGROUP:L$220
007C                          _ftype_OK:
007C    1F 00                                           ..

Segment: _DATA WORD USE16 00000000 bytes

