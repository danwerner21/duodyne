     1                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                                  ; timers.asm
     3                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     4                                  ;
     5                                  ;   This version is for assembly by  NASM 0.98.39 or later
     6                                  ;
     7                                  ; Copyright (C) 2010 John R. Coffman.  All rights reserved.
     8                                  ; Provided for hobbyist use on the N8VEM SBC-188 board.
     9                                  ;
    10                                  ; This program is free software: you can redistribute it and/or modify
    11                                  ; it under the terms of the GNU General Public License as published by
    12                                  ; the Free Software Foundation, either version 3 of the License, or
    13                                  ; (at your option) any later version.
    14                                  ;
    15                                  ; This program is distributed in the hope that it will be useful,
    16                                  ; but WITHOUT ANY WARRANTY; without even the implied warranty of
    17                                  ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    18                                  ; GNU General Public License for more details.
    19                                  ;
    20                                  ; You should have received a copy of the GNU General Public License
    21                                  ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
    22                                  ;
    23                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    24                                  
    25                                  %include        "config.asm"
    26                              <1> ;/*
    27                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    28                              <1> ; ANSI.CFG
    29                              <1> ;   Copied to CONFIG.ASM for general release.
    30                              <1> ;
    31                              <1> ;       Modify the parameters below to reflect your system
    32                              <1> ;
    33                              <1> ;
    34                              <1> ;   This version is for assembly by  NASM 0.98.39 or later
    35                              <1> ;
    36                              <1> ;   Copyright (C) 2010,2011 John R. Coffman.  All rights reserved.
    37                              <1> ;   Provided for hobbyist use on the N8VEM SBC-188 board.
    38                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    39                              <1> ;
    40                              <1> ; Define the serial terminal that the Video BIOS must emulate
    41                              <1> ; Set one of the following to 1
    42                              <1> ; If you have no idea what to choose, set TTY to 1
    43                              <1> TTY     equ     0       ; hardcopy -- cannot position the cursor
    44                              <1> DUMB    equ     0       ; dumb CRT -- ^H, ^J, ^K, ^L can move the cursor
    45                              <1> ANSI    equ     1       ; very smart, like a VT-100
    46                              <1> WYSE    equ     0       ; very smart Wyse series (30, 50, ...)
    47                              <1> ; others may get added in the future
    48                              <1> ;  ONE OF THE ABOVE must BE SET TO 1!!!!!
    49                              <1> ;
    50                              <1> ; Define the UART startup bit rate - 1200-19200 are most common
    51                              <1> ;UART_RATE	equ	0		; 1200
    52                              <1> ;UART_RATE	equ	1		; 2400
    53                              <1> ;UART_RATE	equ	2		; 4800
    54                              <1> UART_RATE	equ	3		; 9600
    55                              <1> ;UART_RATE	equ	4		; 19200
    56                              <1> ;UART_RATE	equ	5		; 38400
    57                              <1> ;UART_RATE	equ	6		; 57600
    58                              <1> ;UART_RATE	equ	7		; 115200
    59                              <1> 
    60                              <1> ; Does the serial terminal use the DSR/DTR protocol for flow control?
    61                              <1> ;UART_DSR_PROTOCOL	equ		1	; Yes!
    62                              <1> UART_DSR_PROTOCOL       equ             WYSE    ; Wyse always uses it
    63                              <1> 						; but not ANSI
    64                              <1> ; Define the size of the ROM image on the system in Kilobytes
    65                              <1> ; It may be smaller than the actual EPROM in use.
    66                              <1> ; The following sizes are supported:  32, 64, 128, and 256
    67                              <1> %ifndef ROM
    68                              <1> ROM             equ     32              ; 64 is the default
    69                              <1> %endif
    70                              <1> 
    71                              <1> ; Define the number of Wait States at which the ROM operates
    72                              <1> ROM_WS          equ     1               ; 0..3  (1 is the default)
    73                              <1> 
    74                              <1> ; Define the size in Kilobytes of DOS RAM (low SRAM plus EMM allocate RAM)
    75                              <1> ; This is a desired size and will only be present if a 4MEM board is added
    76                              <1> RAM_DOS         equ     640
    77                              <1> 
    78                              <1> ; Define the size of the low SRAM on the system in Kilobytes
    79                              <1> ; the default is 512 kilobytes
    80                              <1> RAM             equ     512             ; (512 is the default)
    81                              <1> 
    82                              <1> ; Define the number of Wait States at which the RAM operates
    83                              <1> RAM_WS          equ     0               ; 0..3  (0 is the default)
    84                              <1> 
    85                              <1> ; Define the number of Wait States for Local Peripheral devices (600-7FF)
    86                              <1> LCL_IO_WS       equ     1               ; 0..3  (1 is the default)
    87                              <1> 
    88                              <1> ; Define the number of Wait States for ECB BUS peripheral devices (4xx)
    89                              <1> BUS_IO_WS       equ     3               ; 0..3  (3 is the default)
    90                              <1> 
    91                              <1> ; Define the time zone in which we build the Relocatable BIOS
    92                              <1> %ifndef TIMEZONE
    93                              <1> %define TIMEZONE "CST"
    94                              <1> %endif
    95                              <1> 
    96                              <1> ; Has the REDBUG debugger been loaded?
    97                              <1> %ifndef SOFT_DEBUG
    98                              <1> %define SOFT_DEBUG 0
    99                              <1> %endif
   100                              <1> 
   101                              <1> ; Should the BIOS include "Tiny BASIC" in the image?
   102                              <1> %ifndef TBASIC
   103                              <1> TBASIC          equ     1		; default is 1
   104                              <1> %endif
   105                              <1> 
   106                              <1> ; Should the BIOS include the Floating Point Emulator?  The 80188 does
   107                              <1> ; not allow a floating point co-processor, so this is probably a good idea.
   108                              <1> %ifndef FPEM
   109                              <1> FPEM            equ     1               ; default is 1
   110                              <1> %endif
   111                              <1> 
   112                              <1> ; Should the Floating Point Emulator use temporary storage in the EBDA
   113                              <1> ; or at locations 0280h..3FFh in low memory?
   114                              <1> %if SOFT_DEBUG
   115                              <1> FPEM_USE_EBDA   equ     FPEM            ; default is 0
   116                              <1> %else
   117                              <1> FPEM_USE_EBDA   equ     0; FPEM            ; default is 0
   118                              <1> %endif
   119                              <1> 
   120                              <1> ; Define the size of the EPROM that is to be installed on the system
   121                              <1> ; It may be larger than the actual ROM image to be generated.
   122                              <1> %ifndef CHIP
   123                              <1> CHIP            equ     64
   124                              <1> %endif
   125                              <1> 
   126                              <1> ; Define the UART oscillator speed
   127                              <1> UART_OSC        equ     1843200         ; 1.8432 Mhz is specified
   128                              <1> 
   129                              <1> 
   130                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   131                              <1> ; end of the User configuration
   132                              <1> ;       Do Not modify anything below this point
   133                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   134                              <1> 
   135                              <1> ; Define existence of any uart chip
   136                              <1> UART		equ	TTY+DUMB+ANSI+WYSE
   137                              <1> startuplength   equ     512                     ; may be up to 1024
   138                              <1> startseg        equ     0FFFFh - (ROM*64) + 1
   139                              <1> highrom         equ     (ROM*400h)&0FFFFh
   140                              <1> startupseg      equ     0FFFFh - (startuplength>>4) + 1
   141                              <1> bios_data_seg   equ     040h            ; segment of BIOS data area
   142                              <1> 
   143                              <1> 
   144                              <1> %define ARG(n) [bp+2+(n)*2]
   145                              <1> 
   146                              <1> %macro  check   1.nolist
   147                              <1>  %if (%1)
   148                              <1>    %error Check Failure: %1
   149                              <1>  %endif
   150                              <1> %endm
   151                              <1> %macro  range   3.nolist
   152                              <1>  %if (%1)<(%2)
   153                              <1>    %error Out of Range: %1
   154                              <1>  %elif (%1)>(%3)
   155                              <1>    %error Out of Range: %1
   156                              <1>  %endif
   157                              <1> %endm
   158                              <1> _terminal equ UART
   159                              <1>  check   RAM_DOS&15
   160                              <1>  check   RAM&(RAM-1)
   161                              <1>  check   ROM&(ROM-1)
   162                              <1>  range   RAM,32,512
   163                              <1>  range   ROM,32,256
   164                              <1>  range   RAM_WS,0,3
   165                              <1>  range   ROM_WS,0,3
   166                              <1>  range   RAM_DOS,RAM,(1024-ROM)
   167                              <1>  range   LCL_IO_WS,0,3
   168                              <1>  range   BUS_IO_WS,0,3
   169                              <1>  range   UART_OSC,500000,16000000
   170                              <1>  range   UART_RATE,0,7
   171                              <1>  range	 UART,0,1
   172                              <1>  range	 _terminal,1,2
   173                              <1> 
   174                              <1> %ifndef SOFT_DEBUG
   175                              <1> %define SOFT_DEBUG 0
   176                              <1> %endif
   177                              <1> 
   178                              <1> %ifndef TRACE
   179                              <1> %define TRACE 0
   180                              <1> %endif
   181                              <1> 
   182                              <1> %ifdef MAKE_OBJECT_FILE
   183                              <1>         segment _DATA WORD PUBLIC CLASS=DATA
   184                              <1>         export _ROMsize
   185                              <1>         export _CHIPsize
   186                              <1> _ROMsize        dw      ROM
   187                              <1> _CHIPsize       dw      CHIP
   188                              <1> %endif
   189                              <1> ; end of the Hardware configuration file
   190                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   191                              <1> ;*/
    26                                  %include        "cpuregs.asm"
    27                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    28                              <1> ; CPUREGS.ASM
    29                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    30                              <1> ;
    31                              <1> ;   This version is for assembly by  NASM 0.98.39 or later
    32                              <1> ;
    33                              <1> ; Copyright (C) 2010,2011 John R. Coffman.  All rights reserved.
    34                              <1> ; Provided for hobbyist use on the N8VEM SBC-188 board.
    35                              <1> ;
    36                              <1> ; This program is free software: you can redistribute it and/or modify
    37                              <1> ; it under the terms of the GNU General Public License as published by
    38                              <1> ; the Free Software Foundation, either version 3 of the License, or
    39                              <1> ; (at your option) any later version.
    40                              <1> ;
    41                              <1> ; This program is distributed in the hope that it will be useful,
    42                              <1> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
    43                              <1> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    44                              <1> ; GNU General Public License for more details.
    45                              <1> ;
    46                              <1> ; You should have received a copy of the GNU General Public License
    47                              <1> ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
    48                              <1> ;
    49                              <1> ; Updated for the Duodyne 80c188 SBC
    50                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    51                              <1> %include	"macros.inc"
    52                              <2> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    53                              <2> ; MACROS.INC  
    54                              <2> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    55                              <2> ;
    56                              <2> ;   This version is for assembly by  NASM 0.98.39 or later
    57                              <2> ;
    58                              <2> ; Copyright (C) 2010,2011 John R. Coffman.  All rights reserved.
    59                              <2> ; Provided for hobbyist use on the N8VEM SBC-188 board.
    60                              <2> ;
    61                              <2> ; This program is free software: you can redistribute it and/or modify
    62                              <2> ; it under the terms of the GNU General Public License as published by
    63                              <2> ; the Free Software Foundation, either version 3 of the License, or
    64                              <2> ; (at your option) any later version.
    65                              <2> ;
    66                              <2> ; This program is distributed in the hope that it will be useful,
    67                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
    68                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    69                              <2> ; GNU General Public License for more details.
    70                              <2> ;
    71                              <2> ; You should have received a copy of the GNU General Public License
    72                              <2> ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
    73                              <2> ;
    74                              <2> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    75                              <2> 
    76                              <2> ; general macros for the SBC188 BIOS ASSEMBLY
    77                              <2> ;
    78                              <2> ;
    79                              <2> %ifndef __MACROS_DEFINED_
    80                              <2> %define __MACROS_DEFINED_ 1
    81                              <2> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    82                              <2> ;
    83                              <2> ; some useful macros:
    84                              <2> ;
    85                              <2> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    86                              <2> ;
    87                              <2> 	cpu	186
    88                              <2> 
    89                              <2> %imacro setloc  1.nolist
    90                              <2>  times   (%1-($-$$)) db 0FFh
    91                              <2> %endm
    92                              <2> 
    93                              <2> %imacro db_lo   1
    94                              <2>  db (%1)&255
    95                              <2> %endm
    96                              <2> 
    97                              <2> %imacro cnop    0.nolist
    98                              <2> %if SOFT_DEBUG
    99                              <2>         nop
   100                              <2> %endif
   101                              <2> %endm
   102                              <2> 
   103                              <2> %imacro popm 1-*.nolist
   104                              <2> %rep %0
   105                              <2> %ifidni %1,ALL
   106                              <2>  popa
   107                              <2> %elifidni %1,F
   108                              <2>  popf
   109                              <2> %else
   110                              <2>  pop %1
   111                              <2> %ifidni %1,DS
   112                              <2>  cnop
   113                              <2> %elifidni %1,ES
   114                              <2>  cnop
   115                              <2> %endif
   116                              <2> %endif
   117                              <2> %rotate 1
   118                              <2> %endrep
   119                              <2> %endm
   120                              <2> 
   121                              <2> %imacro pushm 1-*.nolist
   122                              <2> %rep %0
   123                              <2> %rotate -1
   124                              <2> %ifidni %1,ALL
   125                              <2>  pusha
   126                              <2> %elifidni %1,F
   127                              <2>  pushf
   128                              <2> %else
   129                              <2>  push %1
   130                              <2> %endif
   131                              <2> %endrep
   132                              <2> %endm
   133                              <2> 
   134                              <2> ;
   135                              <2> ; added from the 386EX project
   136                              <2> ;
   137                              <2> 
   138                              <2> ; call arguments
   139                              <2> %define ARG(n) [bp+2+(n)*2]
   140                              <2> 
   141                              <2> ;
   142                              <2> ; format of the BYTE initialization table:  address, byte
   143                              <2> ;
   144                              <2> %imacro  binit 2
   145                              <2>         dw      %1
   146                              <2>         db      %2
   147                              <2> %endmacro
   148                              <2> ; end with DW -1
   149                              <2> 
   150                              <2> ;
   151                              <2> ; format of the WORD initialization table:  address, word
   152                              <2> ;
   153                              <2> %imacro  winit 2
   154                              <2>         dw      %1
   155                              <2>         dw      %2
   156                              <2> %endmacro
   157                              <2> ; end with DW -1
   158                              <2> 
   159                              <2> 
   160                              <2> ; get the BIOS Data Area segment pointer to a [segment] register
   161                              <2> %imacro get_bda	1.nolist
   162                              <2> 	push	0x0040
   163                              <2> 	pop	%1
   164                              <2> 	cnop
   165                              <2> %endm
   166                              <2> 
   167                              <2> 
   168                              <2> %endif
    52                              <1> 
    53                              <1> 	cpu     186
    54                              <1> ;
    55                              <1> ;
    56                              <1> ; IBM model byte -- must be less than a 286
    57                              <1> ;
    58                              <1> 
    59                              <1> MODEL_BYTE		equ	0FEh	; PC-XT
    60                              <1> SUBMODEL_BYTE		equ	00h	;  "
    61                              <1> 
    62                              <1> 
    63                              <1> ; 80188 peripheral control register block address
    64                              <1> CPU_CSCR	        equ	0FF00h
    65                              <1> 
    66                              <1> ; Compatible Mode registers
    67                              <1> 
    68                              <1> cpu_relocation          equ     CPU_CSCR+0FEh
    69                              <1> 
    70                              <1> ; The memory and peripheral chip select register offsets from 0FF00h
    71                              <1> 
    72                              <1> cpu_umcs                equ     CPU_CSCR+0A0h          ; Upper memory select
    73                              <1> cpu_lmcs                equ     CPU_CSCR+0A2h          ; Lower memory select
    74                              <1> cpu_pacs                equ     CPU_CSCR+0A4h          ; Peripheral select
    75                              <1> cpu_mmcs                equ     CPU_CSCR+0A6h          ; Middle memory base
    76                              <1> cpu_mpcs                equ     CPU_CSCR+0A8h          ; Mid mem. & peripherals
    77                              <1> 
    78                              <1> ; Enhanced Mode registers
    79                              <1> 
    80                              <1> cpu_mdram               equ     CPU_CSCR+0E0h          ; memory partition reg.
    81                              <1> cpu_cdram               equ     CPU_CSCR+0E2h          ; clock prescaler
    82                              <1> cpu_edram               equ     CPU_CSCR+0E4h          ; Enable refresh reg.
    83                              <1> cpu_pdcon               equ     CPU_CSCR+0F0h          ; Power-Save control
    84                              <1> 
    85                              <1> 
    86                              <1> ; On-board internal peripheral equates
    87                              <1> ; Programmable Interrupt Controller
    88                              <1> PIC	        equ	CPU_CSCR+020H
    89                              <1> PIC_EOI	        equ	PIC+2           ; End Of Interrupt
    90                              <1> PIC_POLLR	equ	PIC+4
    91                              <1> PIC_POLLSR	equ	PIC+6
    92                              <1> PIC_IMASK	equ	PIC+8
    93                              <1> PIC_PMREG	equ	PIC+0AH
    94                              <1> PIC_SRVR	equ	PIC+0CH
    95                              <1> PIC_IRQR	equ	PIC+0EH
    96                              <1> PIC_IRQSR	equ	PIC+10H
    97                              <1> PIC_TCR	        equ	PIC+12H
    98                              <1> PIC_DMA0CR	equ	PIC+14H
    99                              <1> PIC_DMA1CR	equ	PIC+16H
   100                              <1> PIC_I0CON	equ	PIC+18H
   101                              <1> PIC_I1CON	equ	PIC+1AH
   102                              <1> PIC_I2CON	equ	PIC+1CH
   103                              <1> PIC_I3CON	equ	PIC+1EH
   104                              <1> 
   105                              <1> EOI_NSPEC       equ     8000h           ; Non-Specific EOI
   106                              <1> 
   107                              <1> ; Interrupt masks (Master Mode)
   108                              <1> ;
   109                              <1> mask_timer_all          equ     0001h
   110                              <1> mask_dma0               equ     0004h
   111                              <1> mask_dma1               equ     0008h
   112                              <1> mask_int0               equ     0010h
   113                              <1> mask_int1               equ     0020h
   114                              <1> mask_int2               equ     0040h
   115                              <1> mask_int3               equ     0080h
   116                              <1> 
   117                              <1> 
   118                              <1> 
   119                              <1> ; Timers
   120                              <1> TIM0	        equ	CPU_CSCR+050H
   121                              <1> TIM1	        equ	CPU_CSCR+058H
   122                              <1> TIM2	        equ	CPU_CSCR+060H
   123                              <1> 
   124                              <1> TCNT	        equ	0	; count register
   125                              <1> CMPA	        equ	2	; max count A
   126                              <1> CMPB	        equ	4	; max count B (not present on TIM2)
   127                              <1> TCON	        equ	6	; mode/control word
   128                              <1> 
   129                              <1> ; Timer control bits:
   130                              <1> tc_EN           equ     8000h   ; Enable bit
   131                              <1> tc_nINH         equ     4000h   ; not Inhibit Enable
   132                              <1> tc_INT          equ     2000h   ; Interrupt Enable
   133                              <1> tc_RIU          equ     1000h   ; Register A/B (0/1) in Use
   134                              <1> tc_MC           equ     0020h   ; Maximum Count reached
   135                              <1> tc_RTG          equ     0010h   ; Retrigger (internal source)
   136                              <1> tc_P            equ     0008h   ; Prescale internal clock (timers 0 & 1 only)
   137                              <1> tc_EXT          equ     0004h   ; External clock
   138                              <1> tc_ALT          equ     0002h   ; Alternate between A & B max count registers
   139                              <1> tc_CONT         equ     0001h   ; Continuous: continue after max count
   140                              <1> 
   141                              <1> 
   142                              <1> 
   143                              <1> 
   144                              <1> ; DMA
   145                              <1> DMA0	        equ	CPU_CSCR+0C0H
   146                              <1> DMA1	        equ	CPU_CSCR+0D0H
   147                              <1> DMASPL	        equ	0	; source pointer low
   148                              <1> DMASPU	        equ	2	; source pointer high
   149                              <1> DMADPL	        equ	4	; destination pointer low
   150                              <1> DMADPU	        equ	6	; destination pointer high
   151                              <1> DMATC	        equ	8	; terminal count
   152                              <1> DMACW	        equ	0AH	; control word
   153                              <1> 
   154                              <1> 
   155                              <1> 
   156                              <1> 
   157                              <1> 
   158                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   159                              <1> ;
   160                              <1> ;       SBC-188 external devices
   161                              <1> ;
   162                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   163                              <1> 
   164                              <1> IO_BASE			equ	0400h
   165                              <1> 
   166                              <1> 
   167                              <1> 
   168                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   169                              <1> ; The UART registers (Duodyne SBC 80c188 Console port)
   170                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   171                              <1> 
   172                              <1> uart_base               equ     IO_BASE+0280h
   173                              <1> uart_rbr                equ     uart_base       ;Rcvr Buffer / read only
   174                              <1> uart_thr                equ     uart_base       ;Transmit Holding / write only
   175                              <1> uart_ier                equ     uart_base+1     ;Interrupt Enable
   176                              <1> uart_iir                equ     uart_base+2     ;Interrupt Ident / read only
   177                              <1> uart_fcr                equ     uart_base+2     ;FIFO Control / write only
   178                              <1> uart_lcr                equ     uart_base+3     ;Line Control
   179                              <1> uart_mcr                equ     uart_base+4     ;Modem Control
   180                              <1> uart_lsr                equ     uart_base+5     ;Line Status
   181                              <1> uart_msr                equ     uart_base+6     ;Modem Status
   182                              <1> uart_sr			equ	uart_base+7	;Scratch
   183                              <1> 
   184                              <1> uart_dll                equ     uart_base       ;Divisor Latch LS Byte
   185                              <1> uart_dlm                equ     uart_base+1     ;Divisor Latch MS Byte
   186                              <1> 
   187                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   188                              <1> ; CONTROL LS259 PORT  (DuoDyne 80C188)
   189                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   190                              <1> CTRL259		equ	IO_BASE+0238H
   191                              <1> ; LEDS are at addresses 0..3
   192                              <1> ; other control ports on 4..7
   193                              <1> LED0		equ	CTRL259+0
   194                              <1> LED1		equ	LED0+1
   195                              <1> LED2		equ	LED0+2
   196                              <1> LED3		equ	LED0+3
   197                              <1> T1OSC18		equ	CTRL259+4	; ON=1.8432mhz, OFF="1" (for use of TIMER2)
   198                              <1> ;unused		equ	CTRL259+5
   199                              <1> ;unused		equ	CTRL259+6
   200                              <1> ;unused		equ	CTRL259+7
   201                              <1> 
   202                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   203                              <1> ; Front Panel Connector  (DuoDyne 80C188)
   204                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   205                              <1> FRONT_PANEL_LED	equ	IO_BASE+0230H
   206                              <1> 
   207                              <1> 
   208                              <1> 
   209                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   210                              <1> ; Floppy controller (Duodyne Disk IO)
   211                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   212                              <1> FDC	        equ	IO_BASE+0080H
   213                              <1> FDC_MSR         equ     FDC
   214                              <1> FDC_DATA        equ     FDC+1
   215                              <1> FDC_TC	        equ	FDC+2
   216                              <1> FDC_RES	        equ	FDC+3
   217                              <1> FDC_LDCR	equ	FDC+5
   218                              <1> FDC_LDOR	equ	FDC+6
   219                              <1> FDC_DACK        equ	FDC+6
   220                              <1> FDC_DACK_TC     equ     FDC+7
   221                              <1> 
   222                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   223                              <1> ; CH376 controller (Duodyne Multi IO)
   224                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   225                              <1> CH376	        equ	IO_BASE+004EH
   226                              <1> 
   227                              <1> 
   228                              <1> 
   229                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   230                              <1> ;DS1302 RTC (Duodyne Ram/ROM Card)
   231                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   232                              <1> RTC	equ	IO_BASE+0094H
   233                              <1> 
   234                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   235                              <1> ; PIO 82C55 I/O  (Duodyne Disk IO)
   236                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   237                              <1> PPI	        equ	IO_BASE+0088H
   238                              <1> 
   239                              <1> PIO_A	        equ	PPI+0	; (OUTPUT)
   240                              <1> PIO_B	        equ	PPI+1	; (INPUT)
   241                              <1> PIO_C	        equ	PPI+2	; (CENTRONICS control low nibble)
   242                              <1> PIO_CTRL	equ	PPI+3	; CONTROL BYTE PIO 82C55
   243                              <1> 
   244                              <1> portA           equ     PPI+0   ;
   245                              <1> portB           equ     PPI+1   ;
   246                              <1> portC           equ     PPI+2   ;
   247                              <1> 
   248                              <1> ; end CPUREGS.ASM
    27                                  %include        "equates.asm"
    28                              <1> ;========================================================================
    29                              <1> ; EQUATES.ASM -- Lots of Defintions for Relocatable BIOS
    30                              <1> ;========================================================================
    31                              <1> ;   for the N8VEM SBC-188 v.00.4 and 00.5
    32                              <1> ;
    33                              <1> ;   This version is for assembly by  NASM 0.98.39 or later
    34                              <1> ;
    35                              <1> ; Copyright (C) 2010 John R. Coffman.  All rights reserved.
    36                              <1> ; Provided for hobbyist use on the N8VEM SBC-188 board.
    37                              <1> ;
    38                              <1> ; This program is free software: you can redistribute it and/or modify
    39                              <1> ; it under the terms of the GNU General Public License as published by
    40                              <1> ; the Free Software Foundation, either version 3 of the License, or
    41                              <1> ; (at your option) any later version.
    42                              <1> ;
    43                              <1> ; This program is distributed in the hope that it will be useful,
    44                              <1> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
    45                              <1> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    46                              <1> ; GNU General Public License for more details.
    47                              <1> ;
    48                              <1> ; You should have received a copy of the GNU General Public License
    49                              <1> ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
    50                              <1> ;
    51                              <1> ;========================================================================
    52                              <1> 
    53                              <1>         global  FPEM_segment
    54                              <1> 
    55                              <1> 
    56                              <1> %include "segdef.asm"
    57                              <2> ;========================================================================
    58                              <2> ; SEGDEF.ASM -- Lots of Defintions for Relocatable BIOS
    59                              <2> ;========================================================================
    60                              <2> ;   for the N8VEM SBC-188 v.00.4 and 00.5
    61                              <2> ;
    62                              <2> ;   This version is for assembly by  NASM 0.98.39 or later
    63                              <2> ;
    64                              <2> ; Copyright (C) 2010 John R. Coffman.  All rights reserved.
    65                              <2> ; Provided for hobbyist use on the N8VEM SBC-188 board.
    66                              <2> ;
    67                              <2> ; This program is free software: you can redistribute it and/or modify
    68                              <2> ; it under the terms of the GNU General Public License as published by
    69                              <2> ; the Free Software Foundation, either version 3 of the License, or
    70                              <2> ; (at your option) any later version.
    71                              <2> ;
    72                              <2> ; This program is distributed in the hope that it will be useful,
    73                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
    74                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    75                              <2> ; GNU General Public License for more details.
    76                              <2> ;
    77                              <2> ; You should have received a copy of the GNU General Public License
    78                              <2> ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
    79                              <2> ;
    80                              <2> ;========================================================================
    81                              <2> 
    82                              <2> %ifndef __SEGDEF_
    83                              <2> %define __SEGDEF_
    84                              <2> 
    85                              <2> 	SEGMENT  _TEXT ALIGN=2 PUBLIC CLASS=CODE
    86                              <2>         SEGMENT  CONST ALIGN=2 PUBLIC CLASS=DATA
    87                              <2>         SEGMENT  CONST2 ALIGN=2 PUBLIC CLASS=DATA
    88                              <2> 	SEGMENT  _DATA ALIGN=16 PUBLIC CLASS=DATA
    89                              <2> 	SEGMENT  _BSS  ALIGN=2 PUBLIC CLASS=BSS
    90                              <2> ;;;        SEGMENT  _BASIC ALIGN=16 PUBLIC CLASS=BASIC
    91                              <2> 
    92                              <2> 	GROUP	DGROUP CONST CONST2 _DATA _BSS
    93                              <2> 
    94                              <2> %endif
    95                              <2> 
    57                              <1> %include "ascii.asm"
    58                              <2> ; ascii.asm
    59                              <2> ;
    60                              <2> CTRL            equ     1Fh     ; masks a character to CTRL-x
    61                              <2> 
    62                              <2> NUL     equ     00h
    63                              <2> BEL     equ     (CTRL & 'G')
    64                              <2> BS      equ     08h		; ^H
    65                              <2> HT      equ     09h		; ^I
    66                              <2> LF	equ	0Ah		; ^J
    67                              <2> NL      equ     LF
    68                              <2> VT	equ	0Bh		; ^K
    69                              <2> FWD	equ	0Ch		; ^L
    70                              <2> CR	equ	0Dh
    71                              <2> XON     equ     (CTRL & 'Q')
    72                              <2> XOFF    equ     (CTRL & 'S')
    73                              <2> DC1     equ     XON
    74                              <2> DC3     equ     XOFF
    75                              <2> ESC     equ	1Bh
    76                              <2> 
    77                              <2> 
    58                              <1> 
    59                              <1> 
    60                              <1> ; POST error codes. Presently one byte but can expand to word.
    61                              <1> ER_BIOS equ	01h		; Bad ROM bios checksum, patch last byte
    62                              <1> ER_RAM	equ	02h		; Bad RAM in main memory, replace
    63                              <1> ER_CRT	equ	04h		; Bad RAM in video card, replace
    64                              <1> ER_FDC	equ	08h		; Bad FDC
    65                              <1> ER_UNK1	equ	10h		; {unassigned}
    66                              <1> ER_MEM	equ	20h		; Bad RAM in vector area, replace
    67                              <1> ER_ROM	equ	40h		; Bad ROM in expansion area, bad checksum
    68                              <1> ER_UNK2	equ	80h		; {unassigned}
    69                              <1> 
    70                              <1> 
    71                              <1> 
    72                              <1> ;; ************************ BIOS Data Segment ******************************
    73                              <1> ;; BIOS data segment - not all will  be used
    74                              <1> ;                struc   BIOS_DATA_AREA  ; at 0040:0000
    75                              <1> %include "bda.inc"
    76                              <2> ;/*======================================================================
    77                              <2> ; bda.inc -- BIOS data area definitions
    78                              <2> ;========================================================================
    79                              <2> ;   for the N8VEM SBC-188
    80                              <2> ;
    81                              <2> ;   This version is for assembly by  NASM 0.98.39 or later
    82                              <2> ;
    83                              <2> ; Copyright (C) 2013 John R. Coffman.  All rights reserved.
    84                              <2> ; Provided for hobbyist use on the N8VEM SBC-188 board.
    85                              <2> ;
    86                              <2> ; This program is free software: you can redistribute it and/or modify
    87                              <2> ; it under the terms of the GNU General Public License as published by
    88                              <2> ; the Free Software Foundation, either version 3 of the License, or
    89                              <2> ; (at your option) any later version.
    90                              <2> ;
    91                              <2> ; This program is distributed in the hope that it will be useful,
    92                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
    93                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    94                              <2> ; GNU General Public License for more details.
    95                              <2> ;
    96                              <2> ; You should have received a copy of the GNU General Public License
    97                              <2> ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
    98                              <2> ;
    99                              <2> ;========================================================================
   100                              <2> 
   101                              <2> 			;*/ extern				/*
   102                              <2> 	ABSOLUTE  0	;*/ struct BDA {			/*
   103 00000000 ????????????????    <2> serial_ports    resw    4	;*/	word	serial_ports[4];	/*
   104 00000008 ????????????????    <2> parallel_ports  resw    4	;*/	word	parallel_ports[4];	/*
   105 00000010 ????                <2> equipment_flag  resw    1	;*/	EQFL	equipment_flag;		/*
   106                              <2> ;	dw	?		; 40:10 	; Equipment present word
   107                              <2> ;  						;  = (1 iff floppies) *     1.
   108                              <2> ;                                               ;  + (1 iff 187     ) *     2.
   109                              <2> ;  						;  + (#+1 64K sys ram) *    4.
   110                              <2> ;  						;  + (init crt mode ) *    16.
   111                              <2> ;  						;  + (# of floppies ) *    64.
   112                              <2> ;  						;  + (# serial ports) *   512.
   113                              <2> ;  						;  + (1 iff toy port) *  4096.
   114                              <2> ;                                               ;  + (1 iff modem   ) *  8192.
   115                              <2> ;  						;  + (# parallel LPT) * 16384.
   116 00000012 ??                  <2> mfg_test_flags  resb    1	;*/	byte	mfg_test_flags;	/* 40:12 unused by us
   117 00000013 ????                <2> memory_size     resw    1	;*/	word	memory_size;	/* 40:13 kilobytes
   118                              <2> uart_kbd_ctrl_R	equ	$	;*/				/*** JRC: count of ctrl-R's for reboot
   119 00000015 ??                  <2> IPL_errors      resb    1	;*/	byte	IPL_errors;	/* 40:15 IPL errors<-table/scratchpad
   120 00000016 ??                  <2> sbc188_rev       resb    1	;*/	byte	sbc188_rev;	/* was 'unused_01' before BIOS047
   121                              <2> ;;---------------[Keyboard data area]------------;
   122 00000017 ????                <2> keyboard_flags_0 resw   1	;*/	word	keyboard_flags_0;  /* 40:17 Shift/Alt/etc. keyboard flags
   123                              <2> keyboard_flags_1 equ	$-1	;     2nd byte	keyboard_flags_1;
   124 00000019 ??                  <2> keypad_char	resb	1	;*/	byte	keypad_char;	/* 40:19 Alt-KEYPAD char. goes here
   125 0000001A ????                <2> kbd_buffer_head resw    1	;*/	word	kbd_buffer_head;   /* 40:1A --> keyboard buffer head
   126 0000001C ????                <2> kbd_buffer_tail resw    1	;*/	word	kbd_buffer_tail;   /* 40:1C --> keyboard buffer tail
   127 0000001E <res 20h>           <2> kbd_buffer      resw    16	;*/	word	kbd_buffer[16];	/* 40:1E Keyboard Buffer (Scan,Value)
   128                              <2> kbd_buffer_last	equ	$	;*/				/*
   129                              <2> ;;---------------[Diskette data area]------------;
   130 0000003E ??                  <2> fdc_drv_calib   resb    1	;*/	byte	fdc_drive_calib;   /* 40:3E
   131 0000003F ??                  <2> fdc_motor_LDOR  resb    1	;*/	byte	fdc_motor_LDOR;	   /* 40:3F Motor, DMA, select control
   132 00000040 ??                  <2> fdc_motor_ticks resb    1	;*/	byte	fdc_motor_ticks;   /* 40:40 ticks til motor off
   133 00000041 ??                  <2> fdc_status      resb    1	;*/	byte	fdc_status;	   /* 40:41
   134                              <2> ;				Floppy return code stat byte
   135                              <2> ;				;  1 = bad ic 765 command req.
   136                              <2> ;				;  2 = address mark not found
   137                              <2> ;				;  3 = write to protected disk
   138                              <2> ;				;  4 = sector not found
   139                              <2> ;				;  8 = data late (DMA overrun)
   140                              <2> ;				;  9 = DMA failed 64K page end
   141                              <2> ;				; 16 = bad CRC on floppy read
   142                              <2> ;				; 32 = bad NEC 765 controller
   143                              <2> ;				; 64 = seek operation failed
   144                              <2> ;				;128 = disk drive timed out
   145 00000042 ??????????????      <2> fdc_ctrl_status resb    7	;*/	byte	fdc_ctrl_status[7];  /* 40:42 Status bytes from NEC 765
   146                              <2> ;;---------------[Video display area]------------;
   147 00000049 ??                  <2> video_mode      resb    1	;*/	byte	video_mode;	/* 40:49
   148                              <2> ;			 	; Current CRT mode  (software)
   149                              <2> ;				;  0 = 40 x 25 text (no color)
   150                              <2> ;				;  1 = 40 x 25 text (16 color)
   151                              <2> ;				;  2 = 80 x 25 text (no color)
   152                              <2> ;				;  3 = 80 x 25 text (16 color)
   153                              <2> ;				;  4 = 320 x 200 grafix 4 color
   154                              <2> ;				;  5 = 320 x 200 grafix 0 color
   155                              <2> ;				;  6 = 640 x 200 grafix 0 color
   156                              <2> ;				;  7 = 80 x 25 text (mono card)
   157 0000004A ????                <2> video_columns   resw    1	;*/	word video_columns;	/* 40:4A Columns on CRT screen
   158 0000004C ????                <2> video_regen_bytes  resw 1	;*/	word video_regen_bytes;	/* 40:4C Bytes in the regen region
   159 0000004E ????                <2> video_regen_offset resw 1	;*/	word video_regen_offset;/* 40:4E Byte offset in regen region
   160 00000050 <res 10h>           <2> video_cursor_pos  resw  8	;*/	word video_cursor_pos[8];  /* 40:50 Cursor pos for up to 8 pages
   161 00000060 ????                <2> video_cursor_mode resw  1	;*/	word video_cursor_mode;	/* 40:60 Current cursor mode setting
   162 00000062 ??                  <2> video_page      resb    1	;*/	byte video_page;	/* 40:62 Current page on display
   163 00000063 ????                <2> video_base_seg  resw    1	;*/	word video_base_seg;	/* 40:63 Base address (B000h or B800h)
   164 00000065 ??                  <2> video_hw_mode   resb    1	;*/	byte video_hw_mode;	/* 40:65 ic 6845 mode reg. (hardware)
   165 00000066 ??                  <2> video_cga_palette resb  1	;*/	byte video_cga_palette;	/* 40:66 Current CGA palette
   166                              <2> ;;---------------[Used to setup ROM]-------------;
   167 00000067 ????????            <2> eprom_address   resd    1	;*/	dword eprom_address;	/* 40:67 Eprom base Offset,Segment
   168 0000006B ??                  <2> spurious_irq    resb    1	;*/	byte spurious_irq;	/* 40:6B Last spurious interrupt IRQ
   169                              <2> ;;---------------[Timer data area]---------------;
   170 0000006C ????????            <2> timer_ticks     resd    1	;*/	dword timer_ticks;	/* 40:6C Ticks since midnight (lo,hi)
   171 00000070 ??                  <2> timer_new_day   resb    1	;*/	byte timer_new_day;	/* 40:70 Non-zero if new day
   172                              <2> ;;---------------[System data area]--------------;
   173 00000071 ??                  <2> break_flag      resb    1	;*/	byte break_flag;	/* 40:71 Sign bit set iff break
   174 00000072 ????                <2> warm_boot       resw    1	;*/	word warm_boot;		/* 40:72 Warm boot iff==1234h
   175                              <2> ;;---------------[Hard disk scratchpad]----------;
   176 00000074 ????????            <2> hdd_scratch     resd    1	;*/	word hdd_scratch[2];	/* 40:74
   177                              <2> ;;---------------[Timout areas/PRT/LPT]----------;
   178 00000078 ????????            <2> lpt_timeout     resb    4	;*/	byte lpt_timeout[4];	/* 40:78 Ticks for LPT 1-4 timeouts
   179 0000007C ????????            <2> com_timeout     resb    4	;*/	byte com_timeout[4];	/* 40:7C Ticks for COM 1-4 timeouts
   180                              <2> ;;---obsolete----[Keyboard buf start/end]---jrc--;
   181 00000080 ????                <2> kbd_buffer_start resw   1	;*/	word kbd_buffer_start;	/* 40:80 KBD buffer head (PC/AT)
   182 00000082 ????                <2> kbd_buffer_end  resw    1	;*/	word kbd_buffer_end;	/* 40:82 KBD buffer tail (PC/AT)
   183                              <2> ;;---------------[EGA stuff]---------------------;
   184 00000084 ??????????????      <2> EGA_stuff	resb	7	;*/	byte EGA_stuff[7];	/* 40:84 Unspecified EGA data
   185                              <2> ;;---------------[Floppy/Fixed Media Info]-------------;
   186 0000008B ??                  <2> fdc_last_rate	resb	1	;*/	byte fdc_last_rate;	/* 40:8B Last floppy step rate/data rate?
   187 0000008C ????????            <2> fx_misc_unused	resb	4	;*/	byte fx_misc_unused[4];	/* 40:8C Fixed disk miscellaneous ???
   188 00000090 ????                <2> fdc_disk_state	resb	2	;*/	byte fdc_disk_state[2];	/* 40:90 Floppy disk state
   189 00000092 ????                <2> fdc_op_start	resb	2	;*/	byte fdc_op_start[2];	/* 40:92 Floppy operation start state machine
   190 00000094 ????                <2> fdc_cylinder	resb	2	;*/	byte fdc_cylinder[2];	/* 40:94 Floppy present cylinder
   191                              <2> ;;---------------[Additional KBD flags]----------------;
   192 00000096 ??                  <2> kbd_flag_3	resb	1	;*/	byte kbd_flag_3;	/* 40:96 kbd ???
   193 00000097 ??                  <2> kbd_flag_2	resb	1	;*/	byte kbd_flag_2;	/* 40:97 kbd ???
   194                              <2> ;;---------------[RTC/timer1 data]---------------------;
   195 00000098 ????????            <2> user_semaphore	resw	2	;*/	byte *user_semaphore;	/* 40:98 User semaphore in (bit 7)
   196 0000009C ????????            <2> rtc_count	resd	1	;*/	dword rtc_count;	/* 40:9C RTC tick counter
   197 000000A0 ??                  <2> rtc_wait_active	resb	1	;*/	byte rtc_wait_active;	/* 40:A0 Busy=01, Posted=80h,
   198                              <2> ;;---------------[Cassette I/O stuff]------------------;
   199 000000A1 ??                  <2> last_val	resb	1	;*/	byte last_val;		/* 40:A1 Last byte read value
   200 000000A2 ????                <2> crc_reg		resw	1	;*/	word crc_reg;		/* 40:A2 CRC accumulation area
   201                              <2> ;									Post Acknowleged=00;
   202 000000A4 ??                  <2> EGA_data	resb	1	;*/	byte EGA_data;		/* 40:A4 Various usage
   203 000000A5 ????                <2> SDstatus	resb	2	;*/	byte SDstatus[2];	/* 40:A5 Status byte from command
   204 000000A7 ????                <2> SDcardtype	resb	2	;*/	byte SDcardtype[2];	/* 40:A7 SDcard type SDSC=2, HC=3, ...
   205                              <2> ;
   206 000000A9 ????????            <2> fixed_disk_tab	resb	4	;*/	byte fixed_disk_tab[4];	/* dispatch table to fixed disk drivers
   207 000000AD ??                  <2> wait12_count	resb	1	;*/	byte wait12_count;	/* 40:AD 12usec CX count
   208 000000AE ??                  <2> lock_count	resb	1	;*/	byte lock_count;	/* 40:AE lock level counter
   209 000000AF ??                  <2> EMS_start       resb    1	;*/	byte EMS_start;		/* start EMS allocation from here
   210                              <2> fx80		equ	$	;*/	struct EDD_disk fx80;	/* fixed disk parameter area 0
   211 000000B0 ????                <2> fx_log_cylinders resw   1	;	word fx_log_cylinders;	 logical number of cylinders
   212 000000B2 ??                  <2> fx_log_heads    resb    1	;	byte fx_log_heads;	 logical number of heads
   213 000000B3 ??                  <2> fx_signature	resb	1	;	byte fx_signature;	 A0h signature = translated geom
   214 000000B4 ??                  <2> fx_phys_sectors	resb    1       ;	byte fx_phys_sectors;	 physical number of sectors per track
   215 000000B5 ????                <2> fx_LBA_high     resw    1       ;	word fx_LBA_high;	 high word of LBA28 number of sectors
   216 000000B7 ??                  <2> fx_reserved	resb	1	;	byte fx_reserved;	 reserved for future use
   217 000000B8 ??                  <2> fx_drive_control resb   1       ;	byte fx_drive_control;	 flag bits for IDE head register
   218 000000B9 ????                <2> fx_phys_cylinders resw	1	;	word fx_phys_cylinders;	 physical number of cylinders
   219 000000BB ??                  <2> fx_phys_heads	resb	1	;	byte fx_phys_heads;	 physical number of heads
   220 000000BC ????                <2> fx_LBA_low	resw	1	;	word fx_LBA_low;	 low word of LBA28 number of sectors
   221 000000BE ??                  <2> fx_log_sectors	resb	1	;	byte fx_log_sectors;	 logical number of sectors per track
   222 000000BF ??                  <2> fx_checksum	resb	1	;	byte fx_checksum;	 checksum, dunno how to compute
   223 000000C0 <res 10h>           <2> fx81            resb    16	;*/	struct EDD_disk fx81;	/* fixed disk parameter area 1
   224 000000D0 <res 10h>           <2> fx82            resb    16	;*/	struct EDD_disk fx82;	/* fixed disk parameter area 2
   225 000000E0 <res 10h>           <2> fx83            resb    16	;*/	struct EDD_disk fx83;	/* fixed disk parameter area 3
   226                              <2> ;
   227                              <2> ;
   228                              <2> 
   229 000000F0 ????                <2> FPEM_segment    resw    1       ;*/	word FPEM_segment;	/* FPEM data segment
   230                              <2> 
   231 000000F2 ????                <2> EBDA_paragraph  resw    1       ;*/	word EBDA_paragraph;	/* lowest EBDA paragraph
   232                              <2> 
   233 000000F4 ????                <2> dma0_cw         resw    1       ;*/	word dma0_cw;		/* end of dma control word
   234 000000F6 ????                <2> dma1_cw         resw    1       ;*/	word dma1_cw;		/*   ditto
   235                              <2> 
   236 000000F8 ????                <2> fdc_type	resb	2	;*/	byte fdc_type[2];	/* disk type in low nibble, alternate in hi nib
   237                              <2> 
   238 000000FA ????????            <2> debug_static_ptr  resw	2	;*/	void *debug_static_ptr;	/* pointer to debug static area
   239                              <2> 
   240 000000FE ??                  <2> n_fixed_disks   resb    1       ;*/	byte n_fixed_disks;	/* number of fixed disks
   241                              <2> 
   242 000000FF ??                  <2> cpu_xtal        resb    1       ;*/	byte cpu_xtal;		/* CPU crystal frequency in Mhz
   243                              <2> ;								   CPU clock is half of this
   244                              <2> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   245                              <2> ;
   246                              <2> ;  System configuration stuff below
   247                              <2> ;	c.f., CONFIG.ASM (ANSI.CFG, CVDU.CFG, etc.), User configuration stuff
   248                              <2> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   249                              <2> %if 0				;*/
   250                              <2> #define FIXED_DISK_MAX 4		/*
   251                              <2> %else
   252                              <2> %define FIXED_DISK_MAX 4
   253                              <2> %endif
   254                              <2> %if 0				;*/
   255                              <2> #define PPIDE_driver 1		/*
   256                              <2> %else
   257                              <2> %define PPIDE_driver 1
   258                              <2> %endif
   259                              <2> %if 0				;*/
   260                              <2> #define USB_driver 1		/*
   261                              <2> %else
   262                              <2> %define USB_driver 1
   263                              <2> %endif
   264                              <2> 				;*/
    76                              <1> 
    77                              <1> ;  this must be the same in EQUATES.H */
    78                              <1> %if SOFT_DEBUG
    79                              <1> %define NBREAK  8
    80                              <1> %endif
    81                              <1> 
    82                              <1> 
    83                              <1> %if 0
    84                              <1>         segment _TEXT
    85                              <1> ;; *************************************************************************
    86                              <1> 
    87                              <1> 
    88                              <1> 
    89                              <1> 
    90                              <1> ;; ************************ DOS Data Segment *******************************
    91                              <1> ;dosdir	SEGMENT at 50h				; Boot disk directory from IPL
    92                              <1> ;xerox	label	byte				;  0 if Print Screen idle
    93                              <1> ;						;  1 if PrtSc xeroxing screen
    94                              <1> ;						;255 if PrtSc error in xerox
    95                              <1> ;						;  ...non-grafix PrtSc in bios
    96                              <1> ;	db	200h dup(?)			; PC-DOS bootstrap procedure
    97                              <1> ;						;  ...IBMBIO.COM buffers the
    98                              <1> ;						;  ...directory of the boot
    99                              <1> ;						;  ...device here at IPL time
   100                              <1> ;						;  ...when locating the guts
   101                              <1> ;						;  ...of the operating system
   102                              <1> ;						;  ...filename "IBMDOS.COM"
   103                              <1> ;dosdir	ends
   104                              <1> ;; *************************************************************************
   105                              <1> ;; ************************ DOS IPL Segment ********************************
   106                              <1> ;dosseg	SEGMENT at 70h				; "Kernel" of PC-DOS op sys
   107                              <1> ;;IBMBIO.COM file loaded by boot block. Device Drivers/Bootstrap. CONTIGUOUS<---
   108                              <1> ;;IBMDOS.COM operating system nucleus immediately follows IBMBIO.COM and       !
   109                              <1> ;;     doesn`t have to be contiguous.  The IBMDOS operating system nucleus     !
   110                              <1> ;;     binary image is loaded by transient code in IBMBIO binary image	      !
   111                              <1> ;dosseg	ends					;			      !
   112                              <1> ;iplseg	SEGMENT at 0h				; Segment for boot block      !
   113                              <1> ;;The following boot block is loaded with 512 bytes on the first sector of     !
   114                              <1> ;;the bootable device by code resident in the ROM-resident bios.  Control is   !
   115                              <1> ;;then transferred to the first word 0000:7C00 of the disk-resident bootstrap  !
   116                              <1> ;	ORG	07C00h				;  ..offset for boot block    !
   117                              <1> ;boot	db	200h dup(?)			;  ..start disk resident boot--
   118                              <1> ;iplseg	ends
   119                              <1> 
   120                              <1> %endif
    28                                  
    29                                          extern  cpu_table_init
    30                                  
    31                                          global  BIOS_call_1Ch
    32                                          global  timer0_interrupt, timer1_interrupt, timer2_interrupt
    33                                          extern  fdc_timer_hook
    34                                          global  BIOS_call_1Ah   ; BIOS call
    35                                          global  @timer_init
    36                                          global  _cpu_speed
    37                                          extern  rtc_get_loc, rtc_set_loc
    38                                  
    39                                  timer0          equ     TIM0
    40                                  timer1          equ     TIM1
    41                                  
    42                                  %if 1
    43                                  ;/* definitions below are from "ds1302.h" */
    44                                  
    45                                  ;/* definitions of the CMOS RAM locations */
    46                                  %define RAM_trickle		0
    47                                  %define RAM_century		1
    48                                  %define RAM_floppy      2
    49                                  %define RAM_floppy0     2
    50                                  %define RAM_floppy1     3
    51                                  %define RAM_bits        4
    52                                  %define RAM_bits_DST    01h     ; DST flag
    53                                  
    54                                  %define RAM_checksum		30
    55                                  %define RAM_length		31
    56                                  
    57                                  ;#define rtc_WP(on) rtc_set_loc(7|CLOCK,(on?0x80:0))
    58                                  %endif
    59                                  
    60                                  
    61                                  
    62                                  
    63                                  
    64                                          SEGMENT _TEXT
    65                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    66                                  ; _cpu_speed
    67                                  ;
    68                                  ;       Determine the CPU clock rate using the UART oscillator
    69                                  ;       as the time standard.
    70                                  ;
    71                                  ;       Return the CPU speed in AX
    72                                  ;
    73                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    74                                  _cpu_speed:
    75 00000000 E8(0000)                        call    cpu_table_init
    76 00000003 [1500]                           dw       speed_setup           ; start the two timers
    77                                  
    78 00000005 BA5EFF                          mov     dx,timer1+TCON
    79                                  .1:
    80 00000008 ED                              in      ax,dx                   ; read status of timer1
    81 00000009 A820                            test    al,tc_MC                ; max count reached ?
    82 0000000B 74FB                            jz      .1
    83                                  
    84 0000000D BA60FF                          mov     dx,TIM2+TCNT          ; read the count
    85 00000010 90                              nop
    86 00000011 90                              nop
    87 00000012 90                              nop
    88 00000013 ED                              in      ax,dx
    89 00000014 C3                              ret
    90                                  
    91                                  speed_setup:
    92                                          db_lo   timer1+TCON
    94 00000015 5E                  <1>  db (%1)&255
    93 00000016 0040                            dw      tc_nINH                 ; disable
    94                                  
    95                                          db_lo   TIM2+TCON
    94 00000018 66                  <1>  db (%1)&255
    96 00000019 0040                            dw      tc_nINH                 ; disable
    97                                  
    98                                          db_lo   TIM2+CMPA             ; max. count
    94 0000001B 62                  <1>  db (%1)&255
    99 0000001C FFFF                            dw      0FFFFh
   100                                  
   101                                          db_lo   timer1+CMPA             ; max. count
    94 0000001E 5A                  <1>  db (%1)&255
   102 0000001F 0048                            dw      UART_OSC / 100          ; 10 ms interval
   103                                  
   104                                          db_lo   TIM2+TCNT             ; timer count = 0
    94 00000021 60                  <1>  db (%1)&255
   105 00000022 0000                            dw      0
   106                                  
   107                                          db_lo   timer1+TCNT             ; timer_count = 0
    94 00000024 58                  <1>  db (%1)&255
   108 00000025 0000                            dw      0
   109                                  
   110                                          db_lo   timer1+TCON             ; start timer 1
    94 00000027 5E                  <1>  db (%1)&255
   111 00000028 04C0                            dw      tc_EN+tc_nINH+tc_EXT    ; no Interrupts
   112                                  
   113                                          db_lo   TIM2+TCON             ; start timer 2
    94 0000002A 66                  <1>  db (%1)&255
   114 0000002B 00C0                            dw      tc_EN+tc_nINH
   115                                  
   116 0000002D 00                              db      0               ; end of the table
   117                                  
   118                                  
   119                                  
   120                                  
   121                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   122                                  ; @timer_init
   123                                  ;
   124                                  ;       Start the 18.2 Hz clock ticks by initializing
   125                                  ;       timers 0 & 2
   126                                  ;                               [1 & 2 on prototype boards]
   127                                  ;   Call with Xtal frequency in AX
   128                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   129                                  
   130                                  @timer_init:
   131 0000002E 56                              push    si
   132 0000002F 57                              push    di
   133                                  
   134 00000030 50                              push    ax              ; protect AX
   135                                  
   136 00000031 E8(0000)                        call    cpu_table_init
   137 00000034 [5900]                           dw      timer_table
   138                                  
   139 00000036 58                              pop     ax
   140 00000037 BFA335                          mov     di,13731
   141                                  
   142 0000003A A801                            test    al,1            ; test for odd frequency
   143 0000003C 7504                            jnz     .1
   144                                  ; even frequency
   145 0000003E D1E8                            shr     ax,1            ; halve the Xtal frequency
   146 00000040 EB02                            jmp     .2
   147                                  .1:     ; odd
   148 00000042 D1EF                            shr     di,1            ; halve the divisor
   149                                  .2:
   150 00000044 BA62FF                          mov     dx,TIM2+CMPA    ; set the timer 2 max count A
   151 00000047 EF                              out     dx,ax
   152 00000048 BA52FF                          mov     dx,timer0+CMPA  ; set the timer 0 max count A
   153 0000004B 89F8                            mov     ax,di
   154 0000004D EF                              out     dx,ax
   155                                  
   156 0000004E BA32FF                          mov     dx,PIC_TCR      ; timer control register
   157 00000051 ED                              in      ax,dx
   158 00000052 83E0F7                          and     ax,~08h         ; clear the mask bit
   159 00000055 EF                              out     dx,ax
   160                                  
   161 00000056 5F                              pop     di
   162 00000057 5E                              pop     si
   163 00000058 C3                              ret
   164                                  
   165                                  timer_table:
   166                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   167                                  ;
   168                                  ;  Set up Timer 2 to provide the 250 kHz clock to Timer 0
   169                                  ;
   170                                  ;  By dividing CPU_CLK/4, the internal input to the timer, by the
   171                                  ;  CPU clock rate, the 1/4 Mhz internal clock to the other
   172                                  ;  timers is achieved.
   173                                  
   174                                          db_lo   TIM2+TCNT       ; zero the count register
    94 00000059 60                  <1>  db (%1)&255
   175 0000005A 0000                            dw      0
   176                                  
   177                                          db_lo   TIM2+TCON       ; wired: ALT=0, EXT=0, P=0, RTG=0
    94 0000005C 66                  <1>  db (%1)&255
   178 0000005D 01C0                            dw      tc_EN+tc_nINH+tc_CONT   ; EN=1, /INH=1, INT=0, CONT=1
   179                                  
   180                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   181                                  ;
   182                                  ;  Set up Timer 0 to provide the 54.925 ms (18.2 Hz) PC timer tick
   183                                  ;
   184                                  
   185                                          db_lo   timer0+TCNT       ; Timer 0 count register
    94 0000005F 50                  <1>  db (%1)&255
   186 00000060 0000                            dw      0
   187                                  
   188                                          db_lo   timer0+CMPB       ; count B register
    94 00000062 54                  <1>  db (%1)&255
   189 00000063 0000                            dw      0
   190                                  
   191                                  ;;        db_lo   timer0+CMPA       ; count A register
   192                                  ;;        dw      13731             ; divisor:  250000/13731 -> 18.206..
   193                                  
   194                                          db_lo   timer0+TCON       ; control register
    94 00000065 56                  <1>  db (%1)&255
   195 00000066 09E0                            dw      tc_EN+tc_nINH+tc_INT+tc_P+tc_CONT
   196                                                                  ; EN=1, /INH=1, INT=1,
   197                                                                  ; RTG=0, P=1, EXT=0, ALT=0, CONT=1
   198                                  
   199                                  
   200                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   201                                  ;
   202                                  ;  Set up Timer 1 as disabled at 1024Hz
   203                                  ;
   204                                  
   205                                          db_lo   timer1+CMPA     ; max count A
    94 00000068 5A                  <1>  db (%1)&255
   206 00000069 0807                            dw      UART_OSC/1024   ; 1024Hz RTC counter for waits
   207                                  
   208                                          db_lo   timer1+TCNT     ; count
    94 0000006B 58                  <1>  db (%1)&255
   209 0000006C 0000                            dw      0
   210                                  
   211                                          db_lo   timer1+TCON       ; control register
    94 0000006E 5E                  <1>  db (%1)&255
   212 0000006F 0D60                            dw      tc_nINH+tc_P+tc_CONT+tc_EXT+tc_INT
   213                                                                  ; EN=0, /INH=1, INT=1,
   214                                                                  ; RTG=0, P=1, EXT=1, ALT=0, CONT=1
   215                                  
   216 00000071 00                              db      0               ; end of the table
   217                                  
   218                                  
   219                                  timer2_interrupt:       ; int 19 = 13h
   220 00000072 CF                              iret
   221                                  
   222                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   223                                  ;  timer0_interrupt
   224                                  ;
   225                                  ;       This is the 18.2 Hz timer tick
   226                                  ;
   227                                  ;
   228                                  ;ONE_DAY         equ     1573040         ; timer ticks in a day (IBM PC)
   229                                  ONE_DAY         equ     1573080         ; timer ticks in a day (compromise)
   230                                  ;ONE_DAY        equ     1573082         ; timer ticks in a day (our clock)
   231                                  ;                                       ; ours is a little slow
   232                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   233 00000073 D8001800                one_day:        dd      ONE_DAY
   234                                  
   235                                  timer1_interrupt:       ; int 18 = 12h 	Redirected from BIOS_call_12h
   236 00000077 CD70                    	int	70h	; IRQ8 -- 1024Hz RTC timer (rtc_interrupt)
   237 00000079 CF                      	iret
   238                                  
   239                                  
   240                                  
   241                                  timer0_interrupt:	; true timer 0 18.2Hz interrupt
   242                                  ; service the timer tick interrupt
   243 0000007A 1E5250                          pushm   ax,dx,ds
   244                                  
   245 0000007D 6A40                            push    bios_data_seg
   246 0000007F 1F                              popm    ds              ; address the BIOS data area
   247                                  
   248                                  ;%if (ONE_DAY < 0FFFFFFh) && ( ONE_DAY & 255 )
   249                                  %if 1
   250                                  
   251 00000080 E8(0000)                        call    fdc_timer_hook
   252                                  
   253                                  ; the strategy below is that the most frequently travelled path
   254                                  ; is the fewest branches and the fewest number of instructions
   255 00000083 FE066C00                        inc     byte [timer_ticks]
   256 00000087 7414                            jz      .2
   257 00000089 803E6C00D8                      cmp     byte [timer_ticks], ONE_DAY & 0FFh
   258 0000008E 7413                            je      .3
   259                                  .9:
   260 00000090 CD1C                    	int	1Ch			; User timer tick interrupt
   261                                  
   262                                  
   263                                  ; signal EOI (End of Interrupt)
   264 00000092 BA22FF                          mov     dx,PIC_EOI              ; EOI register
   265 00000095 B80080                          mov     ax,EOI_NSPEC            ; non-specific
   266 00000098 EF                              out     dx,ax                   ; signal it
   267                                  
   268 00000099 585A1F                          popm    ax,dx,ds
   269 0000009C CF                      	iret
   270                                  
   271                                  ; the less frequent execution paths are below
   272                                  .2:     ;  low byte == 0
   273 0000009D FF066D00                        inc     word [timer_ticks+1]
   274 000000A1 EBED                            jmp     .9
   275                                  
   276                                  .3:     ; AX = low word ONE_DAY
   277 000000A3 813E6D000018                    cmp     word [timer_ticks+1], ONE_DAY >> 8
   278 000000A9 75E5                            jne     .9
   279                                  
   280                                  ; a day has passed
   281 000000AB C7066C000000                    mov     word [timer_ticks],0
   282 000000B1 C7066E000000                    mov     word [timer_ticks+2],0  ; zero the high word
   283 000000B7 C606700001                      mov     byte [timer_new_day],1   ; set flag
   284 000000BC EBD2                            jmp     .9
   285                                  
   286                                  
   287                                  
   288                                  %else
   289                                          %error "Timer interrupt service."
   290                                  %endif
   291                                  
   292                                  
   293                                  
   294                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   295                                  ;  BIOS_call_1Ah        software interrupt
   296                                  ;
   297                                  ;       Functions in AH:
   298                                  ;               00      get tick count
   299                                  ;               01      set tick count
   300                                  ;               02      get time (from CMOS clock)
   301                                  ;               03      set time (to CMOS clock)
   302                                  ;               04      get date (from CMOS clock)
   303                                  ;               05      set data (to CMOS clock)
   304                                  ;               06      set alarm (we don't implement this one)
   305                                  ;               07      reset alarm
   306                                  ; we don't implement the following:
   307                                  ;               0Ah     get day count [PS/2]
   308                                  ;               0Bh     set day count [PS/2]
   309                                  ;               80h     set sound source [PC only]
   310                                  ;
   311                                  ;
   312                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   313                                  offset_BP       equ     0
   314                                  offset_BX       equ     offset_BP+2
   315                                  offset_AX       equ     offset_BX+2
   316                                  offset_DS       equ     offset_AX+2
   317                                  offset_IP       equ     offset_DS+2
   318                                  offset_CS       equ     offset_IP+2
   319                                  offset_FLAGS    equ     offset_CS+2
   320                                  
   321                                  BIOS_call_1Ah:                  ; int 1Ah  call
   322 000000BE 1E                              pushm   ds
   323 000000BF 50                              push    ax
   324 000000C0 53                              push    bx
   325                                  
   326 000000C1 55                              push    bp              ; set to address stack
   327 000000C2 89E5                            mov     bp,sp
   328                                  
   329 000000C4 6A40                            push    bios_data_seg
   330 000000C6 1F                              popm    ds              ; establish addressability
   331                                  
   332 000000C7 88E3                            mov     bl,ah           ; set to index into dispatch table
   333 000000C9 80FC08                          cmp     ah,max/2
   334 000000CC 7319                            jae     undefined
   335 000000CE 30FF                            xor     bh,bh
   336 000000D0 D1E3                            shl     bx,1            ; index words
   337                                  
   338 000000D2 2EFFA7[D700]                cs  jmp     near [dispatch+bx]
   339                                  
   340                                  
   341                                  
   342                                  
   343                                  dispatch:
   344 000000D7 [3701]                          dw      fn0
   345 000000D9 [4A01]                          dw      fn1
   346 000000DB [5401]                          dw      fn2
   347 000000DD [8E01]                          dw      fn3
   348 000000DF [D101]                          dw      fn4
   349 000000E1 [FE01]                          dw      fn5
   350 000000E3 [E700]                          dw      fn6
   351 000000E5 [E700]                          dw      fn7
   352                                  max     equ     $-dispatch
   353                                  
   354                                  fn6:
   355                                  fn7:
   356                                  undefined:
   357 000000E7 C64605FF                        mov     byte [bp+offset_AX+1],0FFh      ; error code?
   358                                  set_carry:
   359 000000EB 804E0C01                        or      byte [bp+offset_FLAGS],1        ; set the carry
   360 000000EF EB04                            jmp     popall
   361                                  good_exit:
   362 000000F1 80660CFE                        and     byte [bp+offset_FLAGS],~1       ; clear the carry
   363 000000F5 5D                      popall: pop     bp
   364 000000F6 5B                              pop     bx              ; register restores
   365 000000F7 58                              pop     ax
   366 000000F8 1F                              popm    ds
   367                                  BIOS_call_1Ch:
   368 000000F9 CF                              iret
   369                                  
   370                                  ; update CMOS
   371                                  ;       AL = ram address (0..29)
   372                                  ;       DL = new contents of address
   373                                  ;
   374                                  ; the RAM location is updated with the new contents
   375                                  ; and the checksum (location 30) is maintained at zero
   376                                  ;
   377                                  updateCMOS:
   378 000000FA 5253                            pushm   bx,dx
   379                                  
   380 000000FC B480                            mov     ah,80h
   381 000000FE 50                              push    ax
   382 000000FF E8(0000)                        call    rtc_get_loc
   383 00000102 93                              xchg    ax,bx
   384 00000103 28D3                            sub     bl,dl           ; difference between contents
   385 00000105 58                              pop     ax
   386 00000106 7412                            jz      .5              ; jump if no change
   387 00000108 E8(0000)                        call    rtc_set_loc     ; set DL, the changed value
   388 0000010B B81E80                          mov     ax,8000h+30     ; get checksum location
   389 0000010E 50                              push    ax              ; save address
   390 0000010F E8(0000)                        call    rtc_get_loc
   391 00000112 00D8                            add     al,bl           ; update checksum
   392 00000114 88C2                            mov     dl,al
   393 00000116 58                              pop     ax
   394 00000117 E8(0000)                        call    rtc_set_loc
   395                                  .5:
   396 0000011A 5B5A                            popm    bx,dx
   397 0000011C C3                              ret
   398                                  
   399                                  ; Write Enable the CMOS chip
   400                                  ;
   401                                  write_enable:
   402 0000011D 5250                            pushm   ax,dx
   403 0000011F B80700                          mov     ax,7            ;
   404 00000122 B200                            mov     dl,0
   405 00000124 E8(0000)                        call    rtc_set_loc
   406 00000127 585A                            popm    ax,dx
   407 00000129 C3                              ret
   408                                  
   409                                  ; Write Protect the CMOS chip
   410                                  ;
   411                                  write_protect:
   412 0000012A 5250                            pushm   ax,dx
   413 0000012C B80700                          mov     ax,7            ;
   414 0000012F B280                            mov     dl,80h
   415 00000131 E8(0000)                        call    rtc_set_loc
   416 00000134 585A                            popm    ax,dx
   417 00000136 C3                              ret
   418                                  
   419                                  
   420                                  ;
   421                                  ; Get Tick Count
   422                                  ;       AL = rolled-over flag
   423                                  ;       CX:DX = tick counter
   424                                  ;
   425                                  fn0:
   426 00000137 31C0                            xor     ax,ax
   427 00000139 86067000                        xchg    al,[timer_new_day]
   428 0000013D 894604                          mov     [bp+offset_AX],ax
   429 00000140 8B166C00                        mov     dx,[timer_ticks]
   430 00000144 8B0E6E00                        mov     cx,[timer_ticks+2]
   431 00000148 EBA7                            jmp     good_exit
   432                                  
   433                                  ;
   434                                  ; Set Tick Count
   435                                  ;   returns:
   436                                  ;       CX:DX = tick counter
   437                                  ;
   438                                  fn1:
   439 0000014A 89166C00                        mov     [timer_ticks],dx
   440 0000014E 890E6E00                        mov     [timer_ticks+2],cx
   441 00000152 EB9D                            jmp     good_exit
   442                                  
   443                                  
   444                                  
   445                                  ;
   446                                  ; Get Time from CMOS clock
   447                                  ;   returns:
   448                                  ;       CH = hours in BCD
   449                                  ;       CL = minutes in BCD
   450                                  ;       DH = seconds in BCD
   451                                  ;       DL = DST code (00=standard time, 01=daylight time)
   452                                  ;
   453                                  ;       Carry Clear if clock is running
   454                                  ;
   455                                  ;       Carry Set if clock is stopped
   456                                  ;
   457                                  fn2:
   458 00000154 B80480                          mov     ax,8004h        ; RAM_bits
   459 00000157 E8(0000)                        call    rtc_get_loc
   460 0000015A 88C2                            mov     dl,al
   461 0000015C 80E201                          and     dl,1            ; RAM_bits_DST flag
   462                                  
   463                                  .2:
   464 0000015F B80000                          mov     ax,0
   465 00000162 E8(0000)                        call    rtc_get_loc
   466 00000165 88C6                            mov     dh,al           ; seconds
   467                                  
   468 00000167 B80200                          mov     ax,2            ; hours (AH=0)
   469 0000016A E8(0000)                        call    rtc_get_loc
   470 0000016D 88C5                            mov     ch,al
   471                                  
   472 0000016F B80100                          mov     ax,1
   473 00000172 E8(0000)                        call    rtc_get_loc
   474 00000175 88C1                            mov     cl,al           ; minutes
   475                                  
   476 00000177 B80000                          mov     ax,0            ; seconds again
   477 0000017A E8(0000)                        call    rtc_get_loc
   478 0000017D 38C6                            cmp     dh,al
   479 0000017F 75DE                            jne     .2
   480                                  
   481 00000181 80E67F                          and     dh,7Fh          ; clear the ClockHalt flag
   482                                  
   483 00000184 A880                            test    al,80h          ; test the ClockHalt flag
   484 00000186 7503E966FF                      jz      good_exit
   485 0000018B E95DFF                          jmp     set_carry
   486                                  
   487                                  
   488                                  
   489                                  
   490                                  ;
   491                                  ; Set Time into the CMOS clock
   492                                  ;   enter with:
   493                                  ;       CH = hours in BCD
   494                                  ;       CL = minutes in BCD
   495                                  ;       DH = seconds in BCD
   496                                  ;       DL = DST flag (0=std time, 1=daylight time)
   497                                  ;
   498                                  fn3:
   499 0000018E 5251                            pushm   cx,dx
   500 00000190 E88AFF                          call    write_enable
   501                                  
   502 00000193 88D3                            mov     bl,dl           ; BL = DST flag
   503 00000195 B280                            mov     dl,80h          ; Clock Halt flag
   504 00000197 B80000                          mov     ax,0
   505 0000019A E8(0000)                        call    rtc_set_loc     ; stop the clock
   506 0000019D B80100                          mov     ax,1
   507 000001A0 88CA                            mov     dl,cl           ; minutes to DL
   508 000001A2 E8(0000)                        call    rtc_set_loc
   509 000001A5 B80200                          mov     ax,2
   510 000001A8 88EA                            mov     dl,ch           ; hours to DL
   511 000001AA E8(0000)                        call    rtc_set_loc
   512 000001AD B80000                          mov     ax,0
   513 000001B0 88F2                            mov     dl,dh           ; start the clock
   514 000001B2 E8(0000)                        call    rtc_set_loc
   515                                  
   516                                  
   517 000001B5 B80480                          mov     ax,8000h | RAM_bits        ; RAM_bits location (4)
   518 000001B8 E8(0000)                        call    rtc_get_loc
   519 000001BB 24FE                            and     al,0FFh^RAM_bits_DST         ; RAM_bits_DST zeroed
   520 000001BD 88DA                            mov     dl,bl           ; DST code to DL
   521 000001BF 80E201                          and     dl,RAM_bits_DST ; mask to 1 bit
   522 000001C2 08C2                            or      dl,al           ; preserve the other bits
   523                                  
   524 000001C4 B004                            mov     al,RAM_bits     ; DST flag is updated
   525                                                                  ;   and the other flags are preserved
   526 000001C6 E831FF                          call    updateCMOS      ; update loc. 4 & checksum
   527                                  
   528 000001C9 E85EFF                          call    write_protect
   529 000001CC 595A                            popm    cx,dx
   530                                  good_exit2:
   531 000001CE E920FF                          jmp     good_exit
   532                                  
   533                                  
   534                                  
   535                                  ;
   536                                  ; Get Date
   537                                  ;   return with:
   538                                  ;       CH = century in BCD (19h or 20h)
   539                                  ;       CL = year in BCD
   540                                  ;       DH = month in BCD
   541                                  ;       DL = day in BCD
   542                                  ;
   543                                  ;       Carry clear if clock is running, set if clock is stopped
   544                                  ;
   545                                  fn4:
   546 000001D1 B80180                          mov     ax,8001h        ; century byte
   547 000001D4 E8(0000)                        call    rtc_get_loc
   548 000001D7 88C5                            mov     ch,al
   549                                  
   550 000001D9 B80600                          mov     ax,6            ; year
   551 000001DC E8(0000)                        call    rtc_get_loc
   552 000001DF 88C1                            mov     cl,al
   553                                  
   554 000001E1 B80400                          mov     ax,4            ; month
   555 000001E4 E8(0000)                        call    rtc_get_loc
   556 000001E7 88C6                            mov     dh,al
   557                                  
   558 000001E9 B80300                          mov     ax,3            ; day (date)
   559 000001EC E8(0000)                        call    rtc_get_loc
   560 000001EF 88C2                            mov     dl,al
   561                                  
   562 000001F1 B80000                          mov     ax,0
   563 000001F4 E8(0000)                        call    rtc_get_loc
   564 000001F7 A880                            test    al,80h
   565 000001F9 74D3                            jz      good_exit2
   566 000001FB E9EDFE                          jmp     set_carry
   567                                  
   568                                  
   569                                  
   570                                  
   571                                  ;
   572                                  ; Set Date in the CMOS clock chip
   573                                  ;   enter with:
   574                                  ;       CH = century in BCD
   575                                  ;       CL = year in BCD
   576                                  ;       DH = month in BCD
   577                                  ;       DL = day in BCD
   578                                  ;
   579                                  fn5:
   580 000001FE 5251                            pushm   cx,dx
   581 00000200 E81AFF                          call    write_enable
   582                                  
   583 00000203 B80300                          mov     ax,3            ; day
   584 00000206 E8(0000)                        call    rtc_set_loc
   585                                  
   586 00000209 88F2                            mov     dl,dh
   587 0000020B B80400                          mov     ax,4            ; month
   588 0000020E E8(0000)                        call    rtc_set_loc
   589                                  
   590 00000211 88CA                            mov     dl,cl
   591 00000213 B80600                          mov     ax,6            ; year
   592 00000216 E8(0000)                        call    rtc_set_loc
   593                                  
   594 00000219 88EA                            mov     dl,ch           ; century
   595 0000021B B001                            mov     al,1
   596 0000021D E8DAFE                          call    updateCMOS      ; fix checksum, too
   597                                  
   598 00000220 E807FF                          call    write_protect
   599 00000223 595A                            popm    cx,dx
   600 00000225 E9C9FE                          jmp     good_exit
