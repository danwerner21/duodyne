     1                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                                  ; IDELIB.ASM -- common IDE routines
     3                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     4                                  ;
     5                                  ;   This version is for assembly by  NASM 0.98.39 or later
     6                                  ;
     7                                  ; Copyright (c) 2013 John R. Coffman.  All rights reserved.
     8                                  ; Provided for hobbyist use on the N8VEM SBC-188 board.
     9                                  ;
    10                                  ; This program is free software: you can redistribute it and/or modify
    11                                  ; it under the terms of the GNU General Public License as published by
    12                                  ; the Free Software Foundation, either version 3 of the License, or
    13                                  ; (at your option) any later version.
    14                                  ;
    15                                  ; This program is distributed in the hope that it will be useful,
    16                                  ; but WITHOUT ANY WARRANTY; without even the implied warranty of
    17                                  ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    18                                  ; GNU General Public License for more details.
    19                                  ;
    20                                  ; You should have received a copy of the GNU General Public License
    21                                  ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
    22                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    23                                  %include	"config.asm"
    24                              <1> ;/*
    25                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    26                              <1> ; ANSI.CFG
    27                              <1> ;   Copied to CONFIG.ASM for general release.
    28                              <1> ;
    29                              <1> ;       Modify the parameters below to reflect your system
    30                              <1> ;
    31                              <1> ;
    32                              <1> ;   This version is for assembly by  NASM 0.98.39 or later
    33                              <1> ;
    34                              <1> ;   Copyright (C) 2010,2011 John R. Coffman.  All rights reserved.
    35                              <1> ;   Provided for hobbyist use on the N8VEM SBC-188 board.
    36                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    37                              <1> ;
    38                              <1> ; Define the serial terminal that the Video BIOS must emulate
    39                              <1> ; Set one of the following to 1
    40                              <1> ; If you have no idea what to choose, set TTY to 1
    41                              <1> TTY     equ     0       ; hardcopy -- cannot position the cursor
    42                              <1> DUMB    equ     0       ; dumb CRT -- ^H, ^J, ^K, ^L can move the cursor
    43                              <1> ANSI    equ     1       ; very smart, like a VT-100
    44                              <1> WYSE    equ     0       ; very smart Wyse series (30, 50, ...)
    45                              <1> ; others may get added in the future
    46                              <1> ;  ONE OF THE ABOVE must BE SET TO 1!!!!!
    47                              <1> ;
    48                              <1> ; Define the UART startup bit rate - 1200-19200 are most common
    49                              <1> ;UART_RATE	equ	0		; 1200
    50                              <1> ;UART_RATE	equ	1		; 2400
    51                              <1> ;UART_RATE	equ	2		; 4800
    52                              <1> UART_RATE	equ	3		; 9600
    53                              <1> ;UART_RATE	equ	4		; 19200
    54                              <1> ;UART_RATE	equ	5		; 38400
    55                              <1> ;UART_RATE	equ	6		; 57600
    56                              <1> ;UART_RATE	equ	7		; 115200
    57                              <1> 
    58                              <1> ; Does the serial terminal use the DSR/DTR protocol for flow control?
    59                              <1> ;UART_DSR_PROTOCOL	equ		1	; Yes!
    60                              <1> UART_DSR_PROTOCOL       equ             WYSE    ; Wyse always uses it
    61                              <1> 						; but not ANSI
    62                              <1> ; Define the size of the ROM image on the system in Kilobytes
    63                              <1> ; It may be smaller than the actual EPROM in use.
    64                              <1> ; The following sizes are supported:  32, 64, 128, and 256
    65                              <1> %ifndef ROM
    66                              <1> ROM             equ     32              ; 64 is the default
    67                              <1> %endif
    68                              <1> 
    69                              <1> ; Define the number of Wait States at which the ROM operates
    70                              <1> ROM_WS          equ     1               ; 0..3  (1 is the default)
    71                              <1> 
    72                              <1> ; Define the size in Kilobytes of DOS RAM (low SRAM plus EMM allocate RAM)
    73                              <1> ; This is a desired size and will only be present if a 4MEM board is added
    74                              <1> RAM_DOS         equ     640
    75                              <1> 
    76                              <1> ; Define the size of the low SRAM on the system in Kilobytes
    77                              <1> ; the default is 512 kilobytes
    78                              <1> RAM             equ     512             ; (512 is the default)
    79                              <1> 
    80                              <1> ; Define the number of Wait States at which the RAM operates
    81                              <1> RAM_WS          equ     0               ; 0..3  (0 is the default)
    82                              <1> 
    83                              <1> ; Define the number of Wait States for Local Peripheral devices (600-7FF)
    84                              <1> LCL_IO_WS       equ     1               ; 0..3  (1 is the default)
    85                              <1> 
    86                              <1> ; Define the number of Wait States for ECB BUS peripheral devices (4xx)
    87                              <1> BUS_IO_WS       equ     3               ; 0..3  (3 is the default)
    88                              <1> 
    89                              <1> ; Define the time zone in which we build the Relocatable BIOS
    90                              <1> %ifndef TIMEZONE
    91                              <1> %define TIMEZONE "CST"
    92                              <1> %endif
    93                              <1> 
    94                              <1> ; Has the REDBUG debugger been loaded?
    95                              <1> %ifndef SOFT_DEBUG
    96                              <1> %define SOFT_DEBUG 0
    97                              <1> %endif
    98                              <1> 
    99                              <1> ; Should the BIOS include "Tiny BASIC" in the image?
   100                              <1> %ifndef TBASIC
   101                              <1> TBASIC          equ     1		; default is 1
   102                              <1> %endif
   103                              <1> 
   104                              <1> ; Should the BIOS include the Floating Point Emulator?  The 80188 does
   105                              <1> ; not allow a floating point co-processor, so this is probably a good idea.
   106                              <1> %ifndef FPEM
   107                              <1> FPEM            equ     1               ; default is 1
   108                              <1> %endif
   109                              <1> 
   110                              <1> ; Should the Floating Point Emulator use temporary storage in the EBDA
   111                              <1> ; or at locations 0280h..3FFh in low memory?
   112                              <1> %if SOFT_DEBUG
   113                              <1> FPEM_USE_EBDA   equ     FPEM            ; default is 0
   114                              <1> %else
   115                              <1> FPEM_USE_EBDA   equ     0; FPEM            ; default is 0
   116                              <1> %endif
   117                              <1> 
   118                              <1> ; Define the size of the EPROM that is to be installed on the system
   119                              <1> ; It may be larger than the actual ROM image to be generated.
   120                              <1> %ifndef CHIP
   121                              <1> CHIP            equ     64
   122                              <1> %endif
   123                              <1> 
   124                              <1> ; Define the UART oscillator speed
   125                              <1> UART_OSC        equ     1843200         ; 1.8432 Mhz is specified
   126                              <1> 
   127                              <1> 
   128                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   129                              <1> ; end of the User configuration
   130                              <1> ;       Do Not modify anything below this point
   131                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   132                              <1> 
   133                              <1> ; Define existence of any uart chip
   134                              <1> UART		equ	TTY+DUMB+ANSI+WYSE
   135                              <1> startuplength   equ     512                     ; may be up to 1024
   136                              <1> startseg        equ     0FFFFh - (ROM*64) + 1
   137                              <1> highrom         equ     (ROM*400h)&0FFFFh
   138                              <1> startupseg      equ     0FFFFh - (startuplength>>4) + 1
   139                              <1> bios_data_seg   equ     040h            ; segment of BIOS data area
   140                              <1> 
   141                              <1> 
   142                              <1> %define ARG(n) [bp+2+(n)*2]
   143                              <1> 
   144                              <1> %macro  check   1.nolist
   145                              <1>  %if (%1)
   146                              <1>    %error Check Failure: %1
   147                              <1>  %endif
   148                              <1> %endm
   149                              <1> %macro  range   3.nolist
   150                              <1>  %if (%1)<(%2)
   151                              <1>    %error Out of Range: %1
   152                              <1>  %elif (%1)>(%3)
   153                              <1>    %error Out of Range: %1
   154                              <1>  %endif
   155                              <1> %endm
   156                              <1> _terminal equ UART
   157                              <1>  check   RAM_DOS&15
   158                              <1>  check   RAM&(RAM-1)
   159                              <1>  check   ROM&(ROM-1)
   160                              <1>  range   RAM,32,512
   161                              <1>  range   ROM,32,256
   162                              <1>  range   RAM_WS,0,3
   163                              <1>  range   ROM_WS,0,3
   164                              <1>  range   RAM_DOS,RAM,(1024-ROM)
   165                              <1>  range   LCL_IO_WS,0,3
   166                              <1>  range   BUS_IO_WS,0,3
   167                              <1>  range   UART_OSC,500000,16000000
   168                              <1>  range   UART_RATE,0,7
   169                              <1>  range	 UART,0,1
   170                              <1>  range	 _terminal,1,2
   171                              <1> 
   172                              <1> %ifndef SOFT_DEBUG
   173                              <1> %define SOFT_DEBUG 0
   174                              <1> %endif
   175                              <1> 
   176                              <1> %ifndef TRACE
   177                              <1> %define TRACE 0
   178                              <1> %endif
   179                              <1> 
   180                              <1> %ifdef MAKE_OBJECT_FILE
   181                              <1>         segment _DATA WORD PUBLIC CLASS=DATA
   182                              <1>         export _ROMsize
   183                              <1>         export _CHIPsize
   184                              <1> _ROMsize        dw      ROM
   185                              <1> _CHIPsize       dw      CHIP
   186                              <1> %endif
   187                              <1> ; end of the Hardware configuration file
   188                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   189                              <1> ;*/
    24                                  %include	"cpuregs.asm"
    25                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    26                              <1> ; CPUREGS.ASM
    27                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    28                              <1> ;
    29                              <1> ;   This version is for assembly by  NASM 0.98.39 or later
    30                              <1> ;
    31                              <1> ; Copyright (C) 2010,2011 John R. Coffman.  All rights reserved.
    32                              <1> ; Provided for hobbyist use on the N8VEM SBC-188 board.
    33                              <1> ;
    34                              <1> ; This program is free software: you can redistribute it and/or modify
    35                              <1> ; it under the terms of the GNU General Public License as published by
    36                              <1> ; the Free Software Foundation, either version 3 of the License, or
    37                              <1> ; (at your option) any later version.
    38                              <1> ;
    39                              <1> ; This program is distributed in the hope that it will be useful,
    40                              <1> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
    41                              <1> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    42                              <1> ; GNU General Public License for more details.
    43                              <1> ;
    44                              <1> ; You should have received a copy of the GNU General Public License
    45                              <1> ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
    46                              <1> ;
    47                              <1> ; Updated for the Duodyne 80c188 SBC
    48                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    49                              <1> %include	"macros.inc"
    50                              <2> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    51                              <2> ; MACROS.INC  
    52                              <2> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    53                              <2> ;
    54                              <2> ;   This version is for assembly by  NASM 0.98.39 or later
    55                              <2> ;
    56                              <2> ; Copyright (C) 2010,2011 John R. Coffman.  All rights reserved.
    57                              <2> ; Provided for hobbyist use on the N8VEM SBC-188 board.
    58                              <2> ;
    59                              <2> ; This program is free software: you can redistribute it and/or modify
    60                              <2> ; it under the terms of the GNU General Public License as published by
    61                              <2> ; the Free Software Foundation, either version 3 of the License, or
    62                              <2> ; (at your option) any later version.
    63                              <2> ;
    64                              <2> ; This program is distributed in the hope that it will be useful,
    65                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
    66                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    67                              <2> ; GNU General Public License for more details.
    68                              <2> ;
    69                              <2> ; You should have received a copy of the GNU General Public License
    70                              <2> ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
    71                              <2> ;
    72                              <2> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    73                              <2> 
    74                              <2> ; general macros for the SBC188 BIOS ASSEMBLY
    75                              <2> ;
    76                              <2> ;
    77                              <2> %ifndef __MACROS_DEFINED_
    78                              <2> %define __MACROS_DEFINED_ 1
    79                              <2> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    80                              <2> ;
    81                              <2> ; some useful macros:
    82                              <2> ;
    83                              <2> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    84                              <2> ;
    85                              <2> 	cpu	186
    86                              <2> 
    87                              <2> %imacro setloc  1.nolist
    88                              <2>  times   (%1-($-$$)) db 0FFh
    89                              <2> %endm
    90                              <2> 
    91                              <2> %imacro db_lo   1
    92                              <2>  db (%1)&255
    93                              <2> %endm
    94                              <2> 
    95                              <2> %imacro cnop    0.nolist
    96                              <2> %if SOFT_DEBUG
    97                              <2>         nop
    98                              <2> %endif
    99                              <2> %endm
   100                              <2> 
   101                              <2> %imacro popm 1-*.nolist
   102                              <2> %rep %0
   103                              <2> %ifidni %1,ALL
   104                              <2>  popa
   105                              <2> %elifidni %1,F
   106                              <2>  popf
   107                              <2> %else
   108                              <2>  pop %1
   109                              <2> %ifidni %1,DS
   110                              <2>  cnop
   111                              <2> %elifidni %1,ES
   112                              <2>  cnop
   113                              <2> %endif
   114                              <2> %endif
   115                              <2> %rotate 1
   116                              <2> %endrep
   117                              <2> %endm
   118                              <2> 
   119                              <2> %imacro pushm 1-*.nolist
   120                              <2> %rep %0
   121                              <2> %rotate -1
   122                              <2> %ifidni %1,ALL
   123                              <2>  pusha
   124                              <2> %elifidni %1,F
   125                              <2>  pushf
   126                              <2> %else
   127                              <2>  push %1
   128                              <2> %endif
   129                              <2> %endrep
   130                              <2> %endm
   131                              <2> 
   132                              <2> ;
   133                              <2> ; added from the 386EX project
   134                              <2> ;
   135                              <2> 
   136                              <2> ; call arguments
   137                              <2> %define ARG(n) [bp+2+(n)*2]
   138                              <2> 
   139                              <2> ;
   140                              <2> ; format of the BYTE initialization table:  address, byte
   141                              <2> ;
   142                              <2> %imacro  binit 2
   143                              <2>         dw      %1
   144                              <2>         db      %2
   145                              <2> %endmacro
   146                              <2> ; end with DW -1
   147                              <2> 
   148                              <2> ;
   149                              <2> ; format of the WORD initialization table:  address, word
   150                              <2> ;
   151                              <2> %imacro  winit 2
   152                              <2>         dw      %1
   153                              <2>         dw      %2
   154                              <2> %endmacro
   155                              <2> ; end with DW -1
   156                              <2> 
   157                              <2> 
   158                              <2> ; get the BIOS Data Area segment pointer to a [segment] register
   159                              <2> %imacro get_bda	1.nolist
   160                              <2> 	push	0x0040
   161                              <2> 	pop	%1
   162                              <2> 	cnop
   163                              <2> %endm
   164                              <2> 
   165                              <2> 
   166                              <2> %endif
    50                              <1> 
    51                              <1> 	cpu     186
    52                              <1> ;
    53                              <1> ;
    54                              <1> ; IBM model byte -- must be less than a 286
    55                              <1> ;
    56                              <1> 
    57                              <1> MODEL_BYTE		equ	0FEh	; PC-XT
    58                              <1> SUBMODEL_BYTE		equ	00h	;  "
    59                              <1> 
    60                              <1> 
    61                              <1> ; 80188 peripheral control register block address
    62                              <1> CPU_CSCR	        equ	0FF00h
    63                              <1> 
    64                              <1> ; Compatible Mode registers
    65                              <1> 
    66                              <1> cpu_relocation          equ     CPU_CSCR+0FEh
    67                              <1> 
    68                              <1> ; The memory and peripheral chip select register offsets from 0FF00h
    69                              <1> 
    70                              <1> cpu_umcs                equ     CPU_CSCR+0A0h          ; Upper memory select
    71                              <1> cpu_lmcs                equ     CPU_CSCR+0A2h          ; Lower memory select
    72                              <1> cpu_pacs                equ     CPU_CSCR+0A4h          ; Peripheral select
    73                              <1> cpu_mmcs                equ     CPU_CSCR+0A6h          ; Middle memory base
    74                              <1> cpu_mpcs                equ     CPU_CSCR+0A8h          ; Mid mem. & peripherals
    75                              <1> 
    76                              <1> ; Enhanced Mode registers
    77                              <1> 
    78                              <1> cpu_mdram               equ     CPU_CSCR+0E0h          ; memory partition reg.
    79                              <1> cpu_cdram               equ     CPU_CSCR+0E2h          ; clock prescaler
    80                              <1> cpu_edram               equ     CPU_CSCR+0E4h          ; Enable refresh reg.
    81                              <1> cpu_pdcon               equ     CPU_CSCR+0F0h          ; Power-Save control
    82                              <1> 
    83                              <1> 
    84                              <1> ; On-board internal peripheral equates
    85                              <1> ; Programmable Interrupt Controller
    86                              <1> PIC	        equ	CPU_CSCR+020H
    87                              <1> PIC_EOI	        equ	PIC+2           ; End Of Interrupt
    88                              <1> PIC_POLLR	equ	PIC+4
    89                              <1> PIC_POLLSR	equ	PIC+6
    90                              <1> PIC_IMASK	equ	PIC+8
    91                              <1> PIC_PMREG	equ	PIC+0AH
    92                              <1> PIC_SRVR	equ	PIC+0CH
    93                              <1> PIC_IRQR	equ	PIC+0EH
    94                              <1> PIC_IRQSR	equ	PIC+10H
    95                              <1> PIC_TCR	        equ	PIC+12H
    96                              <1> PIC_DMA0CR	equ	PIC+14H
    97                              <1> PIC_DMA1CR	equ	PIC+16H
    98                              <1> PIC_I0CON	equ	PIC+18H
    99                              <1> PIC_I1CON	equ	PIC+1AH
   100                              <1> PIC_I2CON	equ	PIC+1CH
   101                              <1> PIC_I3CON	equ	PIC+1EH
   102                              <1> 
   103                              <1> EOI_NSPEC       equ     8000h           ; Non-Specific EOI
   104                              <1> 
   105                              <1> ; Interrupt masks (Master Mode)
   106                              <1> ;
   107                              <1> mask_timer_all          equ     0001h
   108                              <1> mask_dma0               equ     0004h
   109                              <1> mask_dma1               equ     0008h
   110                              <1> mask_int0               equ     0010h
   111                              <1> mask_int1               equ     0020h
   112                              <1> mask_int2               equ     0040h
   113                              <1> mask_int3               equ     0080h
   114                              <1> 
   115                              <1> 
   116                              <1> 
   117                              <1> ; Timers
   118                              <1> TIM0	        equ	CPU_CSCR+050H
   119                              <1> TIM1	        equ	CPU_CSCR+058H
   120                              <1> TIM2	        equ	CPU_CSCR+060H
   121                              <1> 
   122                              <1> TCNT	        equ	0	; count register
   123                              <1> CMPA	        equ	2	; max count A
   124                              <1> CMPB	        equ	4	; max count B (not present on TIM2)
   125                              <1> TCON	        equ	6	; mode/control word
   126                              <1> 
   127                              <1> ; Timer control bits:
   128                              <1> tc_EN           equ     8000h   ; Enable bit
   129                              <1> tc_nINH         equ     4000h   ; not Inhibit Enable
   130                              <1> tc_INT          equ     2000h   ; Interrupt Enable
   131                              <1> tc_RIU          equ     1000h   ; Register A/B (0/1) in Use
   132                              <1> tc_MC           equ     0020h   ; Maximum Count reached
   133                              <1> tc_RTG          equ     0010h   ; Retrigger (internal source)
   134                              <1> tc_P            equ     0008h   ; Prescale internal clock (timers 0 & 1 only)
   135                              <1> tc_EXT          equ     0004h   ; External clock
   136                              <1> tc_ALT          equ     0002h   ; Alternate between A & B max count registers
   137                              <1> tc_CONT         equ     0001h   ; Continuous: continue after max count
   138                              <1> 
   139                              <1> 
   140                              <1> 
   141                              <1> 
   142                              <1> ; DMA
   143                              <1> DMA0	        equ	CPU_CSCR+0C0H
   144                              <1> DMA1	        equ	CPU_CSCR+0D0H
   145                              <1> DMASPL	        equ	0	; source pointer low
   146                              <1> DMASPU	        equ	2	; source pointer high
   147                              <1> DMADPL	        equ	4	; destination pointer low
   148                              <1> DMADPU	        equ	6	; destination pointer high
   149                              <1> DMATC	        equ	8	; terminal count
   150                              <1> DMACW	        equ	0AH	; control word
   151                              <1> 
   152                              <1> 
   153                              <1> 
   154                              <1> 
   155                              <1> 
   156                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   157                              <1> ;
   158                              <1> ;       SBC-188 external devices
   159                              <1> ;
   160                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   161                              <1> 
   162                              <1> IO_BASE			equ	0400h
   163                              <1> 
   164                              <1> 
   165                              <1> 
   166                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   167                              <1> ; The UART registers (Duodyne SBC 80c188 Console port)
   168                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   169                              <1> 
   170                              <1> uart_base               equ     IO_BASE+0280h
   171                              <1> uart_rbr                equ     uart_base       ;Rcvr Buffer / read only
   172                              <1> uart_thr                equ     uart_base       ;Transmit Holding / write only
   173                              <1> uart_ier                equ     uart_base+1     ;Interrupt Enable
   174                              <1> uart_iir                equ     uart_base+2     ;Interrupt Ident / read only
   175                              <1> uart_fcr                equ     uart_base+2     ;FIFO Control / write only
   176                              <1> uart_lcr                equ     uart_base+3     ;Line Control
   177                              <1> uart_mcr                equ     uart_base+4     ;Modem Control
   178                              <1> uart_lsr                equ     uart_base+5     ;Line Status
   179                              <1> uart_msr                equ     uart_base+6     ;Modem Status
   180                              <1> uart_sr			equ	uart_base+7	;Scratch
   181                              <1> 
   182                              <1> uart_dll                equ     uart_base       ;Divisor Latch LS Byte
   183                              <1> uart_dlm                equ     uart_base+1     ;Divisor Latch MS Byte
   184                              <1> 
   185                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   186                              <1> ; CONTROL LS259 PORT  (DuoDyne 80C188)
   187                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   188                              <1> CTRL259		equ	IO_BASE+0238H
   189                              <1> ; LEDS are at addresses 0..3
   190                              <1> ; other control ports on 4..7
   191                              <1> LED0		equ	CTRL259+0
   192                              <1> LED1		equ	LED0+1
   193                              <1> LED2		equ	LED0+2
   194                              <1> LED3		equ	LED0+3
   195                              <1> T1OSC18		equ	CTRL259+4	; ON=1.8432mhz, OFF="1" (for use of TIMER2)
   196                              <1> ;unused		equ	CTRL259+5
   197                              <1> ;unused		equ	CTRL259+6
   198                              <1> ;unused		equ	CTRL259+7
   199                              <1> 
   200                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   201                              <1> ; Front Panel Connector  (DuoDyne 80C188)
   202                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   203                              <1> FRONT_PANEL_LED	equ	IO_BASE+0230H
   204                              <1> 
   205                              <1> 
   206                              <1> 
   207                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   208                              <1> ; Floppy controller (Duodyne Disk IO)
   209                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   210                              <1> FDC	        equ	IO_BASE+0080H
   211                              <1> FDC_MSR         equ     FDC
   212                              <1> FDC_DATA        equ     FDC+1
   213                              <1> FDC_TC	        equ	FDC+2
   214                              <1> FDC_RES	        equ	FDC+3
   215                              <1> FDC_LDCR	equ	FDC+5
   216                              <1> FDC_LDOR	equ	FDC+6
   217                              <1> FDC_DACK        equ	FDC+6
   218                              <1> FDC_DACK_TC     equ     FDC+7
   219                              <1> 
   220                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   221                              <1> ; Duodyne Multi IO
   222                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   223                              <1> CH376	        equ	IO_BASE+004EH
   224                              <1> ParPrinter      equ	IO_BASE+0048H
   225                              <1> DuoSerial       equ	IO_BASE+0070H
   226                              <1> MultiIo8242     equ	IO_BASE+004CH
   227                              <1> PrinterTimeout  equ 	020h
   228                              <1> 
   229                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   230                              <1> ;DS1302 RTC (Duodyne Ram/ROM Card)
   231                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   232                              <1> RTC	equ	IO_BASE+0094H
   233                              <1> 
   234                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   235                              <1> ; PIO 82C55 I/O  (Duodyne Disk IO)
   236                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   237                              <1> PPI	        equ	IO_BASE+0088H
   238                              <1> 
   239                              <1> PIO_A	        equ	PPI+0	; (OUTPUT)
   240                              <1> PIO_B	        equ	PPI+1	; (INPUT)
   241                              <1> PIO_C	        equ	PPI+2	; (CENTRONICS control low nibble)
   242                              <1> PIO_CTRL	equ	PPI+3	; CONTROL BYTE PIO 82C55
   243                              <1> 
   244                              <1> portA           equ     PPI+0   ;
   245                              <1> portB           equ     PPI+1   ;
   246                              <1> portC           equ     PPI+2   ;
   247                              <1> 
   248                              <1> ; end CPUREGS.ASM
    25                                  %include	"equates.asm"
    26                              <1> ;========================================================================
    27                              <1> ; EQUATES.ASM -- Lots of Defintions for Relocatable BIOS
    28                              <1> ;========================================================================
    29                              <1> ;   for the N8VEM SBC-188 v.00.4 and 00.5
    30                              <1> ;
    31                              <1> ;   This version is for assembly by  NASM 0.98.39 or later
    32                              <1> ;
    33                              <1> ; Copyright (C) 2010 John R. Coffman.  All rights reserved.
    34                              <1> ; Provided for hobbyist use on the N8VEM SBC-188 board.
    35                              <1> ;
    36                              <1> ; This program is free software: you can redistribute it and/or modify
    37                              <1> ; it under the terms of the GNU General Public License as published by
    38                              <1> ; the Free Software Foundation, either version 3 of the License, or
    39                              <1> ; (at your option) any later version.
    40                              <1> ;
    41                              <1> ; This program is distributed in the hope that it will be useful,
    42                              <1> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
    43                              <1> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    44                              <1> ; GNU General Public License for more details.
    45                              <1> ;
    46                              <1> ; You should have received a copy of the GNU General Public License
    47                              <1> ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
    48                              <1> ;
    49                              <1> ;========================================================================
    50                              <1> 
    51                              <1>         global  FPEM_segment
    52                              <1> 
    53                              <1> 
    54                              <1> %include "segdef.asm"
    55                              <2> ;========================================================================
    56                              <2> ; SEGDEF.ASM -- Lots of Defintions for Relocatable BIOS
    57                              <2> ;========================================================================
    58                              <2> ;   for the N8VEM SBC-188 v.00.4 and 00.5
    59                              <2> ;
    60                              <2> ;   This version is for assembly by  NASM 0.98.39 or later
    61                              <2> ;
    62                              <2> ; Copyright (C) 2010 John R. Coffman.  All rights reserved.
    63                              <2> ; Provided for hobbyist use on the N8VEM SBC-188 board.
    64                              <2> ;
    65                              <2> ; This program is free software: you can redistribute it and/or modify
    66                              <2> ; it under the terms of the GNU General Public License as published by
    67                              <2> ; the Free Software Foundation, either version 3 of the License, or
    68                              <2> ; (at your option) any later version.
    69                              <2> ;
    70                              <2> ; This program is distributed in the hope that it will be useful,
    71                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
    72                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    73                              <2> ; GNU General Public License for more details.
    74                              <2> ;
    75                              <2> ; You should have received a copy of the GNU General Public License
    76                              <2> ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
    77                              <2> ;
    78                              <2> ;========================================================================
    79                              <2> 
    80                              <2> %ifndef __SEGDEF_
    81                              <2> %define __SEGDEF_
    82                              <2> 
    83                              <2> 	SEGMENT  _TEXT ALIGN=2 PUBLIC CLASS=CODE
    84                              <2>         SEGMENT  CONST ALIGN=2 PUBLIC CLASS=DATA
    85                              <2>         SEGMENT  CONST2 ALIGN=2 PUBLIC CLASS=DATA
    86                              <2> 	SEGMENT  _DATA ALIGN=16 PUBLIC CLASS=DATA
    87                              <2> 	SEGMENT  _BSS  ALIGN=2 PUBLIC CLASS=BSS
    88                              <2> ;;;        SEGMENT  _BASIC ALIGN=16 PUBLIC CLASS=BASIC
    89                              <2> 
    90                              <2> 	GROUP	DGROUP CONST CONST2 _DATA _BSS
    91                              <2> 
    92                              <2> %endif
    93                              <2> 
    55                              <1> %include "ascii.asm"
    56                              <2> ; ascii.asm
    57                              <2> ;
    58                              <2> CTRL            equ     1Fh     ; masks a character to CTRL-x
    59                              <2> 
    60                              <2> NUL     equ     00h
    61                              <2> BEL     equ     (CTRL & 'G')
    62                              <2> BS      equ     08h		; ^H
    63                              <2> HT      equ     09h		; ^I
    64                              <2> LF	equ	0Ah		; ^J
    65                              <2> NL      equ     LF
    66                              <2> VT	equ	0Bh		; ^K
    67                              <2> FWD	equ	0Ch		; ^L
    68                              <2> CR	equ	0Dh
    69                              <2> XON     equ     (CTRL & 'Q')
    70                              <2> XOFF    equ     (CTRL & 'S')
    71                              <2> DC1     equ     XON
    72                              <2> DC3     equ     XOFF
    73                              <2> ESC     equ	1Bh
    74                              <2> 
    75                              <2> 
    56                              <1> 
    57                              <1> 
    58                              <1> ; POST error codes. Presently one byte but can expand to word.
    59                              <1> ER_BIOS equ	01h		; Bad ROM bios checksum, patch last byte
    60                              <1> ER_RAM	equ	02h		; Bad RAM in main memory, replace
    61                              <1> ER_CRT	equ	04h		; Bad RAM in video card, replace
    62                              <1> ER_FDC	equ	08h		; Bad FDC
    63                              <1> ER_UNK1	equ	10h		; {unassigned}
    64                              <1> ER_MEM	equ	20h		; Bad RAM in vector area, replace
    65                              <1> ER_ROM	equ	40h		; Bad ROM in expansion area, bad checksum
    66                              <1> ER_UNK2	equ	80h		; {unassigned}
    67                              <1> 
    68                              <1> 
    69                              <1> 
    70                              <1> ;; ************************ BIOS Data Segment ******************************
    71                              <1> ;; BIOS data segment - not all will  be used
    72                              <1> ;                struc   BIOS_DATA_AREA  ; at 0040:0000
    73                              <1> %include "bda.inc"
    74                              <2> ;/*======================================================================
    75                              <2> ; bda.inc -- BIOS data area definitions
    76                              <2> ;========================================================================
    77                              <2> ;   for the N8VEM SBC-188
    78                              <2> ;
    79                              <2> ;   This version is for assembly by  NASM 0.98.39 or later
    80                              <2> ;
    81                              <2> ; Copyright (C) 2013 John R. Coffman.  All rights reserved.
    82                              <2> ; Provided for hobbyist use on the N8VEM SBC-188 board.
    83                              <2> ;
    84                              <2> ; This program is free software: you can redistribute it and/or modify
    85                              <2> ; it under the terms of the GNU General Public License as published by
    86                              <2> ; the Free Software Foundation, either version 3 of the License, or
    87                              <2> ; (at your option) any later version.
    88                              <2> ;
    89                              <2> ; This program is distributed in the hope that it will be useful,
    90                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
    91                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    92                              <2> ; GNU General Public License for more details.
    93                              <2> ;
    94                              <2> ; You should have received a copy of the GNU General Public License
    95                              <2> ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
    96                              <2> ;
    97                              <2> ;========================================================================
    98                              <2> 
    99                              <2> 			;*/ extern				/*
   100                              <2> 	ABSOLUTE  0	;*/ struct BDA {			/*
   101 00000000 ????????????????    <2> serial_ports    resw    4	;*/	word	serial_ports[4];	/*
   102 00000008 ????????????????    <2> parallel_ports  resw    4	;*/	word	parallel_ports[4];	/*
   103 00000010 ????                <2> equipment_flag  resw    1	;*/	EQFL	equipment_flag;		/*
   104                              <2> ;	dw	?		; 40:10 	; Equipment present word
   105                              <2> ;  						;  = (1 iff floppies) *     1.
   106                              <2> ;                                               ;  + (1 iff 187     ) *     2.
   107                              <2> ;  						;  + (#+1 64K sys ram) *    4.
   108                              <2> ;  						;  + (init crt mode ) *    16.
   109                              <2> ;  						;  + (# of floppies ) *    64.
   110                              <2> ;  						;  + (# serial ports) *   512.
   111                              <2> ;  						;  + (1 iff toy port) *  4096.
   112                              <2> ;                                               ;  + (1 iff modem   ) *  8192.
   113                              <2> ;  						;  + (# parallel LPT) * 16384.
   114 00000012 ??                  <2> mfg_test_flags  resb    1	;*/	byte	mfg_test_flags;	/* 40:12 unused by us
   115 00000013 ????                <2> memory_size     resw    1	;*/	word	memory_size;	/* 40:13 kilobytes
   116                              <2> uart_kbd_ctrl_R	equ	$	;*/				/*** JRC: count of ctrl-R's for reboot
   117 00000015 ??                  <2> IPL_errors      resb    1	;*/	byte	IPL_errors;	/* 40:15 IPL errors<-table/scratchpad
   118 00000016 ??                  <2> sbc188_rev       resb    1	;*/	byte	sbc188_rev;	/* was 'unused_01' before BIOS047
   119                              <2> ;;---------------[Keyboard data area]------------;
   120 00000017 ????                <2> keyboard_flags_0 resw   1	;*/	word	keyboard_flags_0;  /* 40:17 Shift/Alt/etc. keyboard flags
   121                              <2> keyboard_flags_1 equ	$-1	;     2nd byte	keyboard_flags_1;
   122 00000019 ??                  <2> keypad_char	resb	1	;*/	byte	keypad_char;	/* 40:19 Alt-KEYPAD char. goes here
   123 0000001A ????                <2> kbd_buffer_head resw    1	;*/	word	kbd_buffer_head;   /* 40:1A --> keyboard buffer head
   124 0000001C ????                <2> kbd_buffer_tail resw    1	;*/	word	kbd_buffer_tail;   /* 40:1C --> keyboard buffer tail
   125 0000001E <res 20h>           <2> kbd_buffer      resw    16	;*/	word	kbd_buffer[16];	/* 40:1E Keyboard Buffer (Scan,Value)
   126                              <2> kbd_buffer_last	equ	$	;*/				/*
   127                              <2> ;;---------------[Diskette data area]------------;
   128 0000003E ??                  <2> fdc_drv_calib   resb    1	;*/	byte	fdc_drive_calib;   /* 40:3E
   129 0000003F ??                  <2> fdc_motor_LDOR  resb    1	;*/	byte	fdc_motor_LDOR;	   /* 40:3F Motor, DMA, select control
   130 00000040 ??                  <2> fdc_motor_ticks resb    1	;*/	byte	fdc_motor_ticks;   /* 40:40 ticks til motor off
   131 00000041 ??                  <2> fdc_status      resb    1	;*/	byte	fdc_status;	   /* 40:41
   132                              <2> ;				Floppy return code stat byte
   133                              <2> ;				;  1 = bad ic 765 command req.
   134                              <2> ;				;  2 = address mark not found
   135                              <2> ;				;  3 = write to protected disk
   136                              <2> ;				;  4 = sector not found
   137                              <2> ;				;  8 = data late (DMA overrun)
   138                              <2> ;				;  9 = DMA failed 64K page end
   139                              <2> ;				; 16 = bad CRC on floppy read
   140                              <2> ;				; 32 = bad NEC 765 controller
   141                              <2> ;				; 64 = seek operation failed
   142                              <2> ;				;128 = disk drive timed out
   143 00000042 ??????????????      <2> fdc_ctrl_status resb    7	;*/	byte	fdc_ctrl_status[7];  /* 40:42 Status bytes from NEC 765
   144                              <2> ;;---------------[Video display area]------------;
   145 00000049 ??                  <2> video_mode      resb    1	;*/	byte	video_mode;	/* 40:49
   146                              <2> ;			 	; Current CRT mode  (software)
   147                              <2> ;				;  0 = 40 x 25 text (no color)
   148                              <2> ;				;  1 = 40 x 25 text (16 color)
   149                              <2> ;				;  2 = 80 x 25 text (no color)
   150                              <2> ;				;  3 = 80 x 25 text (16 color)
   151                              <2> ;				;  4 = 320 x 200 grafix 4 color
   152                              <2> ;				;  5 = 320 x 200 grafix 0 color
   153                              <2> ;				;  6 = 640 x 200 grafix 0 color
   154                              <2> ;				;  7 = 80 x 25 text (mono card)
   155 0000004A ????                <2> video_columns   resw    1	;*/	word video_columns;	/* 40:4A Columns on CRT screen
   156 0000004C ????                <2> video_regen_bytes  resw 1	;*/	word video_regen_bytes;	/* 40:4C Bytes in the regen region
   157 0000004E ????                <2> video_regen_offset resw 1	;*/	word video_regen_offset;/* 40:4E Byte offset in regen region
   158 00000050 <res 10h>           <2> video_cursor_pos  resw  8	;*/	word video_cursor_pos[8];  /* 40:50 Cursor pos for up to 8 pages
   159 00000060 ????                <2> video_cursor_mode resw  1	;*/	word video_cursor_mode;	/* 40:60 Current cursor mode setting
   160 00000062 ??                  <2> video_page      resb    1	;*/	byte video_page;	/* 40:62 Current page on display
   161 00000063 ????                <2> video_base_seg  resw    1	;*/	word video_base_seg;	/* 40:63 Base address (B000h or B800h)
   162 00000065 ??                  <2> video_hw_mode   resb    1	;*/	byte video_hw_mode;	/* 40:65 ic 6845 mode reg. (hardware)
   163 00000066 ??                  <2> video_cga_palette resb  1	;*/	byte video_cga_palette;	/* 40:66 Current CGA palette
   164                              <2> ;;---------------[Used to setup ROM]-------------;
   165 00000067 ????????            <2> eprom_address   resd    1	;*/	dword eprom_address;	/* 40:67 Eprom base Offset,Segment
   166 0000006B ??                  <2> spurious_irq    resb    1	;*/	byte spurious_irq;	/* 40:6B Last spurious interrupt IRQ
   167                              <2> ;;---------------[Timer data area]---------------;
   168 0000006C ????????            <2> timer_ticks     resd    1	;*/	dword timer_ticks;	/* 40:6C Ticks since midnight (lo,hi)
   169 00000070 ??                  <2> timer_new_day   resb    1	;*/	byte timer_new_day;	/* 40:70 Non-zero if new day
   170                              <2> ;;---------------[System data area]--------------;
   171 00000071 ??                  <2> break_flag      resb    1	;*/	byte break_flag;	/* 40:71 Sign bit set iff break
   172 00000072 ????                <2> warm_boot       resw    1	;*/	word warm_boot;		/* 40:72 Warm boot iff==1234h
   173                              <2> ;;---------------[Hard disk scratchpad]----------;
   174 00000074 ????????            <2> hdd_scratch     resd    1	;*/	word hdd_scratch[2];	/* 40:74
   175                              <2> ;;---------------[Timout areas/PRT/LPT]----------;
   176 00000078 ????????            <2> lpt_timeout     resb    4	;*/	byte lpt_timeout[4];	/* 40:78 Ticks for LPT 1-4 timeouts
   177 0000007C ????????            <2> com_timeout     resb    4	;*/	byte com_timeout[4];	/* 40:7C Ticks for COM 1-4 timeouts
   178                              <2> ;;---obsolete----[Keyboard buf start/end]---jrc--;
   179 00000080 ????                <2> kbd_buffer_start resw   1	;*/	word kbd_buffer_start;	/* 40:80 KBD buffer head (PC/AT)
   180 00000082 ????                <2> kbd_buffer_end  resw    1	;*/	word kbd_buffer_end;	/* 40:82 KBD buffer tail (PC/AT)
   181                              <2> ;;---------------[EGA stuff]---------------------;
   182 00000084 ??????????????      <2> EGA_stuff	resb	7	;*/	byte EGA_stuff[7];	/* 40:84 Unspecified EGA data
   183                              <2> ;;---------------[Floppy/Fixed Media Info]-------------;
   184 0000008B ??                  <2> fdc_last_rate	resb	1	;*/	byte fdc_last_rate;	/* 40:8B Last floppy step rate/data rate?
   185 0000008C ????????            <2> fx_misc_unused	resb	4	;*/	byte fx_misc_unused[4];	/* 40:8C Fixed disk miscellaneous ???
   186 00000090 ????                <2> fdc_disk_state	resb	2	;*/	byte fdc_disk_state[2];	/* 40:90 Floppy disk state
   187 00000092 ????                <2> fdc_op_start	resb	2	;*/	byte fdc_op_start[2];	/* 40:92 Floppy operation start state machine
   188 00000094 ????                <2> fdc_cylinder	resb	2	;*/	byte fdc_cylinder[2];	/* 40:94 Floppy present cylinder
   189                              <2> ;;---------------[Additional KBD flags]----------------;
   190 00000096 ??                  <2> kbd_flag_3	resb	1	;*/	byte kbd_flag_3;	/* 40:96 kbd ???
   191 00000097 ??                  <2> kbd_flag_2	resb	1	;*/	byte kbd_flag_2;	/* 40:97 kbd ???
   192                              <2> ;;---------------[RTC/timer1 data]---------------------;
   193 00000098 ????????            <2> user_semaphore	resw	2	;*/	byte *user_semaphore;	/* 40:98 User semaphore in (bit 7)
   194 0000009C ????????            <2> rtc_count	resd	1	;*/	dword rtc_count;	/* 40:9C RTC tick counter
   195 000000A0 ??                  <2> rtc_wait_active	resb	1	;*/	byte rtc_wait_active;	/* 40:A0 Busy=01, Posted=80h,
   196                              <2> ;;---------------[Cassette I/O stuff]------------------;
   197 000000A1 ??                  <2> last_val	resb	1	;*/	byte last_val;		/* 40:A1 Last byte read value
   198 000000A2 ????                <2> crc_reg		resw	1	;*/	word crc_reg;		/* 40:A2 CRC accumulation area
   199                              <2> ;									Post Acknowleged=00;
   200 000000A4 ??                  <2> EGA_data	resb	1	;*/	byte EGA_data;		/* 40:A4 Various usage
   201 000000A5 ????                <2> SDstatus	resb	2	;*/	byte SDstatus[2];	/* 40:A5 Status byte from command
   202 000000A7 ????                <2> SDcardtype	resb	2	;*/	byte SDcardtype[2];	/* 40:A7 SDcard type SDSC=2, HC=3, ...
   203                              <2> ;
   204 000000A9 ????????            <2> fixed_disk_tab	resb	4	;*/	byte fixed_disk_tab[4];	/* dispatch table to fixed disk drivers
   205 000000AD ??                  <2> wait12_count	resb	1	;*/	byte wait12_count;	/* 40:AD 12usec CX count
   206 000000AE ??                  <2> lock_count	resb	1	;*/	byte lock_count;	/* 40:AE lock level counter
   207 000000AF ??                  <2> EMS_start       resb    1	;*/	byte EMS_start;		/* start EMS allocation from here
   208                              <2> fx80		equ	$	;*/	struct EDD_disk fx80;	/* fixed disk parameter area 0
   209 000000B0 ????                <2> fx_log_cylinders resw   1	;	word fx_log_cylinders;	 logical number of cylinders
   210 000000B2 ??                  <2> fx_log_heads    resb    1	;	byte fx_log_heads;	 logical number of heads
   211 000000B3 ??                  <2> fx_signature	resb	1	;	byte fx_signature;	 A0h signature = translated geom
   212 000000B4 ??                  <2> fx_phys_sectors	resb    1       ;	byte fx_phys_sectors;	 physical number of sectors per track
   213 000000B5 ????                <2> fx_LBA_high     resw    1       ;	word fx_LBA_high;	 high word of LBA28 number of sectors
   214 000000B7 ??                  <2> fx_reserved	resb	1	;	byte fx_reserved;	 reserved for future use
   215 000000B8 ??                  <2> fx_drive_control resb   1       ;	byte fx_drive_control;	 flag bits for IDE head register
   216 000000B9 ????                <2> fx_phys_cylinders resw	1	;	word fx_phys_cylinders;	 physical number of cylinders
   217 000000BB ??                  <2> fx_phys_heads	resb	1	;	byte fx_phys_heads;	 physical number of heads
   218 000000BC ????                <2> fx_LBA_low	resw	1	;	word fx_LBA_low;	 low word of LBA28 number of sectors
   219 000000BE ??                  <2> fx_log_sectors	resb	1	;	byte fx_log_sectors;	 logical number of sectors per track
   220 000000BF ??                  <2> fx_checksum	resb	1	;	byte fx_checksum;	 checksum, dunno how to compute
   221 000000C0 <res 10h>           <2> fx81            resb    16	;*/	struct EDD_disk fx81;	/* fixed disk parameter area 1
   222 000000D0 <res 10h>           <2> fx82            resb    16	;*/	struct EDD_disk fx82;	/* fixed disk parameter area 2
   223 000000E0 <res 10h>           <2> fx83            resb    16	;*/	struct EDD_disk fx83;	/* fixed disk parameter area 3
   224                              <2> ;
   225                              <2> ;
   226                              <2> 
   227 000000F0 ????                <2> FPEM_segment    resw    1       ;*/	word FPEM_segment;	/* FPEM data segment
   228                              <2> 
   229 000000F2 ????                <2> EBDA_paragraph  resw    1       ;*/	word EBDA_paragraph;	/* lowest EBDA paragraph
   230                              <2> 
   231 000000F4 ????                <2> dma0_cw         resw    1       ;*/	word dma0_cw;		/* end of dma control word
   232 000000F6 ????                <2> dma1_cw         resw    1       ;*/	word dma1_cw;		/*   ditto
   233                              <2> 
   234 000000F8 ????                <2> fdc_type	resb	2	;*/	byte fdc_type[2];	/* disk type in low nibble, alternate in hi nib
   235                              <2> 
   236 000000FA ????????            <2> debug_static_ptr  resw	2	;*/	void *debug_static_ptr;	/* pointer to debug static area
   237                              <2> 
   238 000000FE ??                  <2> n_fixed_disks   resb    1       ;*/	byte n_fixed_disks;	/* number of fixed disks
   239                              <2> 
   240 000000FF ??                  <2> cpu_xtal        resb    1       ;*/	byte cpu_xtal;		/* CPU crystal frequency in Mhz
   241                              <2> ;								   CPU clock is half of this
   242                              <2> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   243                              <2> ;
   244                              <2> ;  System configuration stuff below
   245                              <2> ;	c.f., CONFIG.ASM (ANSI.CFG, CVDU.CFG, etc.), User configuration stuff
   246                              <2> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   247                              <2> %if 0				;*/
   248                              <2> #define FIXED_DISK_MAX 4		/*
   249                              <2> %else
   250                              <2> %define FIXED_DISK_MAX 4
   251                              <2> %endif
   252                              <2> %if 0				;*/
   253                              <2> #define PPIDE_driver 1		/*
   254                              <2> %else
   255                              <2> %define PPIDE_driver 1
   256                              <2> %endif
   257                              <2> %if 0				;*/
   258                              <2> #define USB_driver 1		/*
   259                              <2> %else
   260                              <2> %define USB_driver 1
   261                              <2> %endif
   262                              <2> 				;*/
    74                              <1> 
    75                              <1> ;  this must be the same in EQUATES.H */
    76                              <1> %if SOFT_DEBUG
    77                              <1> %define NBREAK  8
    78                              <1> %endif
    79                              <1> 
    80                              <1> 
    81                              <1> %if 0
    82                              <1>         segment _TEXT
    83                              <1> ;; *************************************************************************
    84                              <1> 
    85                              <1> 
    86                              <1> 
    87                              <1> 
    88                              <1> ;; ************************ DOS Data Segment *******************************
    89                              <1> ;dosdir	SEGMENT at 50h				; Boot disk directory from IPL
    90                              <1> ;xerox	label	byte				;  0 if Print Screen idle
    91                              <1> ;						;  1 if PrtSc xeroxing screen
    92                              <1> ;						;255 if PrtSc error in xerox
    93                              <1> ;						;  ...non-grafix PrtSc in bios
    94                              <1> ;	db	200h dup(?)			; PC-DOS bootstrap procedure
    95                              <1> ;						;  ...IBMBIO.COM buffers the
    96                              <1> ;						;  ...directory of the boot
    97                              <1> ;						;  ...device here at IPL time
    98                              <1> ;						;  ...when locating the guts
    99                              <1> ;						;  ...of the operating system
   100                              <1> ;						;  ...filename "IBMDOS.COM"
   101                              <1> ;dosdir	ends
   102                              <1> ;; *************************************************************************
   103                              <1> ;; ************************ DOS IPL Segment ********************************
   104                              <1> ;dosseg	SEGMENT at 70h				; "Kernel" of PC-DOS op sys
   105                              <1> ;;IBMBIO.COM file loaded by boot block. Device Drivers/Bootstrap. CONTIGUOUS<---
   106                              <1> ;;IBMDOS.COM operating system nucleus immediately follows IBMBIO.COM and       !
   107                              <1> ;;     doesn`t have to be contiguous.  The IBMDOS operating system nucleus     !
   108                              <1> ;;     binary image is loaded by transient code in IBMBIO binary image	      !
   109                              <1> ;dosseg	ends					;			      !
   110                              <1> ;iplseg	SEGMENT at 0h				; Segment for boot block      !
   111                              <1> ;;The following boot block is loaded with 512 bytes on the first sector of     !
   112                              <1> ;;the bootable device by code resident in the ROM-resident bios.  Control is   !
   113                              <1> ;;then transferred to the first word 0000:7C00 of the disk-resident bootstrap  !
   114                              <1> ;	ORG	07C00h				;  ..offset for boot block    !
   115                              <1> ;boot	db	200h dup(?)			;  ..start disk resident boot--
   116                              <1> ;iplseg	ends
   117                              <1> 
   118                              <1> %endif
    26                                  
    27                                  
    28                                  ;------------------------------------------------------------------
    29                                  ; More symbolic constants... these should not be changed, unless of
    30                                  ; course the IDE drive interface changes, perhaps when drives get
    31                                  ; to 128G and the PC industry will do yet another kludge.
    32                                  
    33                                  ;some symbolic constants for the ide registers, which makes the
    34                                  ;code more readable than always specifying the address pins
    35                                  
    36                                  ide_data       	equ	0		; r/w
    37                                  ide_data8	equ	ide_data	; 8-bit data transfer
    38                                  ide_err		equ	1		; read
    39                                  ide_feature	equ	1		; write
    40                                  ide_sec_cnt	equ	2
    41                                  ide_sector     	equ	3
    42                                  ide_cyl_lsb	equ	4
    43                                  ide_cyl_msb	equ	5
    44                                  ide_head       	equ	6
    45                                  ide_command	equ	7		; write
    46                                  ide_status     	equ	7		; read
    47                                  ide_data16	equ	8		; 16-bit data transfer
    48                                  ide_dmack	equ	9		; DMA acknowledge
    49                                  ide_control	equ	0Eh		; aux control port
    50                                  ide_astatus	equ	0Fh		; aux status port
    51                                  
    52                                  ;IDE Command Constants.  These should never change.
    53                                  ide_cmd_recal		equ	10H
    54                                  ide_cmd_read		equ	20H
    55                                  ide_cmd_write		equ	30H
    56                                  ide_cmd_init		equ	91H
    57                                  ide_cmd_dma_read	equ	0C8h
    58                                  ide_cmd_dma_write	equ	0CAh
    59                                  ide_cmd_spindown	equ	0E0h
    60                                  ide_cmd_spinup		equ	0E1h
    61                                  ide_cmd_ident		equ	0ECh
    62                                  ide_cmd_set_feature	equ	0EFh
    63                                  
    64                                  ; Control register bits:
    65                                  ide_ctrl_ALWAYS		equ	08h	; must always be set
    66                                  ide_ctrl_RESET		equ	04h
    67                                  ide_ctrl_nIEN		equ	02h	; no interrupt if set
    68                                  					; interrupt if reset
    69                                  
    70                                  ; Master/Slave bits (head register)
    71                                  ide_MASTER		equ	00h
    72                                  ide_SLAVE		equ	10h
    73                                  ide_LBA			equ	0E0h
    74                                  ide_CHS			equ	0A0h
    75                                  
    76                                  ; Status Register Bits
    77                                  ide_ST_BUSY		equ	0x80
    78                                  ide_ST_READY    	equ	0x40
    79                                  ide_ST_WFAULT   	equ	0x20
    80                                  ide_ST_SEEKDONE 	equ	0x10
    81                                  ide_ST_DATARQ   	equ	0x08
    82                                  ide_ST_CORR     	equ	0x04
    83                                  ide_ST_INDEX    	equ	0x02
    84                                  ide_ST_ERROR    	equ	0x01
    85                                  
    86                                  ; IDE interface Features
    87                                  ide_SET_8BIT		equ	0x01
    88                                  ide_RESET_8BIT		equ	0x81
    89                                  ide_SET_16BIT		equ	ide_RESET_8BIT
    90                                  
    91                                  ; Address Register bits (active when == 0)
    92                                  ide_nDS0        	equ	0x01
    93                                  ide_nDS1        	equ	0x02
    94                                  ide_nHEAD       	equ	0x3C
    95                                  ide_nWTG        	equ	0x40
    96                                  
    97                                  ; Error Register bits
    98                                  ide_ERR_BADBLK     	equ	0x80
    99                                  ide_ERR_UCORR      	equ	0x40
   100                                  ide_ERR_MEDIA_CHG  	equ	0x20
   101                                  ide_ERR_IDNF       	equ	0x10
   102                                  ide_ERR_MCHG_REQ   	equ	0x08
   103                                  ide_ERR_ABRT       	equ	0x04
   104                                  ide_ERR_TK0NF      	equ	0x02
   105                                  ide_ERR_AMNF       	equ	0x01
   106                                  
   107                                  
   108                                  
   109                                  
   110                                  ; Standard int 13h stack frame layout is
   111                                  ; created by:   PUSHM  ALL,DS,ES
   112                                  ;               MOV    BP,SP
   113                                  ;
   114                                  offset_DI       equ     0
   115                                  offset_SI       equ     offset_DI+2
   116                                  offset_BP       equ     offset_SI+2
   117                                  offset_SP       equ     offset_BP+2
   118                                  offset_BX       equ     offset_SP+2
   119                                  offset_DX       equ     offset_BX+2
   120                                  offset_CX       equ     offset_DX+2
   121                                  offset_AX       equ     offset_CX+2
   122                                  offset_DS       equ     offset_AX+2
   123                                  offset_ES       equ     offset_DS+2
   124                                  offset_IP       equ     offset_ES+2
   125                                  offset_CS       equ     offset_IP+2
   126                                  offset_FLAGS    equ     offset_CS+2
   127                                  
   128                                  ; The byte registers in the stack
   129                                  offset_AL       equ     offset_AX
   130                                  offset_AH       equ     offset_AX+1
   131                                  offset_BL       equ     offset_BX
   132                                  offset_BH       equ     offset_BX+1
   133                                  offset_CL       equ     offset_CX
   134                                  offset_CH       equ     offset_CX+1
   135                                  offset_DL       equ     offset_DX
   136                                  offset_DH       equ     offset_DX+1
   137                                  
   138                                  
   139                                  ; FDC error codes (returned in AH)
   140                                  ;
   141                                  ERR_no_error            equ     0       ; no error (return Carry clear)
   142                                  ;   everything below returns with the Carry set to indicate an error
   143                                  ERR_invalid_command     equ     1
   144                                  ERR_address_mark_not_found      equ     2
   145                                  ERR_write_protect       equ     3
   146                                  ERR_sector_not_found    equ     4
   147                                  ERR_disk_removed        equ     6
   148                                  ERR_dma_overrun         equ     8
   149                                  ERR_dma_crossed_64k     equ     9
   150                                  
   151                                  
   152                                  ERR_media_type_not_found        equ     12	; 0Ch
   153                                  ERR_uncorrectable_CRC_error     equ     10h
   154                                  ERR_controller_failure  equ     20h
   155                                  ERR_seek_failed         equ     40h
   156                                  ERR_disk_timeout        equ     80h
   157                                  
   158                                  
   159                                  		SEGMENT		_TEXT
   160                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   161                                  ; integrity:    Check integrity of fixed disk table
   162                                  ;
   163                                  ;  Call with:
   164                                  ;       DL = device code (80h..83h)
   165                                  ;       DS set to BIOS data area
   166                                  ;
   167                                  ;  Exit with:
   168                                  ;       DS set to BIOS data area (still)
   169                                  ;       SI points at the fixed disk table in the BDA
   170                                  ;
   171                                  ;  Error Exit:
   172                                  ;       If the disk table checksum is bad, give immediate error return
   173                                  ;
   174                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   175                                  integrity:
   176 00000000 5150                            pushm   ax,cx
   177                                  %if 0
   178                                          mov     al,7Fh
   179                                          and     al,dl                   ; mask out the high bit
   180                                          cmp     al,[n_fixed_disks]
   181                                  %else
   182                                  	extern	get_IDE_num
   183 00000002 E8(0000)                	call	get_IDE_num		; get number of IDE disks total
   184 00000005 88C4                    	mov	ah,al
   185 00000007 B07F                    	mov	al,7Fh
   186 00000009 20D0                            and     al,dl                   ; mask out the high bit
   187 0000000B 38E0                    	cmp	al,ah			; compare against max
   188                                  %endif
   189 0000000D 731E                            jae     .8			; harsh error exit
   190 0000000F BEB000                          mov     si,fx80
   191 00000012 B91000                          mov     cx,fx81-fx80            ; size of fixed disk table
   192 00000015 84C0                    	test    al,al
   193 00000017 7406                            jz      .1
   194 00000019 01CE                    .0:	add     si,cx                   ; point at fx81
   195 0000001B FEC8                    	dec	al
   196 0000001D 75FA                    	jnz	.0
   197                                  .1:
   198 0000001F 56                              push    si
   199 00000020 B800EE                          mov     ax,0EE00h               ; error code and zero checksum
   200                                  
   201 00000023 0204                    .2:     add     al,[si]                 ; compute checksum
   202 00000025 46                              inc     si
   203 00000026 E2FB                            loop    .2                      ; loop back
   204                                  
   205 00000028 5E                              pop     si
   206 00000029 08C0                            or      al,al                   ; test AL for zero
   207 0000002B 7401                            jz	.9			; good exit if zero
   208 0000002D F9                      .8:	stc
   209 0000002E 5859                    .9:	popm    ax,cx
   210 00000030 C3                              ret
   211                                  
   212                                  
   213                                  
   214                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   215                                  ; fn41 -- Check Extensions Present
   216                                  ;
   217                                  ;  Call With:
   218                                  ;       AH = 41h        function code
   219                                  ;       BX = 55AAh      magic number
   220                                  ;       DL = drive code (80h or 81h)
   221                                  ;
   222                                  ;  Exit With:
   223                                  ;     carry clear
   224                                  ;       AH = 21h        version 1.1 support
   225                                  ;       BX = AA55h      magic number II
   226                                  ;       CX = 0001b  bit0=packet support; bit2=EDD drive support
   227                                  ;
   228                                  ;     carry set
   229                                  ;       AH = 01h        Invalid Command
   230                                  ;
   231                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   232                                  	global	ide_fn41
   233                                  ide_fn41:
   234 00000031 E8CCFF                          call    integrity       ; test drive number (sets DS:SI)
   235 00000034 B401                    	mov	ah,ERR_invalid_command
   236 00000036 721D                    	jc	.9		; error return
   237                                  
   238 00000038 817E08AA55                      cmp     word [offset_BX + bp],55AAh
   239 0000003D 7516                            jne     .9
   240 0000003F F6440840                        test    byte [fx_drive_control - fx80 + si],40h         ; test LBA bit
   241 00000043 7410                            jz      .9
   242                                  
   243 00000045 C6460F21                        mov     byte [offset_AH + bp],21h       ; version 1.1
   244 00000049 C7460855AA                      mov     word [offset_BX + bp],0AA55h    ; magic number II
   245 0000004E C7460C0500                      mov     word [offset_CX + bp],00000101b       ; packet calls & EDD i/f
   246 00000053 30E4                    	xor	ah,ah
   247 00000055 C3                      .9:	ret
