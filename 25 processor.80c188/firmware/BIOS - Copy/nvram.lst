Module: /mnt/fileserver/Vintage/Projects/duodyne/25 processor.80c188/firmware/BIOS/nvram.c
GROUP: 'DGROUP' CONST,CONST2,_DATA

File contains no line numbers.
Segment: _TEXT BYTE USE16 00001420 bytes
0000                          set_battery_:
0000    53                        push        bx 
0001    51                        push        cx 
0002    52                        push        dx 
0003    56                        push        si 
0004    C8 56 00 00               enter       0x0056,0x00 
0008    B8 08 00                  mov         ax,0x0008 
000B    E8 00 00                  call        @rtc_get_loc 
000E    88 46 FC                  mov         byte ptr -0x4[bp],al 
0011    24 F0                     and         al,0xf0 
0013    3C A0                     cmp         al,0xa0 
0015    75 05                     jne         L$1 
0017    BE 01 00                  mov         si,0x0001 
001A    EB 02                     jmp         L$2 
001C                          L$1:
001C    31 F6                     xor         si,si 
001E                          L$2:
001E    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
0021    30 E4                     xor         ah,ah 
0023    89 C3                     mov         bx,ax 
0025    C1 FB 02                  sar         bx,0x02 
0028    83 E3 03                  and         bx,0x0003 
002B    88 5E FE                  mov         byte ptr -0x2[bp],bl 
002E    24 03                     and         al,0x03 
0030    88 46 FA                  mov         byte ptr -0x6[bp],al 
0033    80 FB 01                  cmp         bl,0x01 
0036    74 05                     je          L$3 
0038    80 FB 02                  cmp         bl,0x02 
003B    75 05                     jne         L$4 
003D                          L$3:
003D    B8 01 00                  mov         ax,0x0001 
0040    EB 02                     jmp         L$5 
0042                          L$4:
0042    30 C0                     xor         al,al 
0044                          L$5:
0044    21 C6                     and         si,ax 
0046    80 7E FA 00               cmp         byte ptr -0x6[bp],0x00 
004A    74 05                     je          L$6 
004C    BA 01 00                  mov         dx,0x0001 
004F    EB 02                     jmp         L$7 
0051                          L$6:
0051    31 D2                     xor         dx,dx 
0053                          L$7:
0053    21 D6                     and         si,dx 
0055    74 0C                     je          L$8 
0057    8A 4E FA                  mov         cl,byte ptr -0x6[bp] 
005A    B0 01                     mov         al,0x01 
005C    D2 E0                     shl         al,cl 
005E    88 46 FA                  mov         byte ptr -0x6[bp],al 
0061    EB 04                     jmp         L$9 
0063                          L$8:
0063    C6 46 FE 00               mov         byte ptr -0x2[bp],0x00 
0067                          L$9:
0067    85 F6                     test        si,si 
0069    74 05                     je          L$10 
006B    B8 7D 00                  mov         ax,offset DGROUP:L$237 
006E    EB 03                     jmp         L$11 
0070                          L$10:
0070    B8 80 00                  mov         ax,offset DGROUP:L$238 
0073                          L$11:
0073    8C DB                     mov         bx,ds 
0075    53                        push        bx 
0076    50                        push        ax 
0077    1E                        push        ds 
0078    68 84 00                  push        offset DGROUP:L$239 
007B    E8 00 00                  call        _cprintf 
007E    83 C4 08                  add         sp,0x0008 
0081    85 F6                     test        si,si 
0083    74 38                     je          L$16 
0085    8A 46 FA                  mov         al,byte ptr -0x6[bp] 
0088    30 E4                     xor         ah,ah 
008A    50                        push        ax 
008B    3C 08                     cmp         al,0x08 
008D    75 05                     jne         L$12 
008F    B8 A7 00                  mov         ax,offset DGROUP:L$240 
0092    EB 03                     jmp         L$13 
0094                          L$12:
0094    B8 A9 00                  mov         ax,offset DGROUP:L$241 
0097                          L$13:
0097    8C DB                     mov         bx,ds 
0099    53                        push        bx 
009A    50                        push        ax 
009B    80 7E FE 01               cmp         byte ptr -0x2[bp],0x01 
009F    75 05                     jne         L$14 
00A1    BA AA 00                  mov         dx,offset DGROUP:L$242 
00A4    EB 03                     jmp         L$15 
00A6                          L$14:
00A6    BA AE 00                  mov         dx,offset DGROUP:L$243 
00A9                          L$15:
00A9    8C DB                     mov         bx,ds 
00AB    53                        push        bx 
00AC    52                        push        dx 
00AD    8A 56 FE                  mov         dl,byte ptr -0x2[bp] 
00B0    30 F6                     xor         dh,dh 
00B2    52                        push        dx 
00B3    1E                        push        ds 
00B4    68 B4 00                  push        offset DGROUP:L$244 
00B7    E8 00 00                  call        _cprintf 
00BA    83 C4 10                  add         sp,0x0010 
00BD                          L$16:
00BD    BE 01 00                  mov         si,0x0001 
00C0                          L$17:
00C0    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
00C3    30 E4                     xor         ah,ah 
00C5    50                        push        ax 
00C6    1E                        push        ds 
00C7    68 E8 00                  push        offset DGROUP:L$245 
00CA    E8 00 00                  call        _cprintf 
00CD    83 C4 06                  add         sp,0x0006 
00D0    BB 50 00                  mov         bx,0x0050 
00D3    8C D2                     mov         dx,ss 
00D5    8D 46 AA                  lea         ax,-0x56[bp] 
00D8    E8 00 00                  call        getline_ 
00DB    16                        push        ss 
00DC    07                        pop         es 
00DD    8D 5E AA                  lea         bx,-0x56[bp] 
00E0                          L$18:
00E0    26 8A 07                  mov         al,byte ptr es:[bx] 
00E3    3C 20                     cmp         al,0x20 
00E5    74 04                     je          L$19 
00E7    3C 09                     cmp         al,0x09 
00E9    75 03                     jne         L$20 
00EB                          L$19:
00EB    43                        inc         bx 
00EC    EB F2                     jmp         L$18 
00EE                          L$20:
00EE    84 C0                     test        al,al 
00F0    74 0A                     je          L$21 
00F2    89 D8                     mov         ax,bx 
00F4    8C C2                     mov         dx,es 
00F6    E8 00 00                  call        atoi_ 
00F9    88 46 FE                  mov         byte ptr -0x2[bp],al 
00FC                          L$21:
00FC    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
00FF    84 C0                     test        al,al 
0101    75 05                     jne         L$22 
0103    88 46 FC                  mov         byte ptr -0x4[bp],al 
0106    EB 12                     jmp         L$24 
0108                          L$22:
0108    3C 01                     cmp         al,0x01 
010A    75 06                     jne         L$23 
010C    C6 46 FC A5               mov         byte ptr -0x4[bp],0xa5 
0110    EB 08                     jmp         L$24 
0112                          L$23:
0112    3C 02                     cmp         al,0x02 
0114    75 AA                     jne         L$17 
0116    C6 46 FC AA               mov         byte ptr -0x4[bp],0xaa 
011A                          L$24:
011A    85 F6                     test        si,si 
011C    7C A2                     jl          L$17 
011E    8A 56 FC                  mov         dl,byte ptr -0x4[bp] 
0121    30 F6                     xor         dh,dh 
0123    B8 08 00                  mov         ax,0x0008 
0126    E8 00 00                  call        @rtc_set_loc 
0129    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
012C                          L$25:
012C    C9                        leave       
012D                          L$26:
012D    5E                        pop         si 
012E    5A                        pop         dx 
012F    59                        pop         cx 
0130    5B                        pop         bx 
0131    C3                        ret         

Routine Size: 306 bytes,    Routine Base: _TEXT + 0000

0132                          idow_:
0132    51                        push        cx 
0133    56                        push        si 
0134    57                        push        di 
0135    C8 10 00 00               enter       0x0010,0x00 
0139    50                        push        ax 
013A    52                        push        dx 
013B    89 DE                     mov         si,bx 
013D    BB 64 00                  mov         bx,0x0064 
0140    89 F0                     mov         ax,si 
0142    99                        cwd         
0143    F7 FB                     idiv        bx 
0145    31 FF                     xor         di,di 
0147                          L$27:
0147    8A 85 00 00               mov         al,byte ptr _dpm0[di] 
014B    88 43 F0                  mov         byte ptr -0x10[bp+di],al 
014E    47                        inc         di 
014F    83 FF 0C                  cmp         di,0x000c 
0152    7C F3                     jl          L$27 
0154    81 FE 2F 06               cmp         si,0x062f 
0158    7C 19                     jl          L$28 
015A    81 FE 0F 27               cmp         si,0x270f 
015E    7F 13                     jg          L$28 
0160    8B 46 EC                  mov         ax,word ptr -0x14[bp] 
0163    3D 01 00                  cmp         ax,0x0001 
0166    7C 0B                     jl          L$28 
0168    3D 0C 00                  cmp         ax,0x000c 
016B    7F 06                     jg          L$28 
016D    83 7E EE 01               cmp         word ptr -0x12[bp],0x0001 
0171    7D 06                     jge         L$29 
0173                          L$28:
0173    B8 63 00                  mov         ax,0x0063 
0176    E9 B4 00                  jmp         L$38 
0179                          L$29:
0179    89 D0                     mov         ax,dx 
017B    C1 F8 0F                  sar         ax,0x0f 
017E    89 D3                     mov         bx,dx 
0180    31 C3                     xor         bx,ax 
0182    29 C3                     sub         bx,ax 
0184    83 E3 03                  and         bx,0x0003 
0187    31 C3                     xor         bx,ax 
0189    29 C3                     sub         bx,ax 
018B    75 04                     jne         L$30 
018D    85 D2                     test        dx,dx 
018F    75 0C                     jne         L$31 
0191                          L$30:
0191    BB 90 01                  mov         bx,0x0190 
0194    89 F0                     mov         ax,si 
0196    99                        cwd         
0197    F7 FB                     idiv        bx 
0199    85 D2                     test        dx,dx 
019B    75 05                     jne         L$32 
019D                          L$31:
019D    BB 01 00                  mov         bx,0x0001 
01A0    EB 02                     jmp         L$33 
01A2                          L$32:
01A2    31 DB                     xor         bx,bx 
01A4                          L$33:
01A4    89 5E FE                  mov         word ptr -0x2[bp],bx 
01A7    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
01AA    00 46 FB                  add         byte ptr -0x5[bp],al 
01AD    83 6E EC 03               sub         word ptr -0x14[bp],0x0003 
01B1    83 7E EC 00               cmp         word ptr -0x14[bp],0x0000 
01B5    7D 05                     jge         L$34 
01B7    83 46 EC 0C               add         word ptr -0x14[bp],0x000c 
01BB    4E                        dec         si 
01BC                          L$34:
01BC    8B 7E EC                  mov         di,word ptr -0x14[bp] 
01BF    8A 43 F0                  mov         al,byte ptr -0x10[bp+di] 
01C2    30 E4                     xor         ah,ah 
01C4    3B 46 EE                  cmp         ax,word ptr -0x12[bp] 
01C7    7D 05                     jge         L$35 
01C9    B8 62 00                  mov         ax,0x0062 
01CC    EB 5F                     jmp         L$38 
01CE                          L$35:
01CE    BB 64 00                  mov         bx,0x0064 
01D1    89 F0                     mov         ax,si 
01D3    99                        cwd         
01D4    F7 FB                     idiv        bx 
01D6    89 46 FC                  mov         word ptr -0x4[bp],ax 
01D9    89 F0                     mov         ax,si 
01DB    99                        cwd         
01DC    F7 FB                     idiv        bx 
01DE    89 D6                     mov         si,dx 
01E0    C7 46 FE 00 00            mov         word ptr -0x2[bp],0x0000 
01E5                          L$36:
01E5    8B 5E FE                  mov         bx,word ptr -0x2[bp] 
01E8    3B 5E EC                  cmp         bx,word ptr -0x14[bp] 
01EB    7D 0F                     jge         L$37 
01ED    89 DF                     mov         di,bx 
01EF    8A 43 F0                  mov         al,byte ptr -0x10[bp+di] 
01F2    30 E4                     xor         ah,ah 
01F4    01 46 EE                  add         word ptr -0x12[bp],ax 
01F7    FF 46 FE                  inc         word ptr -0x2[bp] 
01FA    EB E9                     jmp         L$36 
01FC                          L$37:
01FC    6B 5E FC 05               imul        bx,word ptr -0x4[bp],0x0005 
0200    01 F3                     add         bx,si 
0202    89 F0                     mov         ax,si 
0204    99                        cwd         
0205    B1 02                     mov         cl,0x02 
0207    D3 E2                     shl         dx,cl 
0209    1B C2                     sbb         ax,dx 
020B    D3 F8                     sar         ax,cl 
020D    01 C3                     add         bx,ax 
020F    8B 46 FC                  mov         ax,word ptr -0x4[bp] 
0212    99                        cwd         
0213    B1 02                     mov         cl,0x02 
0215    D3 E2                     shl         dx,cl 
0217    1B C2                     sbb         ax,dx 
0219    D3 F8                     sar         ax,cl 
021B    01 D8                     add         ax,bx 
021D    40                        inc         ax 
021E    40                        inc         ax 
021F    01 46 EE                  add         word ptr -0x12[bp],ax 
0222    BB 07 00                  mov         bx,0x0007 
0225    8B 46 EE                  mov         ax,word ptr -0x12[bp] 
0228    99                        cwd         
0229    F7 FB                     idiv        bx 
022B    89 D0                     mov         ax,dx 
022D                          L$38:
022D    C9                        leave       
022E    5F                        pop         di 
022F    5E                        pop         si 
0230    59                        pop         cx 
0231    C3                        ret         

Routine Size: 256 bytes,    Routine Base: _TEXT + 0132

0232                          Date_:
0232    53                        push        bx 
0233    51                        push        cx 
0234    56                        push        si 
0235    57                        push        di 
0236    C8 6E 00 00               enter       0x006e,0x00 
023A    50                        push        ax 
023B    52                        push        dx 
023C    B8 03 00                  mov         ax,0x0003 
023F    E8 00 00                  call        @rtc_get_loc 
0242    88 46 FE                  mov         byte ptr -0x2[bp],al 
0245    B8 04 00                  mov         ax,0x0004 
0248    E8 00 00                  call        @rtc_get_loc 
024B    88 46 F8                  mov         byte ptr -0x8[bp],al 
024E    B8 05 00                  mov         ax,0x0005 
0251    E8 00 00                  call        @rtc_get_loc 
0254    88 46 F6                  mov         byte ptr -0xa[bp],al 
0257    88 46 FA                  mov         byte ptr -0x6[bp],al 
025A    B8 06 00                  mov         ax,0x0006 
025D    E8 00 00                  call        @rtc_get_loc 
0260    88 46 F4                  mov         byte ptr -0xc[bp],al 
0263    B8 01 80                  mov         ax,0x8001 
0266    E8 00 00                  call        @rtc_get_loc 
0269    88 46 FC                  mov         byte ptr -0x4[bp],al 
026C    8A 46 F6                  mov         al,byte ptr -0xa[bp] 
026F    3C 01                     cmp         al,0x01 
0271    72 04                     jb          L$39 
0273    3C 07                     cmp         al,0x07 
0275    76 04                     jbe         L$40 
0277                          L$39:
0277    C6 46 FA 08               mov         byte ptr -0x6[bp],0x08 
027B                          L$40:
027B    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
027E    84 C0                     test        al,al 
0280    75 16                     jne         L$41 
0282    B0 01                     mov         al,0x01 
0284    88 46 F8                  mov         byte ptr -0x8[bp],al 
0287    88 46 FE                  mov         byte ptr -0x2[bp],al 
028A    C6 46 FA 03               mov         byte ptr -0x6[bp],0x03 
028E    C6 46 F4 80               mov         byte ptr -0xc[bp],0x80 
0292    C6 46 FC 19               mov         byte ptr -0x4[bp],0x19 
0296    EB 0A                     jmp         L$42 
0298                          L$41:
0298    8E 46 8E                  mov         es,word ptr -0x72[bp] 
029B    8B 5E 90                  mov         bx,word ptr -0x70[bp] 
029E    26 88 47 01               mov         byte ptr es:0x1[bx],al 
02A2                          L$42:
02A2    8A 46 F4                  mov         al,byte ptr -0xc[bp] 
02A5    30 E4                     xor         ah,ah 
02A7    50                        push        ax 
02A8    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
02AB    50                        push        ax 
02AC    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
02AF    50                        push        ax 
02B0    8A 46 F8                  mov         al,byte ptr -0x8[bp] 
02B3    50                        push        ax 
02B4    8A 5E FA                  mov         bl,byte ptr -0x6[bp] 
02B7    30 FF                     xor         bh,bh 
02B9    C1 E3 02                  shl         bx,0x02 
02BC    FF B7 FE FF               push        word ptr _dow-0x2[bx] 
02C0    FF B7 FC FF               push        word ptr _dow-0x4[bx] 
02C4    1E                        push        ds 
02C5    68 2F 01                  push        offset DGROUP:L$246 
02C8    E8 00 00                  call        _cprintf 
02CB    83 C4 10                  add         sp,0x0010 
02CE    1E                        push        ds 
02CF    68 52 01                  push        offset DGROUP:L$247 
02D2    E8 00 00                  call        _cprintf 
02D5    83 C4 04                  add         sp,0x0004 
02D8    BB 50 00                  mov         bx,0x0050 
02DB    8C D2                     mov         dx,ss 
02DD    8D 46 92                  lea         ax,-0x6e[bp] 
02E0    E8 00 00                  call        getline_ 
02E3    8A 46 92                  mov         al,byte ptr -0x6e[bp] 
02E6    84 C0                     test        al,al 
02E8    75 05                     jne         L$43 
02EA    30 E4                     xor         ah,ah 
02EC    E9 E9 01                  jmp         L$62 
02EF                          L$43:
02EF    B1 2F                     mov         cl,0x2f 
02F1    8C D2                     mov         dx,ss 
02F3    8D 76 92                  lea         si,-0x6e[bp] 
02F6    1E                        push        ds 
02F7    8E DA                     mov         ds,dx 
02F9                          L$44:
02F9    8A 04                     mov         al,byte ptr [si] 
02FB    3A C1                     cmp         al,cl 
02FD    74 09                     je          L$45 
02FF    46                        inc         si 
0300    3C 00                     cmp         al,0x00 
0302    75 F5                     jne         L$44 
0304    2B F6                     sub         si,si 
0306    2B D2                     sub         dx,dx 
0308                          L$45:
0308    1F                        pop         ds 
0309    89 56 E2                  mov         word ptr -0x1e[bp],dx 
030C    85 D2                     test        dx,dx 
030E    75 09                     jne         L$47 
0310    85 F6                     test        si,si 
0312    75 05                     jne         L$47 
0314                          L$46:
0314    31 C0                     xor         ax,ax 
0316    E9 BF 01                  jmp         L$62 
0319                          L$47:
0319    8E C2                     mov         es,dx 
031B    26 C6 04 00               mov         byte ptr es:[si],0x00 
031F    8D 5C 01                  lea         bx,0x1[si] 
0322    8C D2                     mov         dx,ss 
0324    8D 46 92                  lea         ax,-0x6e[bp] 
0327    E8 00 00                  call        atoi_ 
032A    89 C7                     mov         di,ax 
032C    89 DE                     mov         si,bx 
032E    8B 56 E2                  mov         dx,word ptr -0x1e[bp] 
0331    1E                        push        ds 
0332    8E DA                     mov         ds,dx 
0334                          L$48:
0334    8A 04                     mov         al,byte ptr [si] 
0336    3A C1                     cmp         al,cl 
0338    74 09                     je          L$49 
033A    46                        inc         si 
033B    3C 00                     cmp         al,0x00 
033D    75 F5                     jne         L$48 
033F    2B F6                     sub         si,si 
0341    2B D2                     sub         dx,dx 
0343                          L$49:
0343    1F                        pop         ds 
0344    89 D1                     mov         cx,dx 
0346    85 D2                     test        dx,dx 
0348    75 04                     jne         L$50 
034A    85 F6                     test        si,si 
034C    74 C6                     je          L$46 
034E                          L$50:
034E    8E C2                     mov         es,dx 
0350    26 C6 04 00               mov         byte ptr es:[si],0x00 
0354    46                        inc         si 
0355    89 D8                     mov         ax,bx 
0357    8B 56 E2                  mov         dx,word ptr -0x1e[bp] 
035A    E8 00 00                  call        atoi_ 
035D    89 46 E4                  mov         word ptr -0x1c[bp],ax 
0360    89 F0                     mov         ax,si 
0362    89 CA                     mov         dx,cx 
0364    E8 00 00                  call        atoi_ 
0367    89 C6                     mov         si,ax 
0369    3D 63 00                  cmp         ax,0x0063 
036C    7F 0C                     jg          L$52 
036E    3D 50 00                  cmp         ax,0x0050 
0371    7D 03                     jge         L$51 
0373    83 C6 64                  add         si,0x0064 
0376                          L$51:
0376    81 C6 6C 07               add         si,0x076c 
037A                          L$52:
037A    56                        push        si 
037B    FF 76 E4                  push        word ptr -0x1c[bp] 
037E    57                        push        di 
037F    1E                        push        ds 
0380    68 66 01                  push        offset DGROUP:L$248 
0383    E8 00 00                  call        _cprintf 
0386    83 C4 0A                  add         sp,0x000a 
0389    83 FF 64                  cmp         di,0x0064 
038C    7D 16                     jge         L$53 
038E    89 F8                     mov         ax,di 
0390    99                        cwd         
0391    BB 0A 00                  mov         bx,0x000a 
0394    F7 FB                     idiv        bx 
0396    89 C1                     mov         cx,ax 
0398    C1 E1 04                  shl         cx,0x04 
039B    89 F8                     mov         ax,di 
039D    99                        cwd         
039E    F7 FB                     idiv        bx 
03A0    09 D1                     or          cx,dx 
03A2    EB 03                     jmp         L$54 
03A4                          L$53:
03A4    B9 FF 00                  mov         cx,0x00ff 
03A7                          L$54:
03A7    88 4E F8                  mov         byte ptr -0x8[bp],cl 
03AA    8B 46 E4                  mov         ax,word ptr -0x1c[bp] 
03AD    3D 64 00                  cmp         ax,0x0064 
03B0    7D 15                     jge         L$55 
03B2    99                        cwd         
03B3    BB 0A 00                  mov         bx,0x000a 
03B6    F7 FB                     idiv        bx 
03B8    89 C1                     mov         cx,ax 
03BA    C1 E1 04                  shl         cx,0x04 
03BD    8B 46 E4                  mov         ax,word ptr -0x1c[bp] 
03C0    99                        cwd         
03C1    F7 FB                     idiv        bx 
03C3    09 D1                     or          cx,dx 
03C5    EB 03                     jmp         L$56 
03C7                          L$55:
03C7    B9 FF 00                  mov         cx,0x00ff 
03CA                          L$56:
03CA    88 4E FE                  mov         byte ptr -0x2[bp],cl 
03CD    89 F0                     mov         ax,si 
03CF    99                        cwd         
03D0    BB 64 00                  mov         bx,0x0064 
03D3    F7 FB                     idiv        bx 
03D5    89 C1                     mov         cx,ax 
03D7    39 D8                     cmp         ax,bx 
03D9    7D 1B                     jge         L$57 
03DB    99                        cwd         
03DC    BB 0A 00                  mov         bx,0x000a 
03DF    F7 FB                     idiv        bx 
03E1    C1 E0 04                  shl         ax,0x04 
03E4    89 46 EA                  mov         word ptr -0x16[bp],ax 
03E7    89 C8                     mov         ax,cx 
03E9    99                        cwd         
03EA    F7 FB                     idiv        bx 
03EC    8B 46 EA                  mov         ax,word ptr -0x16[bp] 
03EF    09 D0                     or          ax,dx 
03F1    89 46 F2                  mov         word ptr -0xe[bp],ax 
03F4    EB 05                     jmp         L$58 
03F6                          L$57:
03F6    C7 46 F2 FF 00            mov         word ptr -0xe[bp],0x00ff 
03FB                          L$58:
03FB    8A 46 F2                  mov         al,byte ptr -0xe[bp] 
03FE    88 46 FC                  mov         byte ptr -0x4[bp],al 
0401    89 F0                     mov         ax,si 
0403    99                        cwd         
0404    BB 64 00                  mov         bx,0x0064 
0407    F7 FB                     idiv        bx 
0409    89 D1                     mov         cx,dx 
040B    39 DA                     cmp         dx,bx 
040D    7D 1D                     jge         L$59 
040F    89 D0                     mov         ax,dx 
0411    99                        cwd         
0412    BB 0A 00                  mov         bx,0x000a 
0415    F7 FB                     idiv        bx 
0417    C1 E0 04                  shl         ax,0x04 
041A    89 46 EA                  mov         word ptr -0x16[bp],ax 
041D    89 C8                     mov         ax,cx 
041F    99                        cwd         
0420    F7 FB                     idiv        bx 
0422    8B 46 EA                  mov         ax,word ptr -0x16[bp] 
0425    09 D0                     or          ax,dx 
0427    89 46 F0                  mov         word ptr -0x10[bp],ax 
042A    EB 05                     jmp         L$60 
042C                          L$59:
042C    C7 46 F0 FF 00            mov         word ptr -0x10[bp],0x00ff 
0431                          L$60:
0431    89 F3                     mov         bx,si 
0433    89 FA                     mov         dx,di 
0435    8B 46 E4                  mov         ax,word ptr -0x1c[bp] 
0438    E8 00 00                  call        idow_ 
043B    3C 07                     cmp         al,0x07 
043D    76 10                     jbe         L$61 
043F    30 E4                     xor         ah,ah 
0441    50                        push        ax 
0442    1E                        push        ds 
0443    68 7E 01                  push        offset DGROUP:L$249 
0446    E8 00 00                  call        _cprintf 
0449    83 C4 06                  add         sp,0x0006 
044C    E9 C5 FE                  jmp         L$46 
044F                          L$61:
044F    FE C0                     inc         al 
0451    88 46 FA                  mov         byte ptr -0x6[bp],al 
0454    88 46 EA                  mov         byte ptr -0x16[bp],al 
0457    C6 46 EB 00               mov         byte ptr -0x15[bp],0x00 
045B    FF 76 EA                  push        word ptr -0x16[bp] 
045E    8A 46 F0                  mov         al,byte ptr -0x10[bp] 
0461    88 46 E6                  mov         byte ptr -0x1a[bp],al 
0464    C6 46 E7 00               mov         byte ptr -0x19[bp],0x00 
0468    FF 76 E6                  push        word ptr -0x1a[bp] 
046B    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
046E    88 46 E8                  mov         byte ptr -0x18[bp],al 
0471    C6 46 E9 00               mov         byte ptr -0x17[bp],0x00 
0475    FF 76 E8                  push        word ptr -0x18[bp] 
0478    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
047B    88 46 EC                  mov         byte ptr -0x14[bp],al 
047E    C6 46 ED 00               mov         byte ptr -0x13[bp],0x00 
0482    FF 76 EC                  push        word ptr -0x14[bp] 
0485    8A 46 F8                  mov         al,byte ptr -0x8[bp] 
0488    88 46 EE                  mov         byte ptr -0x12[bp],al 
048B    C6 46 EF 00               mov         byte ptr -0x11[bp],0x00 
048F    FF 76 EE                  push        word ptr -0x12[bp] 
0492    1E                        push        ds 
0493    68 A0 01                  push        offset DGROUP:L$250 
0496    E8 00 00                  call        _cprintf 
0499    83 C4 0E                  add         sp,0x000e 
049C    31 D2                     xor         dx,dx 
049E    B8 07 00                  mov         ax,0x0007 
04A1    E8 00 00                  call        @rtc_set_loc 
04A4    8B 56 EC                  mov         dx,word ptr -0x14[bp] 
04A7    B8 03 00                  mov         ax,0x0003 
04AA    E8 00 00                  call        @rtc_set_loc 
04AD    8B 56 EE                  mov         dx,word ptr -0x12[bp] 
04B0    B8 04 00                  mov         ax,0x0004 
04B3    E8 00 00                  call        @rtc_set_loc 
04B6    8B 56 EA                  mov         dx,word ptr -0x16[bp] 
04B9    B8 05 00                  mov         ax,0x0005 
04BC    E8 00 00                  call        @rtc_set_loc 
04BF    8B 56 E6                  mov         dx,word ptr -0x1a[bp] 
04C2    B8 06 00                  mov         ax,0x0006 
04C5    E8 00 00                  call        @rtc_set_loc 
04C8    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
04CB    8E 46 8E                  mov         es,word ptr -0x72[bp] 
04CE    8B 5E 90                  mov         bx,word ptr -0x70[bp] 
04D1    26 88 47 01               mov         byte ptr es:0x1[bx],al 
04D5    8B 46 E8                  mov         ax,word ptr -0x18[bp] 
04D8                          L$62:
04D8    C9                        leave       
04D9    5F                        pop         di 
04DA                          L$63:
04DA    5E                        pop         si 
04DB    59                        pop         cx 
04DC    5B                        pop         bx 
04DD    C3                        ret         

Routine Size: 684 bytes,    Routine Base: _TEXT + 0232

04DE                          Time_:
04DE    53                        push        bx 
04DF    51                        push        cx 
04E0    52                        push        dx 
04E1    56                        push        si 
04E2    57                        push        di 
04E3    C8 5A 00 00               enter       0x005a,0x00 
04E7    31 C0                     xor         ax,ax 
04E9    E8 00 00                  call        @rtc_get_loc 
04EC    88 46 F6                  mov         byte ptr -0xa[bp],al 
04EF    C6 46 F7 00               mov         byte ptr -0x9[bp],0x00 
04F3    8B 46 F6                  mov         ax,word ptr -0xa[bp] 
04F6    89 46 FA                  mov         word ptr -0x6[bp],ax 
04F9    B8 01 00                  mov         ax,0x0001 
04FC    E8 00 00                  call        @rtc_get_loc 
04FF    88 46 FC                  mov         byte ptr -0x4[bp],al 
0502    C6 46 FD 00               mov         byte ptr -0x3[bp],0x00 
0506    8B 7E FC                  mov         di,word ptr -0x4[bp] 
0509    B8 02 00                  mov         ax,0x0002 
050C    E8 00 00                  call        @rtc_get_loc 
050F    88 C3                     mov         bl,al 
0511    30 FF                     xor         bh,bh 
0513    89 5E FE                  mov         word ptr -0x2[bp],bx 
0516    F6 46 FA 80               test        byte ptr -0x6[bp],0x80 
051A    74 0C                     je          L$64 
051C    1E                        push        ds 
051D    68 DC 01                  push        offset DGROUP:L$251 
0520    E8 00 00                  call        _cprintf 
0523    83 C4 04                  add         sp,0x0004 
0526    EB 0F                     jmp         L$65 
0528                          L$64:
0528    FF 76 F6                  push        word ptr -0xa[bp] 
052B    57                        push        di 
052C    53                        push        bx 
052D    1E                        push        ds 
052E    68 F3 01                  push        offset DGROUP:L$252 
0531    E8 00 00                  call        _cprintf 
0534    83 C4 0A                  add         sp,0x000a 
0537                          L$65:
0537    1E                        push        ds 
0538    68 0F 02                  push        offset DGROUP:L$253 
053B    E8 00 00                  call        _cprintf 
053E    83 C4 04                  add         sp,0x0004 
0541    BB 50 00                  mov         bx,0x0050 
0544    8C D2                     mov         dx,ss 
0546    8D 46 A6                  lea         ax,-0x5a[bp] 
0549    E8 00 00                  call        getline_ 
054C    80 7E A6 00               cmp         byte ptr -0x5a[bp],0x00 
0550    74 65                     je          L$71 
0552    B1 3A                     mov         cl,0x3a 
0554    8C D2                     mov         dx,ss 
0556    8D 76 A6                  lea         si,-0x5a[bp] 
0559    1E                        push        ds 
055A    8E DA                     mov         ds,dx 
055C                          L$66:
055C    8A 04                     mov         al,byte ptr [si] 
055E    3A C1                     cmp         al,cl 
0560    74 09                     je          L$67 
0562    46                        inc         si 
0563    3C 00                     cmp         al,0x00 
0565    75 F5                     jne         L$66 
0567    2B F6                     sub         si,si 
0569    2B D2                     sub         dx,dx 
056B                          L$67:
056B    1F                        pop         ds 
056C    89 D3                     mov         bx,dx 
056E    85 D2                     test        dx,dx 
0570    75 04                     jne         L$68 
0572    85 F6                     test        si,si 
0574    74 69                     je          L$75 
0576                          L$68:
0576    8E C2                     mov         es,dx 
0578    26 C6 04 00               mov         byte ptr es:[si],0x00 
057C    89 56 F8                  mov         word ptr -0x8[bp],dx 
057F    8D 7C 01                  lea         di,0x1[si] 
0582    8C D2                     mov         dx,ss 
0584    8D 46 A6                  lea         ax,-0x5a[bp] 
0587    E8 00 00                  call        atoi_ 
058A    89 46 FE                  mov         word ptr -0x2[bp],ax 
058D    89 FE                     mov         si,di 
058F    89 DA                     mov         dx,bx 
0591    1E                        push        ds 
0592    8E DA                     mov         ds,dx 
0594                          L$69:
0594    8A 04                     mov         al,byte ptr [si] 
0596    3A C1                     cmp         al,cl 
0598    74 09                     je          L$70 
059A    46                        inc         si 
059B    3C 00                     cmp         al,0x00 
059D    75 F5                     jne         L$69 
059F    2B F6                     sub         si,si 
05A1    2B D2                     sub         dx,dx 
05A3                          L$70:
05A3    1F                        pop         ds 
05A4    89 F1                     mov         cx,si 
05A6    89 D3                     mov         bx,dx 
05A8    85 D2                     test        dx,dx 
05AA    75 0E                     jne         L$72 
05AC    85 F6                     test        si,si 
05AE    75 0A                     jne         L$72 
05B0    C7 46 FA 00 00            mov         word ptr -0x6[bp],0x0000 
05B5    EB 0C                     jmp         L$73 
05B7                          L$71:
05B7    E9 E5 00                  jmp         L$84 
05BA                          L$72:
05BA    8E C2                     mov         es,dx 
05BC    26 C6 04 00               mov         byte ptr es:[si],0x00 
05C0    8D 4C 01                  lea         cx,0x1[si] 
05C3                          L$73:
05C3    89 F8                     mov         ax,di 
05C5    8B 56 F8                  mov         dx,word ptr -0x8[bp] 
05C8    E8 00 00                  call        atoi_ 
05CB    89 C7                     mov         di,ax 
05CD    85 DB                     test        bx,bx 
05CF    75 04                     jne         L$74 
05D1    85 C9                     test        cx,cx 
05D3    74 0A                     je          L$75 
05D5                          L$74:
05D5    89 C8                     mov         ax,cx 
05D7    89 DA                     mov         dx,bx 
05D9    E8 00 00                  call        atoi_ 
05DC    89 46 FA                  mov         word ptr -0x6[bp],ax 
05DF                          L$75:
05DF    83 7E FE 17               cmp         word ptr -0x2[bp],0x0017 
05E3    76 03                     jbe         L$77 
05E5                          L$76:
05E5    E9 4F FF                  jmp         L$65 
05E8                          L$77:
05E8    83 FF 3B                  cmp         di,0x003b 
05EB    77 F8                     ja          L$76 
05ED    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
05F0    3D 3B 00                  cmp         ax,0x003b 
05F3    77 F0                     ja          L$76 
05F5    50                        push        ax 
05F6    57                        push        di 
05F7    FF 76 FE                  push        word ptr -0x2[bp] 
05FA    1E                        push        ds 
05FB    68 23 02                  push        offset DGROUP:L$254 
05FE    E8 00 00                  call        _cprintf 
0601    83 C4 0A                  add         sp,0x000a 
0604    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
0607    3D 64 00                  cmp         ax,0x0064 
060A    73 19                     jae         L$78 
060C    31 D2                     xor         dx,dx 
060E    BB 0A 00                  mov         bx,0x000a 
0611    F7 F3                     div         bx 
0613    89 C1                     mov         cx,ax 
0615    C1 E1 04                  shl         cx,0x04 
0618    8B 46 FA                  mov         ax,word ptr -0x6[bp] 
061B    31 D2                     xor         dx,dx 
061D    F7 F3                     div         bx 
061F    89 CB                     mov         bx,cx 
0621    09 D3                     or          bx,dx 
0623    EB 03                     jmp         L$79 
0625                          L$78:
0625    BB FF 00                  mov         bx,0x00ff 
0628                          L$79:
0628    88 DA                     mov         dl,bl 
062A    30 F6                     xor         dh,dh 
062C    89 56 FA                  mov         word ptr -0x6[bp],dx 
062F    8A 56 FA                  mov         dl,byte ptr -0x6[bp] 
0632    80 CA 80                  or          dl,0x80 
0635    31 C0                     xor         ax,ax 
0637    E8 00 00                  call        @rtc_set_loc 
063A    83 FF 64                  cmp         di,0x0064 
063D    73 1B                     jae         L$80 
063F    89 F8                     mov         ax,di 
0641    31 D2                     xor         dx,dx 
0643    BB 0A 00                  mov         bx,0x000a 
0646    F7 F3                     div         bx 
0648    89 C3                     mov         bx,ax 
064A    C1 E3 04                  shl         bx,0x04 
064D    89 F8                     mov         ax,di 
064F    31 D2                     xor         dx,dx 
0651    B9 0A 00                  mov         cx,0x000a 
0654    F7 F1                     div         cx 
0656    09 D3                     or          bx,dx 
0658    EB 03                     jmp         L$81 
065A                          L$80:
065A    BB FF 00                  mov         bx,0x00ff 
065D                          L$81:
065D    88 DA                     mov         dl,bl 
065F    30 F6                     xor         dh,dh 
0661    B8 01 00                  mov         ax,0x0001 
0664    E8 00 00                  call        @rtc_set_loc 
0667    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
066A    3D 64 00                  cmp         ax,0x0064 
066D    73 19                     jae         L$82 
066F    31 D2                     xor         dx,dx 
0671    BB 0A 00                  mov         bx,0x000a 
0674    F7 F3                     div         bx 
0676    89 C1                     mov         cx,ax 
0678    C1 E1 04                  shl         cx,0x04 
067B    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
067E    31 D2                     xor         dx,dx 
0680    F7 F3                     div         bx 
0682    89 CB                     mov         bx,cx 
0684    09 D3                     or          bx,dx 
0686    EB 03                     jmp         L$83 
0688                          L$82:
0688    BB FF 00                  mov         bx,0x00ff 
068B                          L$83:
068B    88 DA                     mov         dl,bl 
068D    30 F6                     xor         dh,dh 
068F    B8 02 00                  mov         ax,0x0002 
0692    E8 00 00                  call        @rtc_set_loc 
0695    8A 56 FA                  mov         dl,byte ptr -0x6[bp] 
0698    30 F6                     xor         dh,dh 
069A    31 C0                     xor         ax,ax 
069C    E8 00 00                  call        @rtc_set_loc 
069F                          L$84:
069F    C9                        leave       
06A0    5F                        pop         di 
06A1    E9 89 FA                  jmp         L$26 

Routine Size: 454 bytes,    Routine Base: _TEXT + 04DE

06A4                          setup_serial_:
06A4    53                        push        bx 
06A5    51                        push        cx 
06A6    52                        push        dx 
06A7    56                        push        si 
06A8    57                        push        di 
06A9    C8 0E 00 00               enter       0x000e,0x00 
06AD    88 46 FE                  mov         byte ptr -0x2[bp],al 
06B0                          L$85:
06B0    8A 5E FE                  mov         bl,byte ptr -0x2[bp] 
06B3    30 FF                     xor         bh,bh 
06B5    C1 E3 02                  shl         bx,0x02 
06B8    FF B7 02 00               push        word ptr _rates+0x2[bx] 
06BC    FF B7 00 00               push        word ptr _rates[bx] 
06C0    1E                        push        ds 
06C1    68 39 02                  push        offset DGROUP:L$255 
06C4    E8 00 00                  call        _cprintf 
06C7    83 C4 08                  add         sp,0x0008 
06CA    BB 0A 00                  mov         bx,0x000a 
06CD    8C D2                     mov         dx,ss 
06CF    8D 46 F2                  lea         ax,-0xe[bp] 
06D2    E8 00 00                  call        getline_ 
06D5    80 7E F2 00               cmp         byte ptr -0xe[bp],0x00 
06D9    74 07                     je          L$86 
06DB    C7 46 FC 00 00            mov         word ptr -0x4[bp],0x0000 
06E0    EB 0C                     jmp         L$88 
06E2                          L$86:
06E2    E9 79 00                  jmp         L$93 
06E5                          L$87:
06E5    FF 46 FC                  inc         word ptr -0x4[bp] 
06E8    83 7E FC 08               cmp         word ptr -0x4[bp],0x0008 
06EC    7D 2D                     jge         L$91 
06EE                          L$88:
06EE    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
06F1    C1 E3 02                  shl         bx,0x02 
06F4    C4 BF 00 00               les         di,dword ptr _rates[bx] 
06F8    8C D6                     mov         si,ss 
06FA    8D 46 F2                  lea         ax,-0xe[bp] 
06FD    1E                        push        ds 
06FE    96                        xchg        ax,si 
06FF    8E D8                     mov         ds,ax 
0701                          L$89:
0701    AC                        lodsb       
0702    26 8A 25                  mov         ah,byte ptr es:[di] 
0705    2A C4                     sub         al,ah 
0707    75 05                     jne         L$90 
0709    47                        inc         di 
070A    3A C4                     cmp         al,ah 
070C    75 F3                     jne         L$89 
070E                          L$90:
070E    18 E4                     sbb         ah,ah 
0710    1F                        pop         ds 
0711    85 C0                     test        ax,ax 
0713    75 D0                     jne         L$87 
0715    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
0718    88 46 FE                  mov         byte ptr -0x2[bp],al 
071B                          L$91:
071B    83 7E FC 08               cmp         word ptr -0x4[bp],0x0008 
071F    75 3D                     jne         L$93 
0721    1E                        push        ds 
0722    68 64 02                  push        offset DGROUP:L$256 
0725    E8 00 00                  call        _cprintf 
0728    83 C4 04                  add         sp,0x0004 
072B    C7 46 FC 00 00            mov         word ptr -0x4[bp],0x0000 
0730                          L$92:
0730    8B 5E FC                  mov         bx,word ptr -0x4[bp] 
0733    C1 E3 02                  shl         bx,0x02 
0736    FF B7 02 00               push        word ptr _rates+0x2[bx] 
073A    FF B7 00 00               push        word ptr _rates[bx] 
073E    1E                        push        ds 
073F    68 8D 02                  push        offset DGROUP:L$257 
0742    E8 00 00                  call        _cprintf 
0745    83 C4 08                  add         sp,0x0008 
0748    FF 46 FC                  inc         word ptr -0x4[bp] 
074B    83 7E FC 08               cmp         word ptr -0x4[bp],0x0008 
074F    7C DF                     jl          L$92 
0751    1E                        push        ds 
0752    68 91 02                  push        offset DGROUP:L$258 
0755    E8 00 00                  call        _cprintf 
0758    83 C4 04                  add         sp,0x0004 
075B    E9 52 FF                  jmp         L$85 
075E                          L$93:
075E    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
0761    E9 3B FF                  jmp         L$84 

Routine Size: 192 bytes,    Routine Base: _TEXT + 06A4

0764                          floppy_ask_:
0764    51                        push        cx 
0765    56                        push        si 
0766    57                        push        di 
0767    C8 1A 00 00               enter       0x001a,0x00 
076B    89 C6                     mov         si,ax 
076D    89 D7                     mov         di,dx 
076F    89 5E FA                  mov         word ptr -0x6[bp],bx 
0772    8D 47 02                  lea         ax,0x2[bx] 
0775    01 C6                     add         si,ax 
0777    8A 46 FA                  mov         al,byte ptr -0x6[bp] 
077A    04 41                     add         al,0x41 
077C    88 46 FC                  mov         byte ptr -0x4[bp],al 
077F                          L$94:
077F    8E C7                     mov         es,di 
0781    26 8A 04                  mov         al,byte ptr es:[si] 
0784    24 0F                     and         al,0x0f 
0786    88 46 FE                  mov         byte ptr -0x2[bp],al 
0789    30 E4                     xor         ah,ah 
078B    50                        push        ax 
078C    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
078F    50                        push        ax 
0790    1E                        push        ds 
0791    68 93 02                  push        offset DGROUP:L$259 
0794    E8 00 00                  call        _cprintf 
0797    83 C4 08                  add         sp,0x0008 
079A    BB 14 00                  mov         bx,0x0014 
079D    8C D2                     mov         dx,ss 
079F    8D 46 E6                  lea         ax,-0x1a[bp] 
07A2    E8 00 00                  call        getline_ 
07A5    80 7E E6 00               cmp         byte ptr -0x1a[bp],0x00 
07A9    74 0B                     je          L$95 
07AB    8C D2                     mov         dx,ss 
07AD    8D 46 E6                  lea         ax,-0x1a[bp] 
07B0    E8 00 00                  call        atoi_ 
07B3    88 46 FE                  mov         byte ptr -0x2[bp],al 
07B6                          L$95:
07B6    8A 4E FE                  mov         cl,byte ptr -0x2[bp] 
07B9    B8 01 00                  mov         ax,0x0001 
07BC    D3 E0                     shl         ax,cl 
07BE    85 06 00 00               test        word ptr _ftype_OK,ax 
07C2    74 BB                     je          L$94 
07C4    8E C7                     mov         es,di 
07C6    26 88 0C                  mov         byte ptr es:[si],cl 
07C9    84 C9                     test        cl,cl 
07CB    75 0A                     jne         L$96 
07CD    83 7E FA 00               cmp         word ptr -0x6[bp],0x0000 
07D1    75 04                     jne         L$96 
07D3    26 88 4C 01               mov         byte ptr es:0x1[si],cl 
07D7                          L$96:
07D7    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
07DA    30 E4                     xor         ah,ah 
07DC    E9 4E FA                  jmp         L$38 

Routine Size: 123 bytes,    Routine Base: _TEXT + 0764

07DF                          Floppy_:
07DF    53                        push        bx 
07E0    51                        push        cx 
07E1    56                        push        si 
07E2    57                        push        di 
07E3    C8 02 00 00               enter       0x0002,0x00 
07E7    89 C7                     mov         di,ax 
07E9    89 56 FE                  mov         word ptr -0x2[bp],dx 
07EC    31 F6                     xor         si,si 
07EE    1E                        push        ds 
07EF    68 AE 02                  push        offset DGROUP:L$260 
07F2    E8 00 00                  call        _cprintf 
07F5    83 C4 04                  add         sp,0x0004 
07F8    31 C9                     xor         cx,cx 
07FA    EB 0C                     jmp         L$98 
07FC                          L$97:
07FC    01 C6                     add         si,ax 
07FE    41                        inc         cx 
07FF    85 D2                     test        dx,dx 
0801    74 1A                     je          L$99 
0803    83 F9 02                  cmp         cx,0x0002 
0806    7D 15                     jge         L$99 
0808                          L$98:
0808    89 CB                     mov         bx,cx 
080A    89 F8                     mov         ax,di 
080C    8B 56 FE                  mov         dx,word ptr -0x2[bp] 
080F    E8 00 00                  call        floppy_ask_ 
0812    89 C2                     mov         dx,ax 
0814    85 C0                     test        ax,ax 
0816    74 E4                     je          L$97 
0818    B8 01 00                  mov         ax,0x0001 
081B    EB DF                     jmp         L$97 
081D                          L$99:
081D    83 FE 01                  cmp         si,0x0001 
0820    76 06                     jbe         L$100 
0822    1E                        push        ds 
0823    68 21 03                  push        offset DGROUP:L$261 
0826    EB 0B                     jmp         L$103 
0828                          L$100:
0828    85 F6                     test        si,si 
082A    75 03                     jne         L$102 
082C                          L$101:
082C    E9 A9 FC                  jmp         L$62 
082F                          L$102:
082F    1E                        push        ds 
0830    68 66 03                  push        offset DGROUP:L$262 
0833                          L$103:
0833    E8 00 00                  call        _cprintf 
0836    83 C4 04                  add         sp,0x0004 
0839    EB F1                     jmp         L$101 

Routine Size: 92 bytes,    Routine Base: _TEXT + 07DF

083B                          @nvram_check:
083B    56                        push        si 
083C    57                        push        di 
083D    C8 06 00 00               enter       0x0006,0x00 
0841    C6 46 FE 00               mov         byte ptr -0x2[bp],0x00 
0845    BE 00 00                  mov         si,offset _unique 
0848    BF 00 00                  mov         di,seg _unique 
084B                          L$104:
084B    8E C7                     mov         es,di 
084D    26 8A 04                  mov         al,byte ptr es:[si] 
0850    46                        inc         si 
0851    84 C0                     test        al,al 
0853    74 0F                     je          L$105 
0855    8A 56 FE                  mov         dl,byte ptr -0x2[bp] 
0858    30 F6                     xor         dh,dh 
085A    30 E4                     xor         ah,ah 
085C    E8 00 00                  call        @stepCRC7 
085F    88 46 FE                  mov         byte ptr -0x2[bp],al 
0862    EB E7                     jmp         L$104 
0864                          L$105:
0864    31 F6                     xor         si,si 
0866                          L$106:
0866    89 F0                     mov         ax,si 
0868    80 CC 80                  or          ah,0x80 
086B    E8 00 00                  call        @rtc_get_loc 
086E    8A 56 FE                  mov         dl,byte ptr -0x2[bp] 
0871    30 F6                     xor         dh,dh 
0873    30 E4                     xor         ah,ah 
0875    E8 00 00                  call        @stepCRC7 
0878    88 46 FC                  mov         byte ptr -0x4[bp],al 
087B    88 46 FE                  mov         byte ptr -0x2[bp],al 
087E    46                        inc         si 
087F    83 FE 1D                  cmp         si,0x001d 
0882    7C E2                     jl          L$106 
0884    B8 1E 80                  mov         ax,0x801e 
0887    E8 00 00                  call        @rtc_get_loc 
088A    88 46 FA                  mov         byte ptr -0x6[bp],al 
088D    30 E4                     xor         ah,ah 
088F    50                        push        ax 
0890    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
0893    50                        push        ax 
0894    1E                        push        ds 
0895    68 9B 03                  push        offset DGROUP:L$263 
0898    E8 00 00                  call        _cprintf 
089B    83 C4 08                  add         sp,0x0008 
089E    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
08A1    3A 46 FA                  cmp         al,byte ptr -0x6[bp] 
08A4    74 05                     je          L$107 
08A6    B8 01 00                  mov         ax,0x0001 
08A9    EB 02                     jmp         L$108 
08AB                          L$107:
08AB    31 C0                     xor         ax,ax 
08AD                          L$108:
08AD    C9                        leave       
08AE    5F                        pop         di 
08AF    5E                        pop         si 
08B0    C3                        ret         

Routine Size: 118 bytes,    Routine Base: _TEXT + 083B

08B1                          @compute_nvram_checksum:
08B1    56                        push        si 
08B2    57                        push        di 
08B3    55                        push        bp 
08B4    89 E5                     mov         bp,sp 
08B6    30 C0                     xor         al,al 
08B8    BE 00 00                  mov         si,offset _unique 
08BB    BF 00 00                  mov         di,seg _unique 
08BE                          L$109:
08BE    8E C7                     mov         es,di 
08C0    26 8A 24                  mov         ah,byte ptr es:[si] 
08C3    46                        inc         si 
08C4    84 E4                     test        ah,ah 
08C6    74 0D                     je          L$110 
08C8    88 C2                     mov         dl,al 
08CA    30 F6                     xor         dh,dh 
08CC    88 E0                     mov         al,ah 
08CE    30 E4                     xor         ah,ah 
08D0    E8 00 00                  call        @stepCRC7 
08D3    EB E9                     jmp         L$109 
08D5                          L$110:
08D5    31 F6                     xor         si,si 
08D7                          L$111:
08D7    88 C2                     mov         dl,al 
08D9    30 F6                     xor         dh,dh 
08DB    C4 5E 08                  les         bx,dword ptr 0x8[bp] 
08DE    01 F3                     add         bx,si 
08E0    26 8A 07                  mov         al,byte ptr es:[bx] 
08E3    30 E4                     xor         ah,ah 
08E5    E8 00 00                  call        @stepCRC7 
08E8    88 C4                     mov         ah,al 
08EA    46                        inc         si 
08EB    83 FE 1D                  cmp         si,0x001d 
08EE    7C E7                     jl          L$111 
08F0    30 C4                     xor         ah,al 
08F2    5D                        pop         bp 
08F3    5F                        pop         di 
08F4    5E                        pop         si 
08F5    C2 04 00                  ret         0x0004 

Routine Size: 71 bytes,    Routine Base: _TEXT + 08B1

08F8                          setup_ppide_:
08F8    53                        push        bx 
08F9    51                        push        cx 
08FA    52                        push        dx 
08FB    56                        push        si 
08FC    C8 14 00 00               enter       0x0014,0x00 
0900    89 C6                     mov         si,ax 
0902                          L$112:
0902    56                        push        si 
0903    1E                        push        ds 
0904    68 AD 03                  push        offset DGROUP:L$264 
0907    E8 00 00                  call        _cprintf 
090A    83 C4 06                  add         sp,0x0006 
090D    BB 14 00                  mov         bx,0x0014 
0910    8C D2                     mov         dx,ss 
0912    8D 46 EC                  lea         ax,-0x14[bp] 
0915    E8 00 00                  call        getline_ 
0918    80 7E EC 00               cmp         byte ptr -0x14[bp],0x00 
091C    74 0A                     je          L$113 
091E    8C D2                     mov         dx,ss 
0920    8D 46 EC                  lea         ax,-0x14[bp] 
0923    E8 00 00                  call        atoi_ 
0926    89 C6                     mov         si,ax 
0928                          L$113:
0928    85 F6                     test        si,si 
092A    7C D6                     jl          L$112 
092C    83 FE 02                  cmp         si,0x0002 
092F    7F D1                     jg          L$112 
0931    89 F0                     mov         ax,si 
0933    E9 F6 F7                  jmp         L$25 

Routine Size: 62 bytes,    Routine Base: _TEXT + 08F8

0936                          setup_fixed_boot_:
0936    53                        push        bx 
0937    51                        push        cx 
0938    56                        push        si 
0939    57                        push        di 
093A    C8 16 00 00               enter       0x0016,0x00 
093E    89 C1                     mov         cx,ax 
0940    8E C2                     mov         es,dx 
0942    89 C3                     mov         bx,ax 
0944    26 8A 47 0C               mov         al,byte ptr es:0xc[bx] 
0948    30 E4                     xor         ah,ah 
094A    89 C7                     mov         di,ax 
094C    31 F6                     xor         si,si 
094E    C7 46 FE 06 00            mov         word ptr -0x2[bp],0x0006 
0953    8E C2                     mov         es,dx 
0955                          L$114:
0955    8B 5E FE                  mov         bx,word ptr -0x2[bp] 
0958    01 CB                     add         bx,cx 
095A    26 8A 07                  mov         al,byte ptr es:[bx] 
095D    30 E4                     xor         ah,ah 
095F    01 C6                     add         si,ax 
0961    FF 46 FE                  inc         word ptr -0x2[bp] 
0964    83 7E FE 0C               cmp         word ptr -0x2[bp],0x000c 
0968    7C EB                     jl          L$114 
096A    B8 01 00                  mov         ax,0x0001 
096D    89 46 FE                  mov         word ptr -0x2[bp],ax 
0970    83 FE 04                  cmp         si,0x0004 
0973    7E 05                     jle         L$115 
0975    BE 04 00                  mov         si,0x0004 
0978    EB 0B                     jmp         L$116 
097A                          L$115:
097A    39 C6                     cmp         si,ax 
097C    7F 07                     jg          L$116 
097E    89 F7                     mov         di,si 
0980    C7 46 FE 00 00            mov         word ptr -0x2[bp],0x0000 
0985                          L$116:
0985    39 F7                     cmp         di,si 
0987    7F 04                     jg          L$117 
0989    85 FF                     test        di,di 
098B    75 03                     jne         L$118 
098D                          L$117:
098D    BF 01 00                  mov         di,0x0001 
0990                          L$118:
0990    83 7E FE 00               cmp         word ptr -0x2[bp],0x0000 
0994    74 2F                     je          L$119 
0996    57                        push        di 
0997    56                        push        si 
0998    1E                        push        ds 
0999    68 E1 03                  push        offset DGROUP:L$265 
099C    E8 00 00                  call        _cprintf 
099F    83 C4 08                  add         sp,0x0008 
09A2    BB 14 00                  mov         bx,0x0014 
09A5    8C D2                     mov         dx,ss 
09A7    8D 46 EA                  lea         ax,-0x16[bp] 
09AA    E8 00 00                  call        getline_ 
09AD    80 7E EA 00               cmp         byte ptr -0x16[bp],0x00 
09B1    74 12                     je          L$119 
09B3    8C D2                     mov         dx,ss 
09B5    8D 46 EA                  lea         ax,-0x16[bp] 
09B8    E8 00 00                  call        atoi_ 
09BB    89 C7                     mov         di,ax 
09BD    85 C0                     test        ax,ax 
09BF    7E CF                     jle         L$118 
09C1    39 F0                     cmp         ax,si 
09C3    7F CB                     jg          L$118 
09C5                          L$119:
09C5    89 F8                     mov         ax,di 
09C7    E9 0E FB                  jmp         L$62 

Routine Size: 148 bytes,    Routine Base: _TEXT + 0936

09CA                          setup_boot_sig_check_:
09CA    53                        push        bx 
09CB    51                        push        cx 
09CC    52                        push        dx 
09CD    56                        push        si 
09CE    C8 14 00 00               enter       0x0014,0x00 
09D2    50                        push        ax 
09D3    F6 46 EA 02               test        byte ptr -0x16[bp],0x02 
09D7    75 05                     jne         L$120 
09D9    BE 01 00                  mov         si,0x0001 
09DC    EB 02                     jmp         L$121 
09DE                          L$120:
09DE    31 F6                     xor         si,si 
09E0                          L$121:
09E0    85 F6                     test        si,si 
09E2    74 05                     je          L$123 
09E4                          L$122:
09E4    BA 07 04                  mov         dx,offset DGROUP:L$266 
09E7    EB 03                     jmp         L$124 
09E9                          L$123:
09E9    BA 0B 04                  mov         dx,offset DGROUP:L$267 
09EC                          L$124:
09EC    8C D8                     mov         ax,ds 
09EE    50                        push        ax 
09EF    52                        push        dx 
09F0    1E                        push        ds 
09F1    68 0F 04                  push        offset DGROUP:L$268 
09F4    E8 00 00                  call        _cprintf 
09F7    83 C4 08                  add         sp,0x0008 
09FA    BB 14 00                  mov         bx,0x0014 
09FD    8C D2                     mov         dx,ss 
09FF    8D 46 EC                  lea         ax,-0x14[bp] 
0A02    E8 00 00                  call        getline_ 
0A05    8A 46 EC                  mov         al,byte ptr -0x14[bp] 
0A08    84 C0                     test        al,al 
0A0A    74 21                     je          L$127 
0A0C    3C 4E                     cmp         al,0x4e 
0A0E    72 10                     jb          L$125 
0A10    76 24                     jbe         L$128 
0A12    3C 79                     cmp         al,0x79 
0A14    74 26                     je          L$129 
0A16    3C 6E                     cmp         al,0x6e 
0A18    74 1C                     je          L$128 
0A1A    3C 59                     cmp         al,0x59 
0A1C    74 1E                     je          L$129 
0A1E    EB 08                     jmp         L$126 
0A20                          L$125:
0A20    3C 31                     cmp         al,0x31 
0A22    74 18                     je          L$129 
0A24    3C 30                     cmp         al,0x30 
0A26    74 0E                     je          L$128 
0A28                          L$126:
0A28    BE 02 00                  mov         si,0x0002 
0A2B    EB B7                     jmp         L$122 
0A2D                          L$127:
0A2D    83 FE 01                  cmp         si,0x0001 
0A30    77 AE                     ja          L$121 
0A32    85 F6                     test        si,si 
0A34    75 06                     jne         L$129 
0A36                          L$128:
0A36    80 4E EA 02               or          byte ptr -0x16[bp],0x02 
0A3A    EB 04                     jmp         L$130 
0A3C                          L$129:
0A3C    80 66 EA FD               and         byte ptr -0x16[bp],0xfd 
0A40                          L$130:
0A40    8B 46 EA                  mov         ax,word ptr -0x16[bp] 
0A43    E9 E6 F6                  jmp         L$25 

Routine Size: 124 bytes,    Routine Base: _TEXT + 09CA

0A46                          putstring_:
0A46    51                        push        cx 
0A47    56                        push        si 
0A48    57                        push        di 
0A49    C8 82 00 00               enter       0x0082,0x00 
0A4D    89 C6                     mov         si,ax 
0A4F    89 56 FE                  mov         word ptr -0x2[bp],dx 
0A52    89 DA                     mov         dx,bx 
0A54    8C D7                     mov         di,ss 
0A56    8D 9E 7E FF               lea         bx,-0x82[bp] 
0A5A    31 C0                     xor         ax,ax 
0A5C                          L$131:
0A5C    39 D0                     cmp         ax,dx 
0A5E    7D 1F                     jge         L$132 
0A60    46                        inc         si 
0A61    8E 46 FE                  mov         es,word ptr -0x2[bp] 
0A64    26 8A 0C                  mov         cl,byte ptr es:[si] 
0A67    8E C7                     mov         es,di 
0A69    26 88 0F                  mov         byte ptr es:[bx],cl 
0A6C    43                        inc         bx 
0A6D    8E 46 FE                  mov         es,word ptr -0x2[bp] 
0A70    26 8A 4C FF               mov         cl,byte ptr es:-0x1[si] 
0A74    8E C7                     mov         es,di 
0A76    26 88 0F                  mov         byte ptr es:[bx],cl 
0A79    43                        inc         bx 
0A7A    46                        inc         si 
0A7B    40                        inc         ax 
0A7C    40                        inc         ax 
0A7D    EB DD                     jmp         L$131 
0A7F                          L$132:
0A7F    8E C7                     mov         es,di 
0A81    26 C6 07 00               mov         byte ptr es:[bx],0x00 
0A85    8E C7                     mov         es,di 
0A87                          L$133:
0A87    8D 86 7E FF               lea         ax,-0x82[bp] 
0A8B    39 C3                     cmp         bx,ax 
0A8D    76 0E                     jbe         L$134 
0A8F    26 80 7F FF 20            cmp         byte ptr es:-0x1[bx],0x20 
0A94    77 07                     ja          L$134 
0A96    4B                        dec         bx 
0A97    26 C6 07 00               mov         byte ptr es:[bx],0x00 
0A9B    EB EA                     jmp         L$133 
0A9D                          L$134:
0A9D    8C D7                     mov         di,ss 
0A9F    8D 9E 7E FF               lea         bx,-0x82[bp] 
0AA3    8E C7                     mov         es,di 
0AA5                          L$135:
0AA5    26 8A 07                  mov         al,byte ptr es:[bx] 
0AA8    84 C0                     test        al,al 
0AAA    74 07                     je          L$136 
0AAC    3C 20                     cmp         al,0x20 
0AAE    77 03                     ja          L$136 
0AB0    43                        inc         bx 
0AB1    EB F2                     jmp         L$135 
0AB3                          L$136:
0AB3    57                        push        di 
0AB4    53                        push        bx 
0AB5    1E                        push        ds 
0AB6    68 2F 04                  push        offset DGROUP:L$269 
0AB9    E8 00 00                  call        _cprintf 
0ABC    83 C4 08                  add         sp,0x0008 
0ABF    E9 6B F7                  jmp         L$38 

Routine Size: 124 bytes,    Routine Base: _TEXT + 0A46

0AC2                          p_bda_fx_:
0AC2    53                        push        bx 
0AC3    51                        push        cx 
0AC4    56                        push        si 
0AC5    C8 02 00 00               enter       0x0002,0x00 
0AC9    88 C1                     mov         cl,al 
0ACB    A1 00 00                  mov         ax,word ptr _bios_data_area_ptr 
0ACE    8B 36 02 00               mov         si,word ptr _bios_data_area_ptr+0x2 
0AD2    05 B0 00                  add         ax,0x00b0 
0AD5    80 F9 80                  cmp         cl,0x80 
0AD8    75 05                     jne         L$137 
0ADA    BB 04 01                  mov         bx,0x0104 
0ADD    EB 0C                     jmp         L$139 
0ADF                          L$137:
0ADF    80 F9 81                  cmp         cl,0x81 
0AE2    75 05                     jne         L$138 
0AE4    BB 18 01                  mov         bx,0x0118 
0AE7    EB 02                     jmp         L$139 
0AE9                          L$138:
0AE9    31 DB                     xor         bx,bx 
0AEB                          L$139:
0AEB    31 D2                     xor         dx,dx 
0AED    80 E1 0F                  and         cl,0x0f 
0AF0    88 4E FE                  mov         byte ptr -0x2[bp],cl 
0AF3    C6 46 FF 00               mov         byte ptr -0x1[bp],0x00 
0AF7    8B 4E FE                  mov         cx,word ptr -0x2[bp] 
0AFA    C1 E1 04                  shl         cx,0x04 
0AFD    01 C8                     add         ax,cx 
0AFF    89 D1                     mov         cx,dx 
0B01    09 D9                     or          cx,bx 
0B03    74 09                     je          L$140 
0B05    8E C2                     mov         es,dx 
0B07    26 89 07                  mov         word ptr es:[bx],ax 
0B0A    26 89 77 02               mov         word ptr es:0x2[bx],si 
0B0E                          L$140:
0B0E    89 F2                     mov         dx,si 
0B10    C9                        leave       
0B11    E9 C6 F9                  jmp         L$63 

Routine Size: 82 bytes,    Routine Base: _TEXT + 0AC2

0B14                          @setup_fixed_disk:
0B14    56                        push        si 
0B15    57                        push        di 
0B16    C8 14 02 00               enter       0x0214,0x00 
0B1A    88 C6                     mov         dh,al 
0B1C    88 56 FE                  mov         byte ptr -0x2[bp],dl 
0B1F    88 5E F8                  mov         byte ptr -0x8[bp],bl 
0B22    8A 46 08                  mov         al,byte ptr 0x8[bp] 
0B25    C0 E0 04                  shl         al,0x04 
0B28    88 46 FC                  mov         byte ptr -0x4[bp],al 
0B2B    88 D0                     mov         al,dl 
0B2D    30 E4                     xor         ah,ah 
0B2F    50                        push        ax 
0B30    88 F0                     mov         al,dh 
0B32    50                        push        ax 
0B33    80 FB 02                  cmp         bl,0x02 
0B36    75 05                     jne         L$141 
0B38    BA 32 04                  mov         dx,offset DGROUP:L$270 
0B3B    EB 03                     jmp         L$142 
0B3D                          L$141:
0B3D    BA 38 04                  mov         dx,offset DGROUP:L$271 
0B40                          L$142:
0B40    8C D8                     mov         ax,ds 
0B42    50                        push        ax 
0B43    52                        push        dx 
0B44    1E                        push        ds 
0B45    68 40 04                  push        offset DGROUP:L$272 
0B48    E8 00 00                  call        _cprintf 
0B4B    83 C4 0C                  add         sp,0x000c 
0B4E    80 7E F8 02               cmp         byte ptr -0x8[bp],0x02 
0B52    75 12                     jne         L$143 
0B54    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
0B57    30 E4                     xor         ah,ah 
0B59    50                        push        ax 
0B5A    8D 96 EC FD               lea         dx,-0x214[bp] 
0B5E    16                        push        ss 
0B5F    52                        push        dx 
0B60    E8 00 00                  call        _PPIDE_READ_ID 
0B63    83 C4 06                  add         sp,0x0006 
0B66                          L$143:
0B66    1E                        push        ds 
0B67    68 60 04                  push        offset DGROUP:L$273 
0B6A    E8 00 00                  call        _cprintf 
0B6D    83 C4 04                  add         sp,0x0004 
0B70    BB 28 00                  mov         bx,0x0028 
0B73    8C D2                     mov         dx,ss 
0B75    8D 86 22 FE               lea         ax,-0x1de[bp] 
0B79    E8 00 00                  call        putstring_ 
0B7C    1E                        push        ds 
0B7D    68 68 04                  push        offset DGROUP:L$274 
0B80    E8 00 00                  call        _cprintf 
0B83    83 C4 04                  add         sp,0x0004 
0B86    BB 14 00                  mov         bx,0x0014 
0B89    8C D2                     mov         dx,ss 
0B8B    8D 86 00 FE               lea         ax,-0x200[bp] 
0B8F    E8 00 00                  call        putstring_ 
0B92    1E                        push        ds 
0B93    68 72 04                  push        offset DGROUP:L$275 
0B96    E8 00 00                  call        _cprintf 
0B99    83 C4 04                  add         sp,0x0004 
0B9C    BB 08 00                  mov         bx,0x0008 
0B9F    8C D2                     mov         dx,ss 
0BA1    8D 86 1A FE               lea         ax,-0x1e6[bp] 
0BA5    E8 00 00                  call        putstring_ 
0BA8    F6 86 4F FE 02            test        byte ptr -0x1b1[bp],0x02 
0BAD    74 05                     je          L$144 
0BAF    BA A9 00                  mov         dx,offset DGROUP:L$241 
0BB2    EB 03                     jmp         L$145 
0BB4                          L$144:
0BB4    BA 7E 04                  mov         dx,offset DGROUP:L$276 
0BB7                          L$145:
0BB7    8C D8                     mov         ax,ds 
0BB9    50                        push        ax 
0BBA    52                        push        dx 
0BBB    FF B6 F8 FD               push        word ptr -0x208[bp] 
0BBF    FF B6 F2 FD               push        word ptr -0x20e[bp] 
0BC3    FF B6 EE FD               push        word ptr -0x212[bp] 
0BC7    1E                        push        ds 
0BC8    68 82 04                  push        offset DGROUP:L$277 
0BCB    E8 00 00                  call        _cprintf 
0BCE    83 C4 0E                  add         sp,0x000e 
0BD1    FF B6 60 FE               push        word ptr -0x1a0[bp] 
0BD5    FF B6 5E FE               push        word ptr -0x1a2[bp] 
0BD9    FF B6 5C FE               push        word ptr -0x1a4[bp] 
0BDD    FF B6 5A FE               push        word ptr -0x1a6[bp] 
0BE1    FF B6 58 FE               push        word ptr -0x1a8[bp] 
0BE5    1E                        push        ds 
0BE6    68 AD 04                  push        offset DGROUP:L$278 
0BE9    E8 00 00                  call        _cprintf 
0BEC    83 C4 0E                  add         sp,0x000e 
0BEF    FF B6 66 FE               push        word ptr -0x19a[bp] 
0BF3    FF B6 64 FE               push        word ptr -0x19c[bp] 
0BF7    1E                        push        ds 
0BF8    68 D3 04                  push        offset DGROUP:L$279 
0BFB    E8 00 00                  call        _cprintf 
0BFE    83 C4 08                  add         sp,0x0008 
0C01    FF B6 B6 FE               push        word ptr -0x14a[bp] 
0C05    FF B6 B4 FE               push        word ptr -0x14c[bp] 
0C09    FF B6 BA FE               push        word ptr -0x146[bp] 
0C0D    FF B6 B8 FE               push        word ptr -0x148[bp] 
0C11    1E                        push        ds 
0C12    68 E5 04                  push        offset DGROUP:L$280 
0C15    E8 00 00                  call        _cprintf 
0C18    83 C4 0C                  add         sp,0x000c 
0C1B    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
0C1E    30 E4                     xor         ah,ah 
0C20    E8 00 00                  call        p_bda_fx_ 
0C23    89 C3                     mov         bx,ax 
0C25    8E C2                     mov         es,dx 
0C27    89 C6                     mov         si,ax 
0C29    89 56 F6                  mov         word ptr -0xa[bp],dx 
0C2C    8B BE EE FD               mov         di,word ptr -0x212[bp] 
0C30    C7 46 EE 00 00            mov         word ptr -0x12[bp],0x0000 
0C35    26 89 7F 09               mov         word ptr es:0x9[bx],di 
0C39    8B 86 F2 FD               mov         ax,word ptr -0x20e[bp] 
0C3D    89 46 F0                  mov         word ptr -0x10[bp],ax 
0C40    8A 86 F2 FD               mov         al,byte ptr -0x20e[bp] 
0C44    26 88 47 0B               mov         byte ptr es:0xb[bx],al 
0C48    8B 86 F8 FD               mov         ax,word ptr -0x208[bp] 
0C4C    89 46 EC                  mov         word ptr -0x14[bp],ax 
0C4F    8A 86 F8 FD               mov         al,byte ptr -0x208[bp] 
0C53    26 88 47 04               mov         byte ptr es:0x4[bx],al 
0C57    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
0C5A    84 C0                     test        al,al 
0C5C    74 05                     je          L$146 
0C5E    B8 10 00                  mov         ax,0x0010 
0C61    EB 02                     jmp         L$147 
0C63                          L$146:
0C63    30 E4                     xor         ah,ah 
0C65                          L$147:
0C65    0C A0                     or          al,0xa0 
0C67    89 C2                     mov         dx,ax 
0C69    8A 46 F8                  mov         al,byte ptr -0x8[bp] 
0C6C    30 E4                     xor         ah,ah 
0C6E    09 D0                     or          ax,dx 
0C70    8E 46 F6                  mov         es,word ptr -0xa[bp] 
0C73    26 88 44 08               mov         byte ptr es:0x8[si],al 
0C77    F6 86 4F FE 02            test        byte ptr -0x1b1[bp],0x02 
0C7C    74 25                     je          L$148 
0C7E    8B 86 64 FE               mov         ax,word ptr -0x19c[bp] 
0C82    26 89 44 0C               mov         word ptr es:0xc[si],ax 
0C86    8B 86 66 FE               mov         ax,word ptr -0x19a[bp] 
0C8A    80 E4 0F                  and         ah,0x0f 
0C8D    26 89 44 05               mov         word ptr es:0x5[si],ax 
0C91    8B 86 66 FE               mov         ax,word ptr -0x19a[bp] 
0C95    C1 E8 0C                  shr         ax,0x0c 
0C98    26 88 44 07               mov         byte ptr es:0x7[si],al 
0C9C    26 80 4C 08 40            or          byte ptr es:0x8[si],0x40 
0CA1    EB 13                     jmp         L$149 
0CA3                          L$148:
0CA3    8B 86 5E FE               mov         ax,word ptr -0x1a2[bp] 
0CA7    26 89 44 0C               mov         word ptr es:0xc[si],ax 
0CAB    8B 86 60 FE               mov         ax,word ptr -0x1a0[bp] 
0CAF    80 E4 0F                  and         ah,0x0f 
0CB2    26 89 44 05               mov         word ptr es:0x5[si],ax 
0CB6                          L$149:
0CB6    C6 46 FA 00               mov         byte ptr -0x6[bp],0x00 
0CBA    8B 46 EE                  mov         ax,word ptr -0x12[bp] 
0CBD    09 F8                     or          ax,di 
0CBF    75 07                     jne         L$150 
0CC1    31 FF                     xor         di,di 
0CC3    C7 46 EE 01 00            mov         word ptr -0x12[bp],0x0001 
0CC8                          L$150:
0CC8    8B 5E F0                  mov         bx,word ptr -0x10[bp] 
0CCB    89 F8                     mov         ax,di 
0CCD    8B 56 EE                  mov         dx,word ptr -0x12[bp] 
0CD0    E8 00 00                  call        @mulLS 
0CD3    8B 5E EC                  mov         bx,word ptr -0x14[bp] 
0CD6    E8 00 00                  call        @mulLS 
0CD9    89 46 F2                  mov         word ptr -0xe[bp],ax 
0CDC    89 56 F4                  mov         word ptr -0xc[bp],dx 
0CDF                          L$151:
0CDF    83 7E EE 00               cmp         word ptr -0x12[bp],0x0000 
0CE3    75 06                     jne         L$152 
0CE5    81 FF 00 04               cmp         di,0x0400 
0CE9    76 33                     jbe         L$154 
0CEB                          L$152:
0CEB    81 7E F0 FF 00            cmp         word ptr -0x10[bp],0x00ff 
0CF0    73 2C                     jae         L$154 
0CF2    D1 66 F0                  shl         word ptr -0x10[bp],0x01 
0CF5    81 7E F0 FF 00            cmp         word ptr -0x10[bp],0x00ff 
0CFA    76 05                     jbe         L$153 
0CFC    C7 46 F0 FF 00            mov         word ptr -0x10[bp],0x00ff 
0D01                          L$153:
0D01    8B 5E EC                  mov         bx,word ptr -0x14[bp] 
0D04    8B 46 F2                  mov         ax,word ptr -0xe[bp] 
0D07    8B 56 F4                  mov         dx,word ptr -0xc[bp] 
0D0A    E8 00 00                  call        @divLS 
0D0D    8B 5E F0                  mov         bx,word ptr -0x10[bp] 
0D10    E8 00 00                  call        @divLS 
0D13    89 C7                     mov         di,ax 
0D15    89 56 EE                  mov         word ptr -0x12[bp],dx 
0D18    C6 46 FA A0               mov         byte ptr -0x6[bp],0xa0 
0D1C    EB C1                     jmp         L$151 
0D1E                          L$154:
0D1E    83 7E EE 00               cmp         word ptr -0x12[bp],0x0000 
0D22    75 06                     jne         L$155 
0D24    81 FF 00 04               cmp         di,0x0400 
0D28    76 26                     jbe         L$156 
0D2A                          L$155:
0D2A    83 7E EC 3F               cmp         word ptr -0x14[bp],0x003f 
0D2E    73 20                     jae         L$156 
0D30    B8 3F 00                  mov         ax,0x003f 
0D33    89 46 EC                  mov         word ptr -0x14[bp],ax 
0D36    89 C3                     mov         bx,ax 
0D38    8B 46 F2                  mov         ax,word ptr -0xe[bp] 
0D3B    8B 56 F4                  mov         dx,word ptr -0xc[bp] 
0D3E    E8 00 00                  call        @divLS 
0D41    8B 5E F0                  mov         bx,word ptr -0x10[bp] 
0D44    E8 00 00                  call        @divLS 
0D47    89 C7                     mov         di,ax 
0D49    89 56 EE                  mov         word ptr -0x12[bp],dx 
0D4C    C6 46 FA A0               mov         byte ptr -0x6[bp],0xa0 
0D50                          L$156:
0D50    83 7E EE 00               cmp         word ptr -0x12[bp],0x0000 
0D54    75 06                     jne         L$157 
0D56    81 FF 00 04               cmp         di,0x0400 
0D5A    76 08                     jbe         L$158 
0D5C                          L$157:
0D5C    BF 00 04                  mov         di,0x0400 
0D5F    C7 46 EE 00 00            mov         word ptr -0x12[bp],0x0000 
0D64                          L$158:
0D64    8E 46 F6                  mov         es,word ptr -0xa[bp] 
0D67    26 89 3C                  mov         word ptr es:[si],di 
0D6A    8A 46 F0                  mov         al,byte ptr -0x10[bp] 
0D6D    26 88 44 02               mov         byte ptr es:0x2[si],al 
0D71    8A 46 EC                  mov         al,byte ptr -0x14[bp] 
0D74    26 88 44 0E               mov         byte ptr es:0xe[si],al 
0D78    8A 46 FA                  mov         al,byte ptr -0x6[bp] 
0D7B    26 88 44 03               mov         byte ptr es:0x3[si],al 
0D7F    3C A0                     cmp         al,0xa0 
0D81    75 24                     jne         L$159 
0D83    8B 5E F0                  mov         bx,word ptr -0x10[bp] 
0D86    89 F8                     mov         ax,di 
0D88    8B 56 EE                  mov         dx,word ptr -0x12[bp] 
0D8B    E8 00 00                  call        @mulLS 
0D8E    8B 5E EC                  mov         bx,word ptr -0x14[bp] 
0D91    E8 00 00                  call        @mulLS 
0D94    52                        push        dx 
0D95    50                        push        ax 
0D96    FF 76 EC                  push        word ptr -0x14[bp] 
0D99    FF 76 F0                  push        word ptr -0x10[bp] 
0D9C    57                        push        di 
0D9D    1E                        push        ds 
0D9E    68 FF 04                  push        offset DGROUP:L$281 
0DA1    E8 00 00                  call        _cprintf 
0DA4    83 C4 0E                  add         sp,0x000e 
0DA7                          L$159:
0DA7    89 F2                     mov         dx,si 
0DA9    8B 7E F6                  mov         di,word ptr -0xa[bp] 
0DAC    30 C0                     xor         al,al 
0DAE    88 46 FC                  mov         byte ptr -0x4[bp],al 
0DB1    30 E4                     xor         ah,ah 
0DB3    8E C7                     mov         es,di 
0DB5                          L$160:
0DB5    89 D3                     mov         bx,dx 
0DB7    42                        inc         dx 
0DB8    26 8A 1F                  mov         bl,byte ptr es:[bx] 
0DBB    00 5E FC                  add         byte ptr -0x4[bp],bl 
0DBE    40                        inc         ax 
0DBF    3D 0F 00                  cmp         ax,0x000f 
0DC2    72 F1                     jb          L$160 
0DC4    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
0DC7    8E 46 F6                  mov         es,word ptr -0xa[bp] 
0DCA    26 88 44 0F               mov         byte ptr es:0xf[si],al 
0DCE    26 F6 5C 0F               neg         byte ptr es:0xf[si] 
0DD2    1E                        push        ds 
0DD3    68 91 02                  push        offset DGROUP:L$258 
0DD6    E8 00 00                  call        _cprintf 
0DD9    83 C4 04                  add         sp,0x0004 
0DDC    C9                        leave       
0DDD    5F                        pop         di 
0DDE                          L$161:
0DDE    5E                        pop         si 
0DDF    C2 02 00                  ret         0x0002 

Routine Size: 718 bytes,    Routine Base: _TEXT + 0B14

0DE2                          put_char_array_:
0DE2    51                        push        cx 
0DE3    56                        push        si 
0DE4    57                        push        di 
0DE5    C8 02 00 00               enter       0x0002,0x00 
0DE9    89 C6                     mov         si,ax 
0DEB    89 D7                     mov         di,dx 
0DED    88 5E FE                  mov         byte ptr -0x2[bp],bl 
0DF0                          L$162:
0DF0    FE 4E FE                  dec         byte ptr -0x2[bp] 
0DF3    80 7E FE FF               cmp         byte ptr -0x2[bp],0xff 
0DF7    75 03                     jne         L$163 
0DF9    E9 31 F4                  jmp         L$38 
0DFC                          L$163:
0DFC    8E C7                     mov         es,di 
0DFE    26 8A 04                  mov         al,byte ptr es:[si] 
0E01    30 E4                     xor         ah,ah 
0E03    46                        inc         si 
0E04    E8 00 00                  call        @uart_putchar 
0E07    EB E7                     jmp         L$162 

Routine Size: 39 bytes,    Routine Base: _TEXT + 0DE2

0E09                          sd_info_:
0E09    53                        push        bx 
0E0A    51                        push        cx 
0E0B    56                        push        si 
0E0C    57                        push        di 
0E0D    C8 3E 00 00               enter       0x003e,0x00 
0E11    50                        push        ax 
0E12    88 56 FE                  mov         byte ptr -0x2[bp],dl 
0E15    E8 00 00                  call        @SDinitcard 
0E18    89 46 F8                  mov         word ptr -0x8[bp],ax 
0E1B    89 46 F6                  mov         word ptr -0xa[bp],ax 
0E1E    8D 56 C2                  lea         dx,-0x3e[bp] 
0E21    16                        push        ss 
0E22    52                        push        dx 
0E23    FF 76 C0                  push        word ptr -0x40[bp] 
0E26    E8 00 00                  call        _DSDgetInfo 
0E29    83 C4 06                  add         sp,0x0006 
0E2C    8C D6                     mov         si,ss 
0E2E    8D 7E C6                  lea         di,-0x3a[bp] 
0E31    8C 56 EE                  mov         word ptr -0x12[bp],ss 
0E34    83 C7 10                  add         di,0x0010 
0E37    FF 76 C0                  push        word ptr -0x40[bp] 
0E3A    1E                        push        ds 
0E3B    68 30 05                  push        offset DGROUP:L$282 
0E3E    E8 00 00                  call        _cprintf 
0E41    83 C4 06                  add         sp,0x0006 
0E44    83 7E F8 FC               cmp         word ptr -0x8[bp],0xfffc 
0E48    75 10                     jne         L$164 
0E4A    1E                        push        ds 
0E4B    68 3F 05                  push        offset DGROUP:L$283 
0E4E    E8 00 00                  call        _cprintf 
0E51    83 C4 04                  add         sp,0x0004 
0E54    8B 46 F8                  mov         ax,word ptr -0x8[bp] 
0E57    E9 7E F6                  jmp         L$62 
0E5A                          L$164:
0E5A    8D 45 01                  lea         ax,0x1[di] 
0E5D    BB 02 00                  mov         bx,0x0002 
0E60    8C D2                     mov         dx,ss 
0E62    E8 00 00                  call        put_char_array_ 
0E65    1E                        push        ds 
0E66    68 49 05                  push        offset DGROUP:L$284 
0E69    E8 00 00                  call        _cprintf 
0E6C    83 C4 04                  add         sp,0x0004 
0E6F    8D 45 03                  lea         ax,0x3[di] 
0E72    BB 05 00                  mov         bx,0x0005 
0E75    8C D2                     mov         dx,ss 
0E77    E8 00 00                  call        put_char_array_ 
0E7A    8D 56 C6                  lea         dx,-0x3a[bp] 
0E7D    16                        push        ss 
0E7E    52                        push        dx 
0E7F    68 7E 7F                  push        0x7f7e 
0E82    E8 00 00                  call        _SDcsd 
0E85    83 C4 06                  add         sp,0x0006 
0E88    89 C6                     mov         si,ax 
0E8A    46                        inc         si 
0E8B    56                        push        si 
0E8C    1E                        push        ds 
0E8D    68 4C 05                  push        offset DGROUP:L$285 
0E90    E8 00 00                  call        _cprintf 
0E93    83 C4 06                  add         sp,0x0006 
0E96    8D 56 C6                  lea         dx,-0x3a[bp] 
0E99    16                        push        ss 
0E9A    52                        push        dx 
0E9B    68 54 5F                  push        0x5f54 
0E9E    E8 00 00                  call        _SDcsd 
0EA1    83 C4 06                  add         sp,0x0006 
0EA4    50                        push        ax 
0EA5    50                        push        ax 
0EA6    1E                        push        ds 
0EA7    68 61 05                  push        offset DGROUP:L$286 
0EAA    E8 00 00                  call        _cprintf 
0EAD    83 C4 08                  add         sp,0x0008 
0EB0    83 FE 02                  cmp         si,0x0002 
0EB3    75 47                     jne         L$166 
0EB5    8D 56 C6                  lea         dx,-0x3a[bp] 
0EB8    16                        push        ss 
0EB9    52                        push        dx 
0EBA    68 40 45                  push        0x4540 
0EBD    E8 00 00                  call        _SDcsd 
0EC0    83 C4 06                  add         sp,0x0006 
0EC3    89 C6                     mov         si,ax 
0EC5    8D 56 C6                  lea         dx,-0x3a[bp] 
0EC8    16                        push        ss 
0EC9    52                        push        dx 
0ECA    68 30 3F                  push        0x3f30 
0ECD    E8 00 00                  call        _SDcsd 
0ED0    83 C4 06                  add         sp,0x0006 
0ED3    31 D2                     xor         dx,dx 
0ED5    31 DB                     xor         bx,bx 
0ED7    01 C3                     add         bx,ax 
0ED9    89 5E EA                  mov         word ptr -0x16[bp],bx 
0EDC    11 D6                     adc         si,dx 
0EDE    89 76 EC                  mov         word ptr -0x14[bp],si 
0EE1    89 D8                     mov         ax,bx 
0EE3    05 01 00                  add         ax,0x0001 
0EE6    89 F2                     mov         dx,si 
0EE8    83 D2 00                  adc         dx,0x0000 
0EEB    B9 0A 00                  mov         cx,0x000a 
0EEE                          L$165:
0EEE    D1 E0                     shl         ax,0x01 
0EF0    D1 D2                     rcl         dx,0x01 
0EF2    E2 FA                     loop        L$165 
0EF4    89 46 EA                  mov         word ptr -0x16[bp],ax 
0EF7    89 56 EC                  mov         word ptr -0x14[bp],dx 
0EFA    EB 32                     jmp         L$168 
0EFC                          L$166:
0EFC    8D 56 C6                  lea         dx,-0x3a[bp] 
0EFF    16                        push        ss 
0F00    52                        push        dx 
0F01    68 3E 49                  push        0x493e 
0F04    E8 00 00                  call        _SDcsd 
0F07    83 C4 06                  add         sp,0x0006 
0F0A    89 46 EA                  mov         word ptr -0x16[bp],ax 
0F0D    C7 46 EC 00 00            mov         word ptr -0x14[bp],0x0000 
0F12    8D 56 C6                  lea         dx,-0x3a[bp] 
0F15    16                        push        ss 
0F16    52                        push        dx 
0F17    68 2F 31                  push        0x312f 
0F1A    E8 00 00                  call        _SDcsd 
0F1D    83 C4 06                  add         sp,0x0006 
0F20    89 C1                     mov         cx,ax 
0F22    41                        inc         cx 
0F23    41                        inc         cx 
0F24    E3 08                     jcxz        L$168 
0F26                          L$167:
0F26    D1 66 EA                  shl         word ptr -0x16[bp],0x01 
0F29    D1 56 EC                  rcl         word ptr -0x14[bp],0x01 
0F2C    E2 F8                     loop        L$167 
0F2E                          L$168:
0F2E    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
0F31    30 E4                     xor         ah,ah 
0F33    E8 00 00                  call        p_bda_fx_ 
0F36    89 C6                     mov         si,ax 
0F38    89 56 F0                  mov         word ptr -0x10[bp],dx 
0F3B    8B 46 EA                  mov         ax,word ptr -0x16[bp] 
0F3E    8B 56 EC                  mov         dx,word ptr -0x14[bp] 
0F41    E8 00 00                  call        log2_ 
0F44    89 C3                     mov         bx,ax 
0F46    3D 1C 00                  cmp         ax,0x001c 
0F49    7E 0D                     jle         L$169 
0F4B    BB 1C 00                  mov         bx,0x001c 
0F4E    C7 46 EA FF FF            mov         word ptr -0x16[bp],0xffff 
0F53    C7 46 EC FF 0F            mov         word ptr -0x14[bp],0x0fff 
0F58                          L$169:
0F58    83 EB 0A                  sub         bx,0x000a 
0F5B    83 FB 0C                  cmp         bx,0x000c 
0F5E    7E 05                     jle         L$170 
0F60    BB 0C 00                  mov         bx,0x000c 
0F63    EB 08                     jmp         L$171 
0F65                          L$170:
0F65    83 FB 08                  cmp         bx,0x0008 
0F68    7D 03                     jge         L$171 
0F6A    BB 08 00                  mov         bx,0x0008 
0F6D                          L$171:
0F6D    89 D8                     mov         ax,bx 
0F6F    99                        cwd         
0F70    2B C2                     sub         ax,dx 
0F72    D1 F8                     sar         ax,0x01 
0F74    3D 05 00                  cmp         ax,0x0005 
0F77    7E 03                     jle         L$172 
0F79    B8 05 00                  mov         ax,0x0005 
0F7C                          L$172:
0F7C    89 DA                     mov         dx,bx 
0F7E    29 C2                     sub         dx,ax 
0F80    8B 4E EA                  mov         cx,word ptr -0x16[bp] 
0F83    8E 46 F0                  mov         es,word ptr -0x10[bp] 
0F86    26 89 4C 0C               mov         word ptr es:0xc[si],cx 
0F8A    8B 4E EC                  mov         cx,word ptr -0x14[bp] 
0F8D    26 89 4C 05               mov         word ptr es:0x5[si],cx 
0F91    88 C1                     mov         cl,al 
0F93    B0 01                     mov         al,0x01 
0F95    D2 E0                     shl         al,cl 
0F97    26 88 44 04               mov         byte ptr es:0x4[si],al 
0F9B    26 88 44 0E               mov         byte ptr es:0xe[si],al 
0F9F    88 D1                     mov         cl,dl 
0FA1    B0 01                     mov         al,0x01 
0FA3    D2 E0                     shl         al,cl 
0FA5    26 88 44 0B               mov         byte ptr es:0xb[si],al 
0FA9    26 88 44 02               mov         byte ptr es:0x2[si],al 
0FAD    8B 46 EA                  mov         ax,word ptr -0x16[bp] 
0FB0    8B 56 EC                  mov         dx,word ptr -0x14[bp] 
0FB3    89 D9                     mov         cx,bx 
0FB5    E3 06                     jcxz        L$174 
0FB7                          L$173:
0FB7    D1 EA                     shr         dx,0x01 
0FB9    D1 D8                     rcr         ax,0x01 
0FBB    E2 FA                     loop        L$173 
0FBD                          L$174:
0FBD    26 89 44 09               mov         word ptr es:0x9[si],ax 
0FC1    26 89 04                  mov         word ptr es:[si],ax 
0FC4    8B 46 C0                  mov         ax,word ptr -0x40[bp] 
0FC7    85 C0                     test        ax,ax 
0FC9    74 03                     je          L$175 
0FCB    B8 10 00                  mov         ax,0x0010 
0FCE                          L$175:
0FCE    0C E0                     or          al,0xe0 
0FD0    8E 46 F0                  mov         es,word ptr -0x10[bp] 
0FD3    26 88 44 08               mov         byte ptr es:0x8[si],al 
0FD7    C7 46 F4 00 00            mov         word ptr -0xc[bp],0x0000 
0FDC    31 D2                     xor         dx,dx 
0FDE    8B 46 EE                  mov         ax,word ptr -0x12[bp] 
0FE1    89 46 FA                  mov         word ptr -0x6[bp],ax 
0FE4    8D 5D 09                  lea         bx,0x9[di] 
0FE7    C6 46 FC 00               mov         byte ptr -0x4[bp],0x00 
0FEB    8E 46 FA                  mov         es,word ptr -0x6[bp] 
0FEE                          L$176:
0FEE    26 8A 07                  mov         al,byte ptr es:[bx] 
0FF1    88 46 F2                  mov         byte ptr -0xe[bp],al 
0FF4    C6 46 F3 00               mov         byte ptr -0xd[bp],0x00 
0FF8    8B 46 F4                  mov         ax,word ptr -0xc[bp] 
0FFB    B9 08 00                  mov         cx,0x0008 
0FFE                          L$177:
0FFE    D1 E0                     shl         ax,0x01 
1000    D1 D2                     rcl         dx,0x01 
1002    E2 FA                     loop        L$177 
1004    8B 4E F2                  mov         cx,word ptr -0xe[bp] 
1007    09 C1                     or          cx,ax 
1009    89 4E F4                  mov         word ptr -0xc[bp],cx 
100C    43                        inc         bx 
100D    FE 46 FC                  inc         byte ptr -0x4[bp] 
1010    80 7E FC 04               cmp         byte ptr -0x4[bp],0x04 
1014    72 D8                     jb          L$176 
1016    8E 46 EE                  mov         es,word ptr -0x12[bp] 
1019    26 8A 45 0D               mov         al,byte ptr es:0xd[di] 
101D    30 E4                     xor         ah,ah 
101F    89 C3                     mov         bx,ax 
1021    C1 E3 04                  shl         bx,0x04 
1024    26 8A 45 0E               mov         al,byte ptr es:0xe[di] 
1028    C1 F8 04                  sar         ax,0x04 
102B    09 C3                     or          bx,ax 
102D    26 8A 45 0E               mov         al,byte ptr es:0xe[di] 
1031    24 0F                     and         al,0x0f 
1033    30 E4                     xor         ah,ah 
1035    50                        push        ax 
1036    8D 87 D0 07               lea         ax,0x7d0[bx] 
103A    50                        push        ax 
103B    26 8A 45 08               mov         al,byte ptr es:0x8[di] 
103F    24 0F                     and         al,0x0f 
1041    30 E4                     xor         ah,ah 
1043    50                        push        ax 
1044    26 8A 45 08               mov         al,byte ptr es:0x8[di] 
1048    C1 F8 04                  sar         ax,0x04 
104B    50                        push        ax 
104C    52                        push        dx 
104D    51                        push        cx 
104E    1E                        push        ds 
104F    68 82 05                  push        offset DGROUP:L$287 
1052    E8 00 00                  call        _cprintf 
1055    83 C4 10                  add         sp,0x0010 
1058    FF 76 EC                  push        word ptr -0x14[bp] 
105B    FF 76 EA                  push        word ptr -0x16[bp] 
105E    1E                        push        ds 
105F    68 AB 05                  push        offset DGROUP:L$288 
1062    E8 00 00                  call        _cprintf 
1065    83 C4 08                  add         sp,0x0008 
1068    8E 46 F0                  mov         es,word ptr -0x10[bp] 
106B    26 8A 44 0E               mov         al,byte ptr es:0xe[si] 
106F    30 E4                     xor         ah,ah 
1071    50                        push        ax 
1072    26 8A 44 02               mov         al,byte ptr es:0x2[si] 
1076    50                        push        ax 
1077    26 FF 34                  push        word ptr es:[si] 
107A    1E                        push        ds 
107B    68 D7 05                  push        offset DGROUP:L$289 
107E    E8 00 00                  call        _cprintf 
1081    83 C4 0A                  add         sp,0x000a 
1084    89 F3                     mov         bx,si 
1086    8B 46 F0                  mov         ax,word ptr -0x10[bp] 
1089    89 46 FA                  mov         word ptr -0x6[bp],ax 
108C    30 C0                     xor         al,al 
108E    88 46 FC                  mov         byte ptr -0x4[bp],al 
1091    8E 46 FA                  mov         es,word ptr -0x6[bp] 
1094                          L$178:
1094    89 DF                     mov         di,bx 
1096    43                        inc         bx 
1097    26 02 05                  add         al,byte ptr es:[di] 
109A    FE 46 FC                  inc         byte ptr -0x4[bp] 
109D    80 7E FC 0F               cmp         byte ptr -0x4[bp],0x0f 
10A1    72 F1                     jb          L$178 
10A3    8E 46 F0                  mov         es,word ptr -0x10[bp] 
10A6    26 88 44 0F               mov         byte ptr es:0xf[si],al 
10AA    26 F6 5C 0F               neg         byte ptr es:0xf[si] 
10AE    1E                        push        ds 
10AF    68 91 02                  push        offset DGROUP:L$258 
10B2    E8 00 00                  call        _cprintf 
10B5    83 C4 04                  add         sp,0x0004 
10B8    8B 46 F6                  mov         ax,word ptr -0xa[bp] 
10BB    E9 1A F4                  jmp         L$62 

Routine Size: 693 bytes,    Routine Base: _TEXT + 0E09

10BE                          @setup_SD_card:
10BE    56                        push        si 
10BF    55                        push        bp 
10C0    89 E5                     mov         bp,sp 
10C2    88 C1                     mov         cl,al 
10C4    88 D0                     mov         al,dl 
10C6    30 E4                     xor         ah,ah 
10C8    89 C6                     mov         si,ax 
10CA    50                        push        ax 
10CB    88 C8                     mov         al,cl 
10CD    50                        push        ax 
10CE    1E                        push        ds 
10CF    68 EE 05                  push        offset DGROUP:L$290 
10D2    1E                        push        ds 
10D3    68 40 04                  push        offset DGROUP:L$272 
10D6    E8 00 00                  call        _cprintf 
10D9    83 C4 0C                  add         sp,0x000c 
10DC    8A 46 06                  mov         al,byte ptr 0x6[bp] 
10DF    30 E4                     xor         ah,ah 
10E1    89 F2                     mov         dx,si 
10E3    E8 00 00                  call        sd_info_ 
10E6    5D                        pop         bp 
10E7    E9 F4 FC                  jmp         L$161 

Routine Size: 44 bytes,    Routine Base: _TEXT + 10BE

10EA                          @nvram_apply:
10EA    56                        push        si 
10EB    57                        push        di 
10EC    C8 06 00 00               enter       0x0006,0x00 
10F0    31 F6                     xor         si,si 
10F2    1E                        push        ds 
10F3    68 91 02                  push        offset DGROUP:L$258 
10F6    E8 00 00                  call        _cprintf 
10F9    83 C4 04                  add         sp,0x0004 
10FC    89 76 FE                  mov         word ptr -0x2[bp],si 
10FF    EB 09                     jmp         L$180 
1101                          L$179:
1101    FF 46 FE                  inc         word ptr -0x2[bp] 
1104    83 7E FE 02               cmp         word ptr -0x2[bp],0x0002 
1108    7D 3F                     jge         L$182 
110A                          L$180:
110A    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
110D    40                        inc         ax 
110E    40                        inc         ax 
110F    80 CC 80                  or          ah,0x80 
1112    E8 00 00                  call        @rtc_get_loc 
1115    88 C4                     mov         ah,al 
1117    3C 04                     cmp         al,0x04 
1119    75 03                     jne         L$181 
111B    80 CC 30                  or          ah,0x30 
111E                          L$181:
111E    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
1122    03 5E FE                  add         bx,word ptr -0x2[bp] 
1125    26 88 A7 F8 00            mov         byte ptr es:0xf8[bx],ah 
112A    84 E4                     test        ah,ah 
112C    74 D3                     je          L$179 
112E    88 E0                     mov         al,ah 
1130    24 0F                     and         al,0x0f 
1132    30 E4                     xor         ah,ah 
1134    50                        push        ax 
1135    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
1138    05 41 00                  add         ax,0x0041 
113B    50                        push        ax 
113C    1E                        push        ds 
113D    68 F5 05                  push        offset DGROUP:L$291 
1140    E8 00 00                  call        _cprintf 
1143    83 C4 08                  add         sp,0x0008 
1146    46                        inc         si 
1147    EB B8                     jmp         L$179 
1149                          L$182:
1149    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
114D    83 C3 10                  add         bx,0x0010 
1150    85 F6                     test        si,si 
1152    74 05                     je          L$183 
1154    B8 01 00                  mov         ax,0x0001 
1157    EB 02                     jmp         L$184 
1159                          L$183:
1159    31 C0                     xor         ax,ax 
115B                          L$184:
115B    25 01 00                  and         ax,0x0001 
115E    26 80 27 FE               and         byte ptr es:[bx],0xfe 
1162    26 09 07                  or          word ptr es:[bx],ax 
1165    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
1169    83 C3 10                  add         bx,0x0010 
116C    85 F6                     test        si,si 
116E    74 01                     je          L$185 
1170    4E                        dec         si 
1171                          L$185:
1171    83 E6 03                  and         si,0x0003 
1174    26 80 27 3F               and         byte ptr es:[bx],0x3f 
1178    C1 E6 06                  shl         si,0x06 
117B    26 09 37                  or          word ptr es:[bx],si 
117E    C7 46 FC 00 00            mov         word ptr -0x4[bp],0x0000 
1183    B8 06 80                  mov         ax,0x8006 
1186    E8 00 00                  call        @rtc_get_loc 
1189    30 E4                     xor         ah,ah 
118B    89 C7                     mov         di,ax 
118D    83 E7 03                  and         di,0x0003 
1190    89 7E FA                  mov         word ptr -0x6[bp],di 
1193    30 C0                     xor         al,al 
1195    89 46 FC                  mov         word ptr -0x4[bp],ax 
1198    89 7E FC                  mov         word ptr -0x4[bp],di 
119B    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
119F    8A 46 FC                  mov         al,byte ptr -0x4[bp] 
11A2    26 88 87 FE 00            mov         byte ptr es:0xfe[bx],al 
11A7    89 FE                     mov         si,di 
11A9    57                        push        di 
11AA    57                        push        di 
11AB    57                        push        di 
11AC    1E                        push        ds 
11AD    68 09 06                  push        offset DGROUP:L$292 
11B0    E8 00 00                  call        _cprintf 
11B3    83 C4 0A                  add         sp,0x000a 
11B6    1E                        push        ds 
11B7    68 91 02                  push        offset DGROUP:L$258 
11BA    E8 00 00                  call        _cprintf 
11BD    83 C4 04                  add         sp,0x0004 
11C0    83 FF 04                  cmp         di,0x0004 
11C3    7E 03                     jle         L$186 
11C5    BE 04 00                  mov         si,0x0004 
11C8                          L$186:
11C8    C7 46 FE 00 00            mov         word ptr -0x2[bp],0x0000 
11CD    31 DB                     xor         bx,bx 
11CF                          L$187:
11CF    3B 5E FA                  cmp         bx,word ptr -0x6[bp] 
11D2    73 1B                     jae         L$188 
11D4    3B 76 FE                  cmp         si,word ptr -0x2[bp] 
11D7    7E 16                     jle         L$188 
11D9    88 D8                     mov         al,bl 
11DB    0C 02                     or          al,0x02 
11DD    C4 3E 00 00               les         di,dword ptr _bios_data_area_ptr 
11E1    03 7E FE                  add         di,word ptr -0x2[bp] 
11E4    26 88 85 A9 00            mov         byte ptr es:0xa9[di],al 
11E9    43                        inc         bx 
11EA    FF 46 FE                  inc         word ptr -0x2[bp] 
11ED    EB E0                     jmp         L$187 
11EF                          L$188:
11EF    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
11F2    3D 04 00                  cmp         ax,0x0004 
11F5    7D 11                     jge         L$189 
11F7    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
11FB    01 C3                     add         bx,ax 
11FD    26 C6 87 A9 00 00         mov         byte ptr es:0xa9[bx],0x00 
1203    FF 46 FE                  inc         word ptr -0x2[bp] 
1206    EB E7                     jmp         L$188 
1208                          L$189:
1208    1E                        push        ds 
1209    68 28 06                  push        offset DGROUP:L$293 
120C    E8 00 00                  call        _cprintf 
120F    83 C4 04                  add         sp,0x0004 
1212    C7 46 FE 00 00            mov         word ptr -0x2[bp],0x0000 
1217                          L$190:
1217    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
121B    03 5E FE                  add         bx,word ptr -0x2[bp] 
121E    26 8A 87 A9 00            mov         al,byte ptr es:0xa9[bx] 
1223    30 E4                     xor         ah,ah 
1225    50                        push        ax 
1226    1E                        push        ds 
1227    68 3A 06                  push        offset DGROUP:L$294 
122A    E8 00 00                  call        _cprintf 
122D    83 C4 06                  add         sp,0x0006 
1230    FF 46 FE                  inc         word ptr -0x2[bp] 
1233    83 7E FE 04               cmp         word ptr -0x2[bp],0x0004 
1237    7C DE                     jl          L$190 
1239    1E                        push        ds 
123A    68 40 06                  push        offset DGROUP:L$295 
123D    E8 00 00                  call        _cprintf 
1240    83 C4 04                  add         sp,0x0004 
1243    B8 0C 80                  mov         ax,0x800c 
1246    E8 00 00                  call        @rtc_get_loc 
1249    88 C3                     mov         bl,al 
124B    30 FF                     xor         bh,bh 
124D    83 FB 01                  cmp         bx,0x0001 
1250    7E 3C                     jle         L$193 
1252    39 F3                     cmp         bx,si 
1254    7F 38                     jg          L$193 
1256    C4 16 00 00               les         dx,dword ptr _bios_data_area_ptr 
125A    8D 7F FF                  lea         di,-0x1[bx] 
125D    89 D3                     mov         bx,dx 
125F    01 FB                     add         bx,di 
1261    26 8A 87 A9 00            mov         al,byte ptr es:0xa9[bx] 
1266    30 E4                     xor         ah,ah 
1268    89 46 FE                  mov         word ptr -0x2[bp],ax 
126B                          L$191:
126B    85 FF                     test        di,di 
126D    74 13                     je          L$192 
126F    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
1273    01 FB                     add         bx,di 
1275    26 8A 87 A8 00            mov         al,byte ptr es:0xa8[bx] 
127A    26 88 87 A9 00            mov         byte ptr es:0xa9[bx],al 
127F    4F                        dec         di 
1280    EB E9                     jmp         L$191 
1282                          L$192:
1282    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
1286    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
1289    26 88 87 A9 00            mov         byte ptr es:0xa9[bx],al 
128E                          L$193:
128E    1E                        push        ds 
128F    68 43 06                  push        offset DGROUP:L$296 
1292    E8 00 00                  call        _cprintf 
1295    83 C4 04                  add         sp,0x0004 
1298    C7 46 FE 00 00            mov         word ptr -0x2[bp],0x0000 
129D                          L$194:
129D    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
12A1    03 5E FE                  add         bx,word ptr -0x2[bp] 
12A4    26 8A 87 A9 00            mov         al,byte ptr es:0xa9[bx] 
12A9    30 E4                     xor         ah,ah 
12AB    50                        push        ax 
12AC    1E                        push        ds 
12AD    68 3A 06                  push        offset DGROUP:L$294 
12B0    E8 00 00                  call        _cprintf 
12B3    83 C4 06                  add         sp,0x0006 
12B6    FF 46 FE                  inc         word ptr -0x2[bp] 
12B9    83 7E FE 04               cmp         word ptr -0x2[bp],0x0004 
12BD    7C DE                     jl          L$194 
12BF    1E                        push        ds 
12C0    68 40 06                  push        offset DGROUP:L$295 
12C3    E8 00 00                  call        _cprintf 
12C6    83 C4 04                  add         sp,0x0004 
12C9    C7 46 FE 00 00            mov         word ptr -0x2[bp],0x0000 
12CE                          L$195:
12CE    8B 46 FE                  mov         ax,word ptr -0x2[bp] 
12D1    39 C6                     cmp         si,ax 
12D3    7F 03                     jg          L$196 
12D5    E9 D5 F5                  jmp         L$108 
12D8                          L$196:
12D8    C4 1E 00 00               les         bx,dword ptr _bios_data_area_ptr 
12DC    01 C3                     add         bx,ax 
12DE    26 8A 9F A9 00            mov         bl,byte ptr es:0xa9[bx] 
12E3    30 FF                     xor         bh,bh 
12E5    89 DA                     mov         dx,bx 
12E7    80 E2 01                  and         dl,0x01 
12EA    89 D8                     mov         ax,bx 
12EC    29 D0                     sub         ax,dx 
12EE    8A 6E FE                  mov         ch,byte ptr -0x2[bp] 
12F1    80 C5 43                  add         ch,0x43 
12F4    8A 4E FE                  mov         cl,byte ptr -0x2[bp] 
12F7    80 C1 80                  add         cl,0x80 
12FA    3D 08 00                  cmp         ax,0x0008 
12FD    75 0E                     jne         L$197 
12FF    52                        push        dx 
1300    88 C3                     mov         bl,al 
1302    88 CA                     mov         dl,cl 
1304    88 E8                     mov         al,ch 
1306    30 E4                     xor         ah,ah 
1308    E8 00 00                  call        @setup_SD_card 
130B    EB 0C                     jmp         L$198 
130D                          L$197:
130D    52                        push        dx 
130E    88 C3                     mov         bl,al 
1310    88 CA                     mov         dl,cl 
1312    88 E8                     mov         al,ch 
1314    30 E4                     xor         ah,ah 
1316    E8 00 00                  call        @setup_fixed_disk 
1319                          L$198:
1319    FF 46 FE                  inc         word ptr -0x2[bp] 
131C    EB B0                     jmp         L$195 

Routine Size: 564 bytes,    Routine Base: _TEXT + 10EA

131E                          @nvram_setup:
131E    56                        push        si 
131F    C8 20 00 00               enter       0x0020,0x00 
1323    E8 00 00                  call        @nvram_check 
1326    85 C0                     test        ax,ax 
1328    74 1C                     je          L$200 
132A    1E                        push        ds 
132B    68 55 06                  push        offset DGROUP:L$297 
132E    E8 00 00                  call        _cprintf 
1331    83 C4 04                  add         sp,0x0004 
1334    31 F6                     xor         si,si 
1336                          L$199:
1336    C6 42 E0 00               mov         byte ptr -0x20[bp+si],0x00 
133A    46                        inc         si 
133B    83 FE 1F                  cmp         si,0x001f 
133E    7C F6                     jl          L$199 
1340    C6 46 E5 03               mov         byte ptr -0x1b[bp],0x03 
1344    EB 1D                     jmp         L$202 
1346                          L$200:
1346    1E                        push        ds 
1347    68 70 06                  push        offset DGROUP:L$298 
134A    E8 00 00                  call        _cprintf 
134D    83 C4 04                  add         sp,0x0004 
1350    31 F6                     xor         si,si 
1352                          L$201:
1352    89 F0                     mov         ax,si 
1354    80 CC 80                  or          ah,0x80 
1357    E8 00 00                  call        @rtc_get_loc 
135A    88 42 E0                  mov         byte ptr -0x20[bp+si],al 
135D    46                        inc         si 
135E    83 FE 1F                  cmp         si,0x001f 
1361    7C EF                     jl          L$201 
1363                          L$202:
1363    31 C0                     xor         ax,ax 
1365    E8 00 00                  call        @rtc_get_loc 
1368    24 80                     and         al,0x80 
136A    74 06                     je          L$203 
136C    1E                        push        ds 
136D    68 DC 01                  push        offset DGROUP:L$251 
1370    EB 04                     jmp         L$204 
1372                          L$203:
1372    1E                        push        ds 
1373    68 89 06                  push        offset DGROUP:L$299 
1376                          L$204:
1376    E8 00 00                  call        _cprintf 
1379    83 C4 04                  add         sp,0x0004 
137C    31 D2                     xor         dx,dx 
137E    B8 07 00                  mov         ax,0x0007 
1381    E8 00 00                  call        @rtc_set_loc 
1384    8C D2                     mov         dx,ss 
1386    8D 46 E0                  lea         ax,-0x20[bp] 
1389    E8 00 00                  call        Date_ 
138C    E8 00 00                  call        Time_ 
138F    31 C0                     xor         ax,ax 
1391    E8 00 00                  call        set_battery_ 
1394    88 46 E0                  mov         byte ptr -0x20[bp],al 
1397    8C D2                     mov         dx,ss 
1399    8D 46 E0                  lea         ax,-0x20[bp] 
139C    E8 00 00                  call        Floppy_ 
139F    1E                        push        ds 
13A0    68 A0 06                  push        offset DGROUP:L$300 
13A3    E8 00 00                  call        _cprintf 
13A6    83 C4 04                  add         sp,0x0004 
13A9    8A 46 E6                  mov         al,byte ptr -0x1a[bp] 
13AC    30 E4                     xor         ah,ah 
13AE    E8 00 00                  call        setup_ppide_ 
13B1    88 46 E6                  mov         byte ptr -0x1a[bp],al 
13B4    8C D2                     mov         dx,ss 
13B6    8D 46 E0                  lea         ax,-0x20[bp] 
13B9    E8 00 00                  call        setup_fixed_boot_ 
13BC    88 46 EC                  mov         byte ptr -0x14[bp],al 
13BF    8A 46 E4                  mov         al,byte ptr -0x1c[bp] 
13C2    30 E4                     xor         ah,ah 
13C4    E8 00 00                  call        setup_boot_sig_check_ 
13C7    88 46 E4                  mov         byte ptr -0x1c[bp],al 
13CA    8A 46 E5                  mov         al,byte ptr -0x1b[bp] 
13CD    30 E4                     xor         ah,ah 
13CF    E8 00 00                  call        setup_serial_ 
13D2    88 46 E5                  mov         byte ptr -0x1b[bp],al 
13D5    8D 56 E0                  lea         dx,-0x20[bp] 
13D8    16                        push        ss 
13D9    52                        push        dx 
13DA    E8 00 00                  call        @compute_nvram_checksum 
13DD    88 46 FE                  mov         byte ptr -0x2[bp],al 
13E0    31 F6                     xor         si,si 
13E2                          L$205:
13E2    8A 52 E0                  mov         dl,byte ptr -0x20[bp+si] 
13E5    30 F6                     xor         dh,dh 
13E7    89 F0                     mov         ax,si 
13E9    80 CC 80                  or          ah,0x80 
13EC    E8 00 00                  call        @rtc_set_loc 
13EF    46                        inc         si 
13F0    83 FE 1F                  cmp         si,0x001f 
13F3    7C ED                     jl          L$205 
13F5    BA 80 00                  mov         dx,0x0080 
13F8    B8 07 00                  mov         ax,0x0007 
13FB    E8 00 00                  call        @rtc_set_loc 
13FE    C9                        leave       
13FF    5E                        pop         si 
1400    C3                        ret         

Routine Size: 227 bytes,    Routine Base: _TEXT + 131E

1401                          @nvram_get_video:
1401    56                        push        si 
1402    89 C6                     mov         si,ax 
1404    E8 00 00                  call        @nvram_check 
1407    85 C0                     test        ax,ax 
1409    74 04                     je          L$206 
140B    89 F0                     mov         ax,si 
140D    EB 08                     jmp         L$207 
140F                          L$206:
140F    B8 05 80                  mov         ax,0x8005 
1412    E8 00 00                  call        @rtc_get_loc 
1415    30 E4                     xor         ah,ah 
1417                          L$207:
1417    3D 07 00                  cmp         ax,0x0007 
141A    7E 02                     jle         L$208 
141C    89 F0                     mov         ax,si 
141E                          L$208:
141E    5E                        pop         si 
141F    C3                        ret         

Routine Size: 31 bytes,    Routine Base: _TEXT + 1401

No disassembly errors

Segment: CONST WORD USE16 000006B5 bytes
0000                          L$209:
0000    53 75 6E 00                                     Sun.
0004                          L$210:
0004    4D 6F 6E 00                                     Mon.
0008                          L$211:
0008    54 75 65 00                                     Tue.
000C                          L$212:
000C    57 65 64 00                                     Wed.
0010                          L$213:
0010    54 68 75 00                                     Thu.
0014                          L$214:
0014    46 72 69 00                                     Fri.
0018                          L$215:
0018    53 61 74 00                                     Sat.
001C                          L$216:
001C    3F 3F 3F 00                                     ???.
0020                          L$217:
0020    4A 61 6E 00                                     Jan.
0024                          L$218:
0024    46 65 62 00                                     Feb.
0028                          L$219:
0028    4D 61 72 00                                     Mar.
002C                          L$220:
002C    41 70 72 00                                     Apr.
0030                          L$221:
0030    4D 61 79 00                                     May.
0034                          L$222:
0034    4A 75 6E 00                                     Jun.
0038                          L$223:
0038    4A 75 6C 00                                     Jul.
003C                          L$224:
003C    41 75 67 00                                     Aug.
0040                          L$225:
0040    53 65 70 00                                     Sep.
0044                          L$226:
0044    4F 63 74 00                                     Oct.
0048                          L$227:
0048    4E 6F 76 00                                     Nov.
004C                          L$228:
004C    44 65 63 00                                     Dec.
0050                          L$229:
0050    31 32 30 30 00                                  1200.
0055                          L$230:
0055    32 34 30 30 00                                  2400.
005A                          L$231:
005A    34 38 30 30 00                                  4800.
005F                          L$232:
005F    39 36 30 30 00                                  9600.
0064                          L$233:
0064    31 39 32 30 30 00                               19200.
006A                          L$234:
006A    33 38 34 30 30 00                               38400.
0070                          L$235:
0070    35 37 36 30 30 00                               57600.
0076                          L$236:
0076    31 31 35 32 30 30 00                            115200.
007D                          L$237:
007D    45 6E 00                                        En.
0080                          L$238:
0080    44 69 73 00                                     Dis.
0084                          L$239:
0084    54 72 69 63 6B 6C 65 20 63 68 61 72 67 65 20 62 Trickle charge b
0094    61 63 6B 75 70 20 69 73 20 25 73 61 62 6C 65 64 ackup is %sabled
00A4    2E 0A 00                                        ...
00A7                          L$240:
00A7    6E 00                                           n.
00A9                          L$241:
00A9    00                                              .
00AA                          L$242:
00AA    20 69 73 00                                      is.
00AE                          L$243:
00AE    73 20 61 72 65 00                               s are.
00B4                          L$244:
00B4    20 20 20 25 64 20 64 69 6F 64 65 25 73 20 75 73    %d diode%s us
00C4    65 64 2E 20 20 41 25 73 20 25 64 4B 20 72 65 73 ed.  A%s %dK res
00D4    69 73 74 6F 72 20 69 73 20 73 65 6C 65 63 74 65 istor is selecte
00E4    64 2E 0A 00                                     d...
00E8                          L$245:
00E8    4E 56 52 41 4D 20 62 61 63 6B 75 70 3A 20 20 30 NVRAM backup:  0
00F8    3D 64 69 73 61 62 6C 65 2C 20 31 3D 53 75 70 65 =disable, 1=Supe
0108    72 63 61 70 28 34 2E 33 76 29 2C 20 32 3D 4E 69 rcap(4.3v), 2=Ni
0118    63 61 64 2F 4C 69 49 6F 6E 28 33 2E 36 76 29 20 cad/LiIon(3.6v) 
0128    5B 25 64 5D 3A 20 00                            [%d]: .
012F                          L$246:
012F    44 61 74 65 20 72 65 61 64 3A 20 20 25 73 20 25 Date read:  %s %
013F    30 32 78 2F 25 30 32 78 2F 25 30 32 78 25 30 32 02x/%02x/%02x%02
014F    78 0A 00                                        x..
0152                          L$247:
0152    44 61 74 65 20 5B 6D 6D 2F 64 64 2F 79 79 79 79 Date [mm/dd/yyyy
0162    5D 3A 20 00                                     ]: .
0166                          L$248:
0166    42 69 6E 61 72 79 20 64 61 74 65 3A 20 20 25 64 Binary date:  %d
0176    2F 25 64 2F 25 64 0A 00                         /%d/%d..
017E                          L$249:
017E    49 6E 76 61 6C 69 64 20 64 61 74 65 20 65 6E 74 Invalid date ent
018E    65 72 65 64 2E 20 20 28 63 6F 64 65 20 25 64 29 ered.  (code %d)
019E    0A 00                                           ..
01A0                          L$250:
01A0    42 43 44 20 64 61 74 65 20 74 6F 20 62 65 20 73 BCD date to be s
01B0    65 74 20 74 6F 20 44 53 31 33 30 32 3A 20 20 25 et to DS1302:  %
01C0    30 32 78 2F 25 30 32 78 2F 25 30 32 78 25 30 32 02x/%02x/%02x%02
01D0    78 20 20 64 6F 77 28 25 78 29 0A 00             x  dow(%x)..
01DC                          L$251:
01DC    54 68 65 20 63 6C 6F 63 6B 20 69 73 20 73 74 6F The clock is sto
01EC    70 70 65 64 2E 0A 00                            pped...
01F3                          L$252:
01F3    54 69 6D 65 20 72 65 61 64 3A 20 20 25 30 32 78 Time read:  %02x
0203    3A 25 30 32 78 3A 25 30 32 78 0A 00             :%02x:%02x..
020F                          L$253:
020F    54 69 6D 65 20 5B 68 68 3A 6D 6D 5B 3A 73 73 5D Time [hh:mm[:ss]
021F    5D 3A 20 00                                     ]: .
0223                          L$254:
0223    52 65 61 64 20 69 6E 20 25 64 3A 25 30 32 64 3A Read in %d:%02d:
0233    25 30 32 64 0A 00                               %02d..
0239                          L$255:
0239    53 65 72 69 61 6C 20 63 6F 6E 73 6F 6C 65 20 70 Serial console p
0249    6F 72 74 20 73 70 65 65 64 20 28 62 69 74 73 2F ort speed (bits/
0259    73 65 63 29 20 5B 25 73 5D 3A 00                sec) [%s]:.
0264                          L$256:
0264    49 6E 76 61 6C 69 64 20 73 65 6C 65 63 74 69 6F Invalid selectio
0274    6E 2C 20 73 75 70 70 6F 72 74 65 64 20 76 61 6C n, supported val
0284    75 65 73 20 61 72 65 3A 00                      ues are:.
028D                          L$257:
028D    20 25 73 00                                      %s.
0291                          L$258:
0291    0A 00                                           ..
0293                          L$259:
0293    44 72 69 76 65 20 25 63 3A 20 64 69 73 6B 20 74 Drive %c: disk t
02A3    79 70 65 20 5B 25 64 5D 3A 20 00                ype [%d]: .
02AE                          L$260:
02AE    46 6C 6F 70 70 79 20 54 79 70 65 73 20 61 72 65 Floppy Types are
02BE    3A 0A 20 20 20 20 30 20 3D 20 6E 6F 74 20 70 72 :.    0 = not pr
02CE    65 73 65 6E 74 0A 20 20 20 20 31 20 3D 20 33 36 esent.    1 = 36
02DE    30 4B 20 35 2E 32 35 22 0A 20 20 20 20 32 20 3D 0K 5.25".    2 =
02EE    20 31 2E 32 4D 20 35 2E 32 35 22 0A 20 20 20 20  1.2M 5.25".    
02FE    33 20 3D 20 20 37 32 30 4B 20 33 2E 35 22 0A 20 3 =  720K 3.5". 
030E    20 20 20 34 20 3D 20 31 2E 34 34 4D 20 33 2E 35    4 = 1.44M 3.5
031E    22 0A 00                                        "..
0321                          L$261:
0321    2A 2A 2A 20 57 69 74 68 20 74 77 6F 20 66 6C 6F *** With two flo
0331    70 70 69 65 73 2C 20 61 6E 20 49 42 4D 20 63 61 ppies, an IBM ca
0341    62 6C 65 20 77 69 74 68 20 61 74 20 74 77 69 73 ble with at twis
0351    74 20 69 73 20 4D 41 4E 44 41 54 4F 52 59 2E 20 t is MANDATORY. 
0361    2A 2A 2A 0A 00                                  ***..
0366                          L$262:
0366    43 6F 6E 6E 65 63 74 20 61 20 73 69 6E 67 6C 65 Connect a single
0376    20 66 6C 6F 70 70 79 20 77 69 74 68 20 61 20 63  floppy with a c
0386    61 62 6C 65 20 77 69 74 68 20 6E 6F 20 74 77 69 able with no twi
0396    73 74 2E 0A 00                                  st...
039B                          L$263:
039B    43 68 65 63 6B 73 75 6D 3D 25 64 28 25 64 29 0A Checksum=%d(%d).
03AB    0D 00                                           ..
03AD                          L$264:
03AD    4E 75 6D 62 65 72 20 28 30 2E 2E 32 29 20 6F 66 Number (0..2) of
03BD    20 5B 53 42 43 2D 31 38 38 5D 20 50 50 49 44 45  [SBC-188] PPIDE
03CD    20 66 69 78 65 64 20 64 69 73 6B 73 20 5B 25 64  fixed disks [%d
03DD    5D 3A 20 00                                     ]: .
03E1                          L$265:
03E1    4D 61 6B 65 20 64 69 73 6B 20 5B 31 2E 2E 25 64 Make disk [1..%d
03F1    5D 20 74 68 65 20 43 3A 20 64 72 69 76 65 20 5B ] the C: drive [
0401    25 64 5D 3A 20 00                               %d]: .
0407                          L$266:
0407    59 2F 6E 00                                     Y/n.
040B                          L$267:
040B    4E 2F 79 00                                     N/y.
040F                          L$268:
040F    43 68 65 63 6B 20 44 4F 53 20 62 6F 6F 74 20 73 Check DOS boot s
041F    69 67 6E 61 74 75 72 65 20 5B 25 73 5D 3A 20 00 ignature [%s]: .
042F                          L$269:
042F    25 73 00                                        %s.
0432                          L$270:
0432    50 50 49 44 45 00                               PPIDE.
0438                          L$271:
0438    55 4E 4B 4E 4F 57 4E 00                         UNKNOWN.
0440                          L$272:
0440    20 20 20 25 73 20 66 69 78 65 64 20 64 69 73 6B    %s fixed disk
0450    20 25 63 3A 20 20 20 20 28 30 78 25 78 29 0A 00  %c:    (0x%x)..
0460                          L$273:
0460    4D 6F 64 65 6C 3A 20 00                         Model: .
0468                          L$274:
0468    0A 53 65 72 69 61 6C 3A 20 00                   .Serial: .
0472                          L$275:
0472    0A 46 69 72 6D 77 61 72 65 3A 20 00             .Firmware: .
047E                          L$276:
047E    6F 75 74 00                                     out.
0482                          L$277:
0482    0A 47 65 6F 6D 65 74 72 79 3A 20 20 25 75 3A 25 .Geometry:  %u:%
0492    75 3A 25 75 20 20 20 77 69 74 68 25 73 20 4C 42 u:%u   with%s LB
04A2    41 20 73 75 70 70 6F 72 74 0A 00                A support..
04AD                          L$278:
04AD    43 75 72 72 65 6E 74 3A 20 20 20 25 75 3A 25 75 Current:   %u:%u
04BD    3A 25 75 20 20 20 63 61 70 61 63 69 74 79 3A 20 :%u   capacity: 
04CD    20 25 6C 75 0A 00                                %lu..
04D3                          L$279:
04D3    4C 42 41 20 53 65 63 74 6F 72 73 3A 20 20 25 6C LBA Sectors:  %l
04E3    75 00                                           u.
04E5                          L$280:
04E5    20 20 20 28 34 38 2D 62 69 74 29 3A 20 20 30 78    (48-bit):  0x
04F5    25 6C 78 25 30 38 6C 78 0A 00                   %lx%08lx..
04FF                          L$281:
04FF    54 72 61 6E 73 6C 61 74 65 64 20 67 65 6F 6D 65 Translated geome
050F    74 72 79 3A 20 20 25 75 3A 25 75 3A 25 75 20 20 try:  %u:%u:%u  
051F    20 63 61 70 61 63 69 74 79 3A 20 20 25 6C 64 0A  capacity:  %ld.
052F    00                                              .
0530                          L$282:
0530    53 44 20 63 61 72 64 5B 25 64 5D 3A 20 20 00    SD card[%d]:  .
053F                          L$283:
053F    6E 6F 20 63 61 72 64 0A 0A 00                   no card...
0549                          L$284:
0549    20 20 00                                          .
054C                          L$285:
054C    0A 43 53 44 20 76 65 72 73 69 6F 6E 20 25 64 2E .CSD version %d.
055C    30 20 20 20 00                                  0   .
0561                          L$286:
0561    43 6F 6D 6D 61 6E 64 20 43 6C 61 73 73 65 73 3A Command Classes:
0571    20 20 30 78 25 30 33 58 20 28 25 30 35 6F 29 0A   0x%03X (%05o).
0581    00                                              .
0582                          L$287:
0582    73 2F 6E 3A 25 32 30 6C 64 20 20 20 66 6D 77 3A s/n:%20ld   fmw:
0592    20 20 25 64 2E 25 64 20 20 20 64 2F 63 3A 20 20   %d.%d   d/c:  
05A2    25 64 2D 25 30 32 64 0A 00                      %d-%02d..
05AB                          L$288:
05AB    4C 42 41 53 75 70 70 6F 72 74 65 64 20 20 20 20 LBASupported    
05BB    55 73 65 72 41 64 64 72 65 73 73 61 62 6C 65 53 UserAddressableS
05CB    65 63 74 6F 72 73 20 25 6C 64 0A 00             ectors %ld..
05D7                          L$289:
05D7    20 20 20 43 3D 25 64 20 20 20 48 3D 25 64 20 20    C=%d   H=%d  
05E7    20 53 3D 25 64 0A 00                             S=%d..
05EE                          L$290:
05EE    53 44 63 61 72 64 00                            SDcard.
05F5                          L$291:
05F5    46 6C 6F 70 70 79 20 25 63 3A 20 74 79 70 65 20 Floppy %c: type 
0605    25 64 0A 00                                     %d..
0609                          L$292:
0609    50 50 49 3D 25 64 20 20 55 6E 69 74 73 3D 25 64 PPI=%d  Units=%d
0619    20 20 20 62 64 69 73 6B 3D 25 30 32 78 0A 00       bdisk=%02x..
0628                          L$293:
0628    46 69 78 65 64 5F 44 69 73 6B 5F 54 61 62 31 3A Fixed_Disk_Tab1:
0638    20 00                                            .
063A                          L$294:
063A    20 25 30 32 78 00                                %02x.
0640                          L$295:
0640    0A 0A 00                                        ...
0643                          L$296:
0643    46 69 78 65 64 5F 44 69 73 6B 5F 54 61 62 32 3A Fixed_Disk_Tab2:
0653    20 00                                            .
0655                          L$297:
0655    4E 56 52 41 4D 20 63 68 65 63 6B 73 75 6D 20 69 NVRAM checksum i
0665    73 20 69 6E 76 61 6C 69 64 0A 00                s invalid..
0670                          L$298:
0670    4E 56 52 41 4D 20 63 68 65 63 6B 73 75 6D 20 69 NVRAM checksum i
0680    73 20 76 61 6C 69 64 0A 00                      s valid..
0689                          L$299:
0689    54 68 65 20 63 6C 6F 63 6B 20 69 73 20 72 75 6E The clock is run
0699    6E 69 6E 67 2E 0A 00                            ning...
06A0                          L$300:
06A0    20 20 20 46 69 78 65 64 20 44 69 73 6B 20 53 65    Fixed Disk Se
06B0    74 75 70 0A 00                                  tup..

Segment: CONST2 WORD USE16 0000007E bytes
0000                          _dpm0:
0000    1F 1E 1F 1E 1F 1F 1E 1F 1E 1F 1F 1C             ............
000C                          _dow:
000C    00 00 00 00                                     DD	DGROUP:L$209
0010    04 00 00 00                                     DD	DGROUP:L$210
0014    08 00 00 00                                     DD	DGROUP:L$211
0018    0C 00 00 00                                     DD	DGROUP:L$212
001C    10 00 00 00                                     DD	DGROUP:L$213
0020    14 00 00 00                                     DD	DGROUP:L$214
0024    18 00 00 00                                     DD	DGROUP:L$215
0028    1C 00 00 00                                     DD	DGROUP:L$216
002C                          _month:
002C    20 00 00 00                                     DD	DGROUP:L$217
0030    24 00 00 00                                     DD	DGROUP:L$218
0034    28 00 00 00                                     DD	DGROUP:L$219
0038    2C 00 00 00                                     DD	DGROUP:L$220
003C    30 00 00 00                                     DD	DGROUP:L$221
0040    34 00 00 00                                     DD	DGROUP:L$222
0044    38 00 00 00                                     DD	DGROUP:L$223
0048    3C 00 00 00                                     DD	DGROUP:L$224
004C    40 00 00 00                                     DD	DGROUP:L$225
0050    44 00 00 00                                     DD	DGROUP:L$226
0054    48 00 00 00                                     DD	DGROUP:L$227
0058    4C 00 00 00                                     DD	DGROUP:L$228
005C                          _rates:
005C    50 00 00 00                                     DD	DGROUP:L$229
0060    55 00 00 00                                     DD	DGROUP:L$230
0064    5A 00 00 00                                     DD	DGROUP:L$231
0068    5F 00 00 00                                     DD	DGROUP:L$232
006C    64 00 00 00                                     DD	DGROUP:L$233
0070    6A 00 00 00                                     DD	DGROUP:L$234
0074    70 00 00 00                                     DD	DGROUP:L$235
0078    76 00 00 00                                     DD	DGROUP:L$236
007C                          _ftype_OK:
007C    1F 00                                           ..

Segment: _DATA WORD USE16 00000000 bytes

