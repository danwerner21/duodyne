Module: /mnt/fileserver/Vintage/Projects/duodyne/25 processor.80c188/firmware/BIOS/sio.c
GROUP: 'DGROUP' CONST,CONST2,_DATA

File contains no line numbers.
Segment: _TEXT BYTE USE16 0000012D bytes
0000                          putchar_:
0000    53                        push        bx 
0001    51                        push        cx 
0002    52                        push        dx 
0003    C8 02 00 00               enter       0x0002,0x00 
0007    88 46 FE                  mov         byte ptr -0x2[bp],al 
000A    3C 0A                     cmp         al,0x0a 
000C    75 06                     jne         L$1 
000E    B8 0D 00                  mov         ax,0x000d 
0011    E8 00 00                  call        @uart_putchar 
0014                          L$1:
0014    8A 46 FE                  mov         al,byte ptr -0x2[bp] 
0017    30 E4                     xor         ah,ah 
0019    E8 00 00                  call        @uart_putchar 
001C    C9                        leave       
001D                          L$2:
001D    5A                        pop         dx 
001E    59                        pop         cx 
001F                          L$3:
001F    5B                        pop         bx 
0020    C3                        ret         

Routine Size: 33 bytes,    Routine Base: _TEXT + 0000

0021                          putline_:
0021    53                        push        bx 
0022    89 C3                     mov         bx,ax 
0024                          L$4:
0024    8E C2                     mov         es,dx 
0026    26 8A 07                  mov         al,byte ptr es:[bx] 
0029    43                        inc         bx 
002A    84 C0                     test        al,al 
002C    74 F1                     je          L$3 
002E    30 E4                     xor         ah,ah 
0030    E8 00 00                  call        putchar_ 
0033    EB EF                     jmp         L$4 

Routine Size: 20 bytes,    Routine Base: _TEXT + 0021

0035                          getchar_:
0035    53                        push        bx 
0036    51                        push        cx 
0037    52                        push        dx 
0038    EB 04                     jmp         L$6 
003A                          L$5:
003A    85 C0                     test        ax,ax 
003C    75 0D                     jne         L$7 
003E                          L$6:
003E    E8 00 00                  call        @uart_getchar 
0041    89 C2                     mov         dx,ax 
0043    3D 0D 00                  cmp         ax,0x000d 
0046    75 F2                     jne         L$5 
0048    BA 0A 00                  mov         dx,0x000a 
004B                          L$7:
004B    80 3E 00 00 00            cmp         byte ptr _uart_echo,0x00 
0050    74 11                     je          L$8 
0052    83 FA 20                  cmp         dx,0x0020 
0055    7C 0C                     jl          L$8 
0057    83 FA 7F                  cmp         dx,0x007f 
005A    7D 07                     jge         L$8 
005C    88 D0                     mov         al,dl 
005E    30 E4                     xor         ah,ah 
0060    E8 00 00                  call        putchar_ 
0063                          L$8:
0063    88 D0                     mov         al,dl 
0065    EB B6                     jmp         L$2 

Routine Size: 50 bytes,    Routine Base: _TEXT + 0035

0067                          getline_:
0067    51                        push        cx 
0068    56                        push        si 
0069    57                        push        di 
006A    C8 02 00 00               enter       0x0002,0x00 
006E    89 C6                     mov         si,ax 
0070    89 D1                     mov         cx,dx 
0072    89 5E FE                  mov         word ptr -0x2[bp],bx 
0075    31 DB                     xor         bx,bx 
0077    FF 4E FE                  dec         word ptr -0x2[bp] 
007A                          L$9:
007A    3B 5E FE                  cmp         bx,word ptr -0x2[bp] 
007D    7D 54                     jge         L$13 
007F    E8 00 00                  call        getchar_ 
0082    88 C2                     mov         dl,al 
0084    30 F6                     xor         dh,dh 
0086    89 D0                     mov         ax,dx 
0088    83 FA 20                  cmp         dx,0x0020 
008B    7C 12                     jl          L$10 
008D    83 FA 7F                  cmp         dx,0x007f 
0090    7D 0D                     jge         L$10 
0092    89 DF                     mov         di,bx 
0094    43                        inc         bx 
0095    8E C1                     mov         es,cx 
0097    01 F7                     add         di,si 
0099    26 88 05                  mov         byte ptr es:[di],al 
009C    E9 6E 00                  jmp         L$18 
009F                          L$10:
009F    8D 57 01                  lea         dx,0x1[bx] 
00A2    3D 0A 00                  cmp         ax,0x000a 
00A5    72 13                     jb          L$11 
00A7    76 1D                     jbe         L$12 
00A9    3D 7F 00                  cmp         ax,0x007f 
00AC    74 27                     je          L$14 
00AE    3D 18 00                  cmp         ax,0x0018 
00B1    74 45                     je          L$16 
00B3    3D 15 00                  cmp         ax,0x0015 
00B6    74 40                     je          L$16 
00B8    EB 4D                     jmp         L$17 
00BA                          L$11:
00BA    3D 09 00                  cmp         ax,0x0009 
00BD    74 25                     je          L$15 
00BF    3D 08 00                  cmp         ax,0x0008 
00C2    74 11                     je          L$14 
00C4    EB 41                     jmp         L$17 
00C6                          L$12:
00C6    30 E4                     xor         ah,ah 
00C8    E8 00 00                  call        putchar_ 
00CB    8E C1                     mov         es,cx 
00CD    01 F3                     add         bx,si 
00CF    26 C6 07 00               mov         byte ptr es:[bx],0x00 
00D3                          L$13:
00D3    EB 4F                     jmp         L$21 
00D5                          L$14:
00D5    85 DB                     test        bx,bx 
00D7    7E 34                     jle         L$18 
00D9    B8 00 00                  mov         ax,offset DGROUP:L$22 
00DC    8C DA                     mov         dx,ds 
00DE    E8 00 00                  call        putline_ 
00E1    4B                        dec         bx 
00E2    EB 29                     jmp         L$18 
00E4                          L$15:
00E4    B8 20 00                  mov         ax,0x0020 
00E7    E8 00 00                  call        putchar_ 
00EA    89 DF                     mov         di,bx 
00EC    89 D3                     mov         bx,dx 
00EE    8E C1                     mov         es,cx 
00F0    01 F7                     add         di,si 
00F2    26 C6 05 20               mov         byte ptr es:[di],0x20 
00F6    EB 15                     jmp         L$18 
00F8                          L$16:
00F8    85 DB                     test        bx,bx 
00FA    74 11                     je          L$18 
00FC    B8 00 00                  mov         ax,offset DGROUP:L$22 
00FF    8C DA                     mov         dx,ds 
0101    E8 00 00                  call        putline_ 
0104    4B                        dec         bx 
0105    EB F1                     jmp         L$16 
0107                          L$17:
0107    B8 07 00                  mov         ax,0x0007 
010A    E8 00 00                  call        putchar_ 
010D                          L$18:
010D    3B 5E FE                  cmp         bx,word ptr -0x2[bp] 
0110    74 03                     je          L$20 
0112                          L$19:
0112    E9 65 FF                  jmp         L$9 
0115                          L$20:
0115    B8 07 00                  mov         ax,0x0007 
0118    E8 00 00                  call        putchar_ 
011B    B8 08 00                  mov         ax,0x0008 
011E    E8 00 00                  call        putchar_ 
0121    4B                        dec         bx 
0122    EB EE                     jmp         L$19 
0124                          L$21:
0124    89 F0                     mov         ax,si 
0126    89 CA                     mov         dx,cx 
0128    C9                        leave       
0129    5F                        pop         di 
012A    5E                        pop         si 
012B    59                        pop         cx 
012C    C3                        ret         

Routine Size: 198 bytes,    Routine Base: _TEXT + 0067

No disassembly errors

Segment: CONST WORD USE16 00000004 bytes
0000                          L$22:
0000    08 20 08 00                                     . ..

Segment: CONST2 WORD USE16 00000001 bytes
0000                          _uart_echo:
0000    01                                              .

Segment: _DATA WORD USE16 00000000 bytes

