     1                                  ;========================================================================
     2                                  ; tests.asm -- various h/w tests
     3                                  ;------------------------------------------------------------------------
     4                                  ;
     5                                  ; Compiles with NASM 2.07, might work with other versions
     6                                  ;
     7                                  ; Copyright (C) 2010 Sergey Kiselev.
     8                                  ; Provided for hobbyist use on the N8VEM SBC-188 board.
     9                                  ;  
    10                                  ; This program is free software: you can redistribute it and/or modify
    11                                  ; it under the terms of the GNU General Public License as published by
    12                                  ; the Free Software Foundation, either version 3 of the License, or
    13                                  ; (at your option) any later version.
    14                                  ;
    15                                  ; This program is distributed in the hope that it will be useful,
    16                                  ; but WITHOUT ANY WARRANTY; without even the implied warranty of
    17                                  ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    18                                  ; GNU General Public License for more details.
    19                                  ;
    20                                  ; You should have received a copy of the GNU General Public License
    21                                  ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
    22                                  ;
    23                                  ; TODO:
    24                                  ;========================================================================
    25                                  
    26                                  	extern	_cprintf
    27                                  
    28                                  %include	"config.asm"
    29                              <1> ;/*
    30                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    31                              <1> ; ANSI.CFG
    32                              <1> ;   Copied to CONFIG.ASM for general release.
    33                              <1> ;
    34                              <1> ;       Modify the parameters below to reflect your system
    35                              <1> ;
    36                              <1> ;
    37                              <1> ;   This version is for assembly by  NASM 0.98.39 or later
    38                              <1> ;
    39                              <1> ;   Copyright (C) 2010,2011 John R. Coffman.  All rights reserved.
    40                              <1> ;   Provided for hobbyist use on the N8VEM SBC-188 board.
    41                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    42                              <1> ;
    43                              <1> ; Define the serial terminal that the Video BIOS must emulate
    44                              <1> ; Set one of the following to 1
    45                              <1> ; If you have no idea what to choose, set TTY to 1
    46                              <1> TTY     equ     0       ; hardcopy -- cannot position the cursor
    47                              <1> DUMB    equ     0       ; dumb CRT -- ^H, ^J, ^K, ^L can move the cursor
    48                              <1> ANSI    equ     1       ; very smart, like a VT-100
    49                              <1> WYSE    equ     0       ; very smart Wyse series (30, 50, ...)
    50                              <1> ; others may get added in the future
    51                              <1> ;  ONE OF THE ABOVE must BE SET TO 1!!!!!
    52                              <1> ;
    53                              <1> ; Define the UART startup bit rate - 1200-19200 are most common
    54                              <1> ;UART_RATE	equ	0		; 1200
    55                              <1> ;UART_RATE	equ	1		; 2400
    56                              <1> ;UART_RATE	equ	2		; 4800
    57                              <1> UART_RATE	equ	3		; 9600
    58                              <1> ;UART_RATE	equ	4		; 19200
    59                              <1> ;UART_RATE	equ	5		; 38400
    60                              <1> ;UART_RATE	equ	6		; 57600
    61                              <1> ;UART_RATE	equ	7		; 115200
    62                              <1> 
    63                              <1> ; Does the serial terminal use the DSR/DTR protocol for flow control?
    64                              <1> ;UART_DSR_PROTOCOL	equ		1	; Yes!
    65                              <1> UART_DSR_PROTOCOL       equ             WYSE    ; Wyse always uses it
    66                              <1> 						; but not ANSI
    67                              <1> ; Define the size of the ROM image on the system in Kilobytes
    68                              <1> ; It may be smaller than the actual EPROM in use.
    69                              <1> ; The following sizes are supported:  32, 64, 128, and 256
    70                              <1> %ifndef ROM
    71                              <1> ROM             equ     32              ; 64 is the default
    72                              <1> %endif
    73                              <1> 
    74                              <1> ; Define the number of Wait States at which the ROM operates
    75                              <1> ROM_WS          equ     1               ; 0..3  (1 is the default)
    76                              <1> 
    77                              <1> ; Define the size in Kilobytes of DOS RAM (low SRAM plus EMM allocate RAM)
    78                              <1> ; This is a desired size and will only be present if a 4MEM board is added
    79                              <1> RAM_DOS         equ     640
    80                              <1> 
    81                              <1> ; Define the size of the low SRAM on the system in Kilobytes
    82                              <1> ; the default is 512 kilobytes
    83                              <1> RAM             equ     512             ; (512 is the default)
    84                              <1> 
    85                              <1> ; Define the number of Wait States at which the RAM operates
    86                              <1> RAM_WS          equ     0               ; 0..3  (0 is the default)
    87                              <1> 
    88                              <1> ; Define the number of Wait States for Local Peripheral devices (600-7FF)
    89                              <1> LCL_IO_WS       equ     1               ; 0..3  (1 is the default)
    90                              <1> 
    91                              <1> ; Define the number of Wait States for ECB BUS peripheral devices (4xx)
    92                              <1> BUS_IO_WS       equ     3               ; 0..3  (3 is the default)
    93                              <1> 
    94                              <1> ; Define the time zone in which we build the Relocatable BIOS
    95                              <1> %ifndef TIMEZONE
    96                              <1> %define TIMEZONE "CST"
    97                              <1> %endif
    98                              <1> 
    99                              <1> ; Has the REDBUG debugger been loaded?
   100                              <1> %ifndef SOFT_DEBUG
   101                              <1> %define SOFT_DEBUG 0
   102                              <1> %endif
   103                              <1> 
   104                              <1> ; Should the BIOS include "Tiny BASIC" in the image?
   105                              <1> %ifndef TBASIC
   106                              <1> TBASIC          equ     1		; default is 1
   107                              <1> %endif
   108                              <1> 
   109                              <1> ; Should the BIOS include the Floating Point Emulator?  The 80188 does
   110                              <1> ; not allow a floating point co-processor, so this is probably a good idea.
   111                              <1> %ifndef FPEM
   112                              <1> FPEM            equ     1               ; default is 1
   113                              <1> %endif
   114                              <1> 
   115                              <1> ; Define the maximum number of EMM (4MEM) boards supported
   116                              <1> EMM_BOARDS      equ     0
   117                              <1> 
   118                              <1> ; Should the Floating Point Emulator use temporary storage in the EBDA
   119                              <1> ; or at locations 0280h..3FFh in low memory?
   120                              <1> %if SOFT_DEBUG
   121                              <1> FPEM_USE_EBDA   equ     FPEM            ; default is 0
   122                              <1> %else
   123                              <1> FPEM_USE_EBDA   equ     0; FPEM            ; default is 0
   124                              <1> %endif
   125                              <1> 
   126                              <1> ; Define the size of the EPROM that is to be installed on the system
   127                              <1> ; It may be larger than the actual ROM image to be generated.
   128                              <1> %ifndef CHIP
   129                              <1> CHIP            equ     64
   130                              <1> %endif
   131                              <1> 
   132                              <1> ; Does the SBC-188 00.4 board have the LS138/LS08 piggyback fix
   133                              <1> ; Set to 1 for the SBC-188 v1.0 and later production boards
   134                              <1> ;FDC_PIGGYBACK_FIX       equ     0       ; Fix not installed
   135                              <1> FDC_PIGGYBACK_FIX       equ     1       ; fix  IS  installed
   136                              <1> 
   137                              <1> ; On SBC-188 rev 00.4 board, there is a published hardware fix (2010-09-18).
   138                              <1> ; If the wiring update is installed, or you have a later board, then
   139                              <1> ; set this to 0.  If you are using the software workaround, then set this
   140                              <1> ; to 1.  The rev 1.0 board has this fix already.
   141                              <1> NEED_TIMER_FIX  equ     0               ; have revised hardware
   142                              <1> ;NEED_TIMER_FIX  equ     1               ; use workaround
   143                              <1> 
   144                              <1> ; Define the UART oscillator speed
   145                              <1> UART_OSC        equ     1843200         ; 1.8432 Mhz is specified
   146                              <1> 
   147                              <1> 
   148                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   149                              <1> ; end of the User configuration
   150                              <1> ;       Do Not modify anything below this point
   151                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   152                              <1> 
   153                              <1> ; Define existence of any uart chip
   154                              <1> UART		equ	TTY+DUMB+ANSI+WYSE
   155                              <1> startuplength   equ     512                     ; may be up to 1024
   156                              <1> startseg        equ     0FFFFh - (ROM*64) + 1
   157                              <1> highrom         equ     (ROM*400h)&0FFFFh
   158                              <1> startupseg      equ     0FFFFh - (startuplength>>4) + 1
   159                              <1> bios_data_seg   equ     040h            ; segment of BIOS data area
   160                              <1> 
   161                              <1> 
   162                              <1> %define ARG(n) [bp+2+(n)*2]
   163                              <1> 
   164                              <1> %macro  check   1.nolist
   165                              <1>  %if (%1)
   166                              <1>    %error Check Failure: %1
   167                              <1>  %endif
   168                              <1> %endm
   169                              <1> %macro  range   3.nolist
   170                              <1>  %if (%1)<(%2)
   171                              <1>    %error Out of Range: %1
   172                              <1>  %elif (%1)>(%3)
   173                              <1>    %error Out of Range: %1
   174                              <1>  %endif
   175                              <1> %endm
   176                              <1> _terminal equ UART
   177                              <1>  check   RAM_DOS&15
   178                              <1>  check   RAM&(RAM-1)
   179                              <1>  check   ROM&(ROM-1)
   180                              <1>  range   RAM,32,512
   181                              <1>  range   ROM,32,256
   182                              <1>  range   RAM_WS,0,3
   183                              <1>  range   ROM_WS,0,3
   184                              <1>  range   RAM_DOS,RAM,(1024-ROM)
   185                              <1>  range   LCL_IO_WS,0,3
   186                              <1>  range   BUS_IO_WS,0,3
   187                              <1>  range   UART_OSC,500000,16000000
   188                              <1>  range   UART_RATE,0,7
   189                              <1>  range	 UART,0,1
   190                              <1>  range	 _terminal,1,2
   191                              <1> 
   192                              <1> %ifndef SOFT_DEBUG
   193                              <1> %define SOFT_DEBUG 0
   194                              <1> %endif
   195                              <1> 
   196                              <1> %ifndef TRACE
   197                              <1> %define TRACE 0
   198                              <1> %endif
   199                              <1> 
   200                              <1> %ifdef MAKE_OBJECT_FILE
   201                              <1>         segment _DATA WORD PUBLIC CLASS=DATA
   202                              <1>         export _ROMsize
   203                              <1>         export _CHIPsize
   204                              <1> _ROMsize        dw      ROM
   205                              <1> _CHIPsize       dw      CHIP
   206                              <1> %endif
   207                              <1> ; end of the Hardware configuration file
   208                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   209                              <1> ;*/
    29                                  %include	"equates.asm"
    30                              <1> ;========================================================================
    31                              <1> ; EQUATES.ASM -- Lots of Defintions for Relocatable BIOS
    32                              <1> ;========================================================================
    33                              <1> ;   for the N8VEM SBC-188 v.00.4 and 00.5
    34                              <1> ;
    35                              <1> ;   This version is for assembly by  NASM 0.98.39 or later
    36                              <1> ;
    37                              <1> ; Copyright (C) 2010 John R. Coffman.  All rights reserved.
    38                              <1> ; Provided for hobbyist use on the N8VEM SBC-188 board.
    39                              <1> ;
    40                              <1> ; This program is free software: you can redistribute it and/or modify
    41                              <1> ; it under the terms of the GNU General Public License as published by
    42                              <1> ; the Free Software Foundation, either version 3 of the License, or
    43                              <1> ; (at your option) any later version.
    44                              <1> ;
    45                              <1> ; This program is distributed in the hope that it will be useful,
    46                              <1> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
    47                              <1> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    48                              <1> ; GNU General Public License for more details.
    49                              <1> ;
    50                              <1> ; You should have received a copy of the GNU General Public License
    51                              <1> ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
    52                              <1> ;
    53                              <1> ;========================================================================
    54                              <1> 
    55                              <1>         global  FPEM_segment
    56                              <1> 
    57                              <1> 
    58                              <1> %include "segdef.asm"
    59                              <2> ;========================================================================
    60                              <2> ; SEGDEF.ASM -- Lots of Defintions for Relocatable BIOS
    61                              <2> ;========================================================================
    62                              <2> ;   for the N8VEM SBC-188 v.00.4 and 00.5
    63                              <2> ;
    64                              <2> ;   This version is for assembly by  NASM 0.98.39 or later
    65                              <2> ;
    66                              <2> ; Copyright (C) 2010 John R. Coffman.  All rights reserved.
    67                              <2> ; Provided for hobbyist use on the N8VEM SBC-188 board.
    68                              <2> ;
    69                              <2> ; This program is free software: you can redistribute it and/or modify
    70                              <2> ; it under the terms of the GNU General Public License as published by
    71                              <2> ; the Free Software Foundation, either version 3 of the License, or
    72                              <2> ; (at your option) any later version.
    73                              <2> ;
    74                              <2> ; This program is distributed in the hope that it will be useful,
    75                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
    76                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    77                              <2> ; GNU General Public License for more details.
    78                              <2> ;
    79                              <2> ; You should have received a copy of the GNU General Public License
    80                              <2> ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
    81                              <2> ;
    82                              <2> ;========================================================================
    83                              <2> 
    84                              <2> %ifndef __SEGDEF_
    85                              <2> %define __SEGDEF_
    86                              <2> 
    87                              <2> 	SEGMENT  _TEXT ALIGN=2 PUBLIC CLASS=CODE
    88                              <2>         SEGMENT  CONST ALIGN=2 PUBLIC CLASS=DATA
    89                              <2>         SEGMENT  CONST2 ALIGN=2 PUBLIC CLASS=DATA
    90                              <2> 	SEGMENT  _DATA ALIGN=16 PUBLIC CLASS=DATA
    91                              <2> 	SEGMENT  _BSS  ALIGN=2 PUBLIC CLASS=BSS
    92                              <2> ;;;        SEGMENT  _BASIC ALIGN=16 PUBLIC CLASS=BASIC
    93                              <2> 
    94                              <2> 	GROUP	DGROUP CONST CONST2 _DATA _BSS
    95                              <2> 
    96                              <2> %endif
    97                              <2> 
    59                              <1> %include "ascii.asm"
    60                              <2> ; ascii.asm
    61                              <2> ;
    62                              <2> CTRL            equ     1Fh     ; masks a character to CTRL-x
    63                              <2> 
    64                              <2> NUL     equ     00h
    65                              <2> BEL     equ     (CTRL & 'G')
    66                              <2> BS      equ     08h		; ^H
    67                              <2> HT      equ     09h		; ^I
    68                              <2> LF	equ	0Ah		; ^J
    69                              <2> NL      equ     LF
    70                              <2> VT	equ	0Bh		; ^K
    71                              <2> FWD	equ	0Ch		; ^L
    72                              <2> CR	equ	0Dh
    73                              <2> XON     equ     (CTRL & 'Q')
    74                              <2> XOFF    equ     (CTRL & 'S')
    75                              <2> DC1     equ     XON
    76                              <2> DC3     equ     XOFF
    77                              <2> ESC     equ	1Bh
    78                              <2> 
    79                              <2> 
    60                              <1> 
    61                              <1> 
    62                              <1> ; POST error codes. Presently one byte but can expand to word.
    63                              <1> ER_BIOS equ	01h		; Bad ROM bios checksum, patch last byte
    64                              <1> ER_RAM	equ	02h		; Bad RAM in main memory, replace
    65                              <1> ER_CRT	equ	04h		; Bad RAM in video card, replace
    66                              <1> ER_FDC	equ	08h		; Bad FDC
    67                              <1> ER_UNK1	equ	10h		; {unassigned}
    68                              <1> ER_MEM	equ	20h		; Bad RAM in vector area, replace
    69                              <1> ER_ROM	equ	40h		; Bad ROM in expansion area, bad checksum
    70                              <1> ER_UNK2	equ	80h		; {unassigned}
    71                              <1> 
    72                              <1> 
    73                              <1> 
    74                              <1> ;; ************************ BIOS Data Segment ******************************
    75                              <1> ;; BIOS data segment - not all will  be used
    76                              <1> ;                struc   BIOS_DATA_AREA  ; at 0040:0000
    77                              <1> %include "bda.inc"
    78                              <2> ;/*======================================================================
    79                              <2> ; bda.inc -- BIOS data area definitions
    80                              <2> ;========================================================================
    81                              <2> ;   for the N8VEM SBC-188
    82                              <2> ;
    83                              <2> ;   This version is for assembly by  NASM 0.98.39 or later
    84                              <2> ;
    85                              <2> ; Copyright (C) 2013 John R. Coffman.  All rights reserved.
    86                              <2> ; Provided for hobbyist use on the N8VEM SBC-188 board.
    87                              <2> ;
    88                              <2> ; This program is free software: you can redistribute it and/or modify
    89                              <2> ; it under the terms of the GNU General Public License as published by
    90                              <2> ; the Free Software Foundation, either version 3 of the License, or
    91                              <2> ; (at your option) any later version.
    92                              <2> ;
    93                              <2> ; This program is distributed in the hope that it will be useful,
    94                              <2> ; but WITHOUT ANY WARRANTY; without even the implied warranty of
    95                              <2> ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    96                              <2> ; GNU General Public License for more details.
    97                              <2> ;
    98                              <2> ; You should have received a copy of the GNU General Public License
    99                              <2> ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
   100                              <2> ;
   101                              <2> ;========================================================================
   102                              <2> 
   103                              <2> 			;*/ extern				/*
   104                              <2> 	ABSOLUTE  0	;*/ struct BDA {			/*
   105 00000000 ????????????????    <2> serial_ports    resw    4	;*/	word	serial_ports[4];	/*
   106 00000008 ????????????????    <2> parallel_ports  resw    4	;*/	word	parallel_ports[4];	/*
   107 00000010 ????                <2> equipment_flag  resw    1	;*/	EQFL	equipment_flag;		/*
   108                              <2> ;	dw	?		; 40:10 	; Equipment present word
   109                              <2> ;  						;  = (1 iff floppies) *     1.
   110                              <2> ;                                               ;  + (1 iff 187     ) *     2.
   111                              <2> ;  						;  + (#+1 64K sys ram) *    4.
   112                              <2> ;  						;  + (init crt mode ) *    16.
   113                              <2> ;  						;  + (# of floppies ) *    64.
   114                              <2> ;  						;  + (# serial ports) *   512.
   115                              <2> ;  						;  + (1 iff toy port) *  4096.
   116                              <2> ;                                               ;  + (1 iff modem   ) *  8192.
   117                              <2> ;  						;  + (# parallel LPT) * 16384.
   118 00000012 ??                  <2> mfg_test_flags  resb    1	;*/	byte	mfg_test_flags;	/* 40:12 unused by us
   119 00000013 ????                <2> memory_size     resw    1	;*/	word	memory_size;	/* 40:13 kilobytes
   120                              <2> uart_kbd_ctrl_R	equ	$	;*/				/*** JRC: count of ctrl-R's for reboot
   121 00000015 ??                  <2> IPL_errors      resb    1	;*/	byte	IPL_errors;	/* 40:15 IPL errors<-table/scratchpad
   122 00000016 ??                  <2> sbc188_rev       resb    1	;*/	byte	sbc188_rev;	/* was 'unused_01' before BIOS047
   123                              <2> ;;---------------[Keyboard data area]------------;
   124 00000017 ????                <2> keyboard_flags_0 resw   1	;*/	word	keyboard_flags_0;  /* 40:17 Shift/Alt/etc. keyboard flags
   125                              <2> keyboard_flags_1 equ	$-1	;     2nd byte	keyboard_flags_1;  
   126 00000019 ??                  <2> keypad_char	resb	1	;*/	byte	keypad_char;	/* 40:19 Alt-KEYPAD char. goes here
   127 0000001A ????                <2> kbd_buffer_head resw    1	;*/	word	kbd_buffer_head;   /* 40:1A --> keyboard buffer head
   128 0000001C ????                <2> kbd_buffer_tail resw    1	;*/	word	kbd_buffer_tail;   /* 40:1C --> keyboard buffer tail
   129 0000001E <res 20h>           <2> kbd_buffer      resw    16	;*/	word	kbd_buffer[16];	/* 40:1E Keyboard Buffer (Scan,Value)
   130                              <2> kbd_buffer_last	equ	$	;*/				/*
   131                              <2> ;;---------------[Diskette data area]------------;
   132 0000003E ??                  <2> fdc_drv_calib   resb    1	;*/	byte	fdc_drive_calib;   /* 40:3E
   133 0000003F ??                  <2> fdc_motor_LDOR  resb    1	;*/	byte	fdc_motor_LDOR;	   /* 40:3F Motor, DMA, select control
   134 00000040 ??                  <2> fdc_motor_ticks resb    1	;*/	byte	fdc_motor_ticks;   /* 40:40 ticks til motor off
   135 00000041 ??                  <2> fdc_status      resb    1	;*/	byte	fdc_status;	   /* 40:41
   136                              <2> ;				Floppy return code stat byte
   137                              <2> ;				;  1 = bad ic 765 command req.
   138                              <2> ;				;  2 = address mark not found
   139                              <2> ;				;  3 = write to protected disk
   140                              <2> ;				;  4 = sector not found
   141                              <2> ;				;  8 = data late (DMA overrun)
   142                              <2> ;				;  9 = DMA failed 64K page end
   143                              <2> ;				; 16 = bad CRC on floppy read
   144                              <2> ;				; 32 = bad NEC 765 controller
   145                              <2> ;				; 64 = seek operation failed
   146                              <2> ;				;128 = disk drive timed out
   147 00000042 ??????????????      <2> fdc_ctrl_status resb    7	;*/	byte	fdc_ctrl_status[7];  /* 40:42 Status bytes from NEC 765
   148                              <2> ;;---------------[Video display area]------------;
   149 00000049 ??                  <2> video_mode      resb    1	;*/	byte	video_mode;	/* 40:49
   150                              <2> ;			 	; Current CRT mode  (software)
   151                              <2> ;				;  0 = 40 x 25 text (no color)
   152                              <2> ;				;  1 = 40 x 25 text (16 color)
   153                              <2> ;				;  2 = 80 x 25 text (no color)
   154                              <2> ;				;  3 = 80 x 25 text (16 color)
   155                              <2> ;				;  4 = 320 x 200 grafix 4 color
   156                              <2> ;				;  5 = 320 x 200 grafix 0 color
   157                              <2> ;				;  6 = 640 x 200 grafix 0 color
   158                              <2> ;				;  7 = 80 x 25 text (mono card)
   159 0000004A ????                <2> video_columns   resw    1	;*/	word video_columns;	/* 40:4A Columns on CRT screen
   160 0000004C ????                <2> video_regen_bytes  resw 1	;*/	word video_regen_bytes;	/* 40:4C Bytes in the regen region
   161 0000004E ????                <2> video_regen_offset resw 1	;*/	word video_regen_offset;/* 40:4E Byte offset in regen region
   162 00000050 <res 10h>           <2> video_cursor_pos  resw  8	;*/	word video_cursor_pos[8];  /* 40:50 Cursor pos for up to 8 pages
   163 00000060 ????                <2> video_cursor_mode resw  1	;*/	word video_cursor_mode;	/* 40:60 Current cursor mode setting
   164 00000062 ??                  <2> video_page      resb    1	;*/	byte video_page;	/* 40:62 Current page on display
   165 00000063 ????                <2> video_base_seg  resw    1	;*/	word video_base_seg;	/* 40:63 Base address (B000h or B800h)
   166 00000065 ??                  <2> video_hw_mode   resb    1	;*/	byte video_hw_mode;	/* 40:65 ic 6845 mode reg. (hardware)
   167 00000066 ??                  <2> video_cga_palette resb  1	;*/	byte video_cga_palette;	/* 40:66 Current CGA palette
   168                              <2> ;;---------------[Used to setup ROM]-------------;
   169 00000067 ????????            <2> eprom_address   resd    1	;*/	dword eprom_address;	/* 40:67 Eprom base Offset,Segment
   170 0000006B ??                  <2> spurious_irq    resb    1	;*/	byte spurious_irq;	/* 40:6B Last spurious interrupt IRQ
   171                              <2> ;;---------------[Timer data area]---------------;
   172 0000006C ????????            <2> timer_ticks     resd    1	;*/	dword timer_ticks;	/* 40:6C Ticks since midnight (lo,hi)
   173 00000070 ??                  <2> timer_new_day   resb    1	;*/	byte timer_new_day;	/* 40:70 Non-zero if new day
   174                              <2> ;;---------------[System data area]--------------;
   175 00000071 ??                  <2> break_flag      resb    1	;*/	byte break_flag;	/* 40:71 Sign bit set iff break
   176 00000072 ????                <2> warm_boot       resw    1	;*/	word warm_boot;		/* 40:72 Warm boot iff==1234h
   177                              <2> ;;---------------[Hard disk scratchpad]----------;
   178 00000074 ????????            <2> hdd_scratch     resd    1	;*/	word hdd_scratch[2];	/* 40:74
   179                              <2> ;;---------------[Timout areas/PRT/LPT]----------;
   180 00000078 ????????            <2> lpt_timeout     resb    4	;*/	byte lpt_timeout[4];	/* 40:78 Ticks for LPT 1-4 timeouts
   181 0000007C ????????            <2> com_timeout     resb    4	;*/	byte com_timeout[4];	/* 40:7C Ticks for COM 1-4 timeouts
   182                              <2> ;;---obsolete----[Keyboard buf start/end]---jrc--;
   183 00000080 ????                <2> kbd_buffer_start resw   1	;*/	word kbd_buffer_start;	/* 40:80 KBD buffer head (PC/AT)
   184 00000082 ????                <2> kbd_buffer_end  resw    1	;*/	word kbd_buffer_end;	/* 40:82 KBD buffer tail (PC/AT)
   185                              <2> ;;---------------[EGA stuff]---------------------;
   186 00000084 ??????????????      <2> EGA_stuff	resb	7	;*/	byte EGA_stuff[7];	/* 40:84 Unspecified EGA data
   187                              <2> ;;---------------[Floppy/Fixed Media Info]-------------;
   188 0000008B ??                  <2> fdc_last_rate	resb	1	;*/	byte fdc_last_rate;	/* 40:8B Last floppy step rate/data rate?
   189 0000008C ????????            <2> fx_misc_unused	resb	4	;*/	byte fx_misc_unused[4];	/* 40:8C Fixed disk miscellaneous ???
   190 00000090 ????                <2> fdc_disk_state	resb	2	;*/	byte fdc_disk_state[2];	/* 40:90 Floppy disk state
   191 00000092 ????                <2> fdc_op_start	resb	2	;*/	byte fdc_op_start[2];	/* 40:92 Floppy operation start state machine
   192 00000094 ????                <2> fdc_cylinder	resb	2	;*/	byte fdc_cylinder[2];	/* 40:94 Floppy present cylinder
   193                              <2> ;;---------------[Additional KBD flags]----------------;
   194 00000096 ??                  <2> kbd_flag_3	resb	1	;*/	byte kbd_flag_3;	/* 40:96 kbd ???
   195 00000097 ??                  <2> kbd_flag_2	resb	1	;*/	byte kbd_flag_2;	/* 40:97 kbd ???
   196                              <2> ;;---------------[RTC/timer1 data]---------------------;
   197 00000098 ????????            <2> user_semaphore	resw	2	;*/	byte *user_semaphore;	/* 40:98 User semaphore in (bit 7)
   198 0000009C ????????            <2> rtc_count	resd	1	;*/	dword rtc_count;	/* 40:9C RTC tick counter
   199 000000A0 ??                  <2> rtc_wait_active	resb	1	;*/	byte rtc_wait_active;	/* 40:A0 Busy=01, Posted=80h, 
   200                              <2> ;;---------------[Cassette I/O stuff]------------------;
   201 000000A1 ??                  <2> last_val	resb	1	;*/	byte last_val;		/* 40:A1 Last byte read value
   202 000000A2 ????                <2> crc_reg		resw	1	;*/	word crc_reg;		/* 40:A2 CRC accumulation area
   203                              <2> ;									Post Acknowleged=00;
   204 000000A4 ??                  <2> EGA_data	resb	1	;*/	byte EGA_data;		/* 40:A4 Various usage
   205 000000A5 ????                <2> SDstatus	resb	2	;*/	byte SDstatus[2];	/* 40:A5 Status byte from command
   206 000000A7 ????                <2> SDcardtype	resb	2	;*/	byte SDcardtype[2];	/* 40:A7 SDcard type SDSC=2, HC=3, ...
   207                              <2> ;
   208 000000A9 ????????            <2> fixed_disk_tab	resb	4	;*/	byte fixed_disk_tab[4];	/* dispatch table to fixed disk drivers
   209 000000AD ??                  <2> wait12_count	resb	1	;*/	byte wait12_count;	/* 40:AD 12usec CX count
   210 000000AE ??                  <2> lock_count	resb	1	;*/	byte lock_count;	/* 40:AE lock level counter
   211 000000AF ??                  <2> EMS_start       resb    1	;*/	byte EMS_start;		/* start EMS allocation from here
   212                              <2> fx80		equ	$	;*/	struct EDD_disk fx80;	/* fixed disk parameter area 0
   213 000000B0 ????                <2> fx_log_cylinders resw   1	;	word fx_log_cylinders;	 logical number of cylinders
   214 000000B2 ??                  <2> fx_log_heads    resb    1	;	byte fx_log_heads;	 logical number of heads
   215 000000B3 ??                  <2> fx_signature	resb	1	;	byte fx_signature;	 A0h signature = translated geom
   216 000000B4 ??                  <2> fx_phys_sectors	resb    1       ;	byte fx_phys_sectors;	 physical number of sectors per track
   217 000000B5 ????                <2> fx_LBA_high     resw    1       ;	word fx_LBA_high;	 high word of LBA28 number of sectors
   218 000000B7 ??                  <2> fx_reserved	resb	1	;	byte fx_reserved;	 reserved for future use
   219 000000B8 ??                  <2> fx_drive_control resb   1       ;	byte fx_drive_control;	 flag bits for IDE head register
   220 000000B9 ????                <2> fx_phys_cylinders resw	1	;	word fx_phys_cylinders;	 physical number of cylinders
   221 000000BB ??                  <2> fx_phys_heads	resb	1	;	byte fx_phys_heads;	 physical number of heads
   222 000000BC ????                <2> fx_LBA_low	resw	1	;	word fx_LBA_low;	 low word of LBA28 number of sectors
   223 000000BE ??                  <2> fx_log_sectors	resb	1	;	byte fx_log_sectors;	 logical number of sectors per track
   224 000000BF ??                  <2> fx_checksum	resb	1	;	byte fx_checksum;	 checksum, dunno how to compute
   225 000000C0 <res 10h>           <2> fx81            resb    16	;*/	struct EDD_disk fx81;	/* fixed disk parameter area 1
   226 000000D0 <res 10h>           <2> fx82            resb    16	;*/	struct EDD_disk fx82;	/* fixed disk parameter area 2
   227 000000E0 <res 10h>           <2> fx83            resb    16	;*/	struct EDD_disk fx83;	/* fixed disk parameter area 3
   228                              <2> ;
   229                              <2> ;
   230                              <2> 
   231 000000F0 ????                <2> FPEM_segment    resw    1       ;*/	word FPEM_segment;	/* FPEM data segment
   232                              <2> 
   233 000000F2 ????                <2> EBDA_paragraph  resw    1       ;*/	word EBDA_paragraph;	/* lowest EBDA paragraph
   234                              <2> 
   235 000000F4 ????                <2> dma0_cw         resw    1       ;*/	word dma0_cw;		/* end of dma control word
   236 000000F6 ????                <2> dma1_cw         resw    1       ;*/	word dma1_cw;		/*   ditto
   237                              <2> 
   238 000000F8 ????                <2> fdc_type	resb	2	;*/	byte fdc_type[2];	/* disk type in low nibble, alternate in hi nib 
   239                              <2> 
   240 000000FA ????????            <2> debug_static_ptr  resw	2	;*/	void *debug_static_ptr;	/* pointer to debug static area
   241                              <2> 
   242 000000FE ??                  <2> n_fixed_disks   resb    1       ;*/	byte n_fixed_disks;	/* number of fixed disks
   243                              <2> 
   244 000000FF ??                  <2> cpu_xtal        resb    1       ;*/	byte cpu_xtal;		/* CPU crystal frequency in Mhz 
   245                              <2> ;								   CPU clock is half of this
   246                              <2> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   247                              <2> ;
   248                              <2> ;  System configuration stuff below
   249                              <2> ;	c.f., CONFIG.ASM (ANSI.CFG, CVDU.CFG, etc.), User configuration stuff
   250                              <2> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   251                              <2> %if 0				;*/
   252                              <2> #define FIXED_DISK_MAX 4		/*
   253                              <2> %else
   254                              <2> %define FIXED_DISK_MAX 4
   255                              <2> %endif
   256                              <2> %if 0				;*/
   257                              <2> #define PPIDE_driver 1		/*
   258                              <2> %else
   259                              <2> %define PPIDE_driver 1
   260                              <2> %endif
   261                              <2> %if 0				;*/
   262                              <2> #define DIDE_driver 0		/*
   263                              <2> %else
   264                              <2> %define DIDE_driver 0
   265                              <2> %endif
   266                              <2> %if 0				;*/
   267                              <2> #define DISKIO_driver 1		/*
   268                              <2> %else
   269                              <2> %define DISKIO_driver 1
   270                              <2> %endif
   271                              <2> %if 0				;*/
   272                              <2> #define MFPIC_driver 1		/*
   273                              <2> %else
   274                              <2> %define MFPIC_driver 1
   275                              <2> %endif
   276                              <2> %if 0				;*/
   277                              <2> #define DSD_driver 1		/*
   278                              <2> %else
   279                              <2> %define DSD_driver 1
   280                              <2> %endif
   281                              <2> %if 0				;*/
   282                              <2> #define V3IDE8_driver (SBC188==3)		/*
   283                              <2> %else
   284                              <2> %define V3IDE8_driver (SBC188==3)
   285                              <2> %endif
   286                              <2> 				;*/
    78                              <1> 
    79                              <1> ;  this must be the same in EQUATES.H */
    80                              <1> %if SOFT_DEBUG
    81                              <1> %define NBREAK  8
    82                              <1> %endif
    83                              <1> 
    84                              <1> 
    85                              <1> %if 0
    86                              <1>         segment _TEXT
    87                              <1> ;; *************************************************************************
    88                              <1> 
    89                              <1> 
    90                              <1> 
    91                              <1> 
    92                              <1> ;; ************************ DOS Data Segment *******************************
    93                              <1> ;dosdir	SEGMENT at 50h				; Boot disk directory from IPL
    94                              <1> ;xerox	label	byte				;  0 if Print Screen idle
    95                              <1> ;						;  1 if PrtSc xeroxing screen
    96                              <1> ;						;255 if PrtSc error in xerox
    97                              <1> ;						;  ...non-grafix PrtSc in bios
    98                              <1> ;	db	200h dup(?)			; PC-DOS bootstrap procedure
    99                              <1> ;						;  ...IBMBIO.COM buffers the
   100                              <1> ;						;  ...directory of the boot
   101                              <1> ;						;  ...device here at IPL time
   102                              <1> ;						;  ...when locating the guts
   103                              <1> ;						;  ...of the operating system
   104                              <1> ;						;  ...filename "IBMDOS.COM"
   105                              <1> ;dosdir	ends
   106                              <1> ;; *************************************************************************
   107                              <1> ;; ************************ DOS IPL Segment ********************************
   108                              <1> ;dosseg	SEGMENT at 70h				; "Kernel" of PC-DOS op sys
   109                              <1> ;;IBMBIO.COM file loaded by boot block. Device Drivers/Bootstrap. CONTIGUOUS<---
   110                              <1> ;;IBMDOS.COM operating system nucleus immediately follows IBMBIO.COM and       !
   111                              <1> ;;     doesn`t have to be contiguous.  The IBMDOS operating system nucleus     !
   112                              <1> ;;     binary image is loaded by transient code in IBMBIO binary image	      !
   113                              <1> ;dosseg	ends					;			      !
   114                              <1> ;iplseg	SEGMENT at 0h				; Segment for boot block      !
   115                              <1> ;;The following boot block is loaded with 512 bytes on the first sector of     !
   116                              <1> ;;the bootable device by code resident in the ROM-resident bios.  Control is   !
   117                              <1> ;;then transferred to the first word 0000:7C00 of the disk-resident bootstrap  !
   118                              <1> ;	ORG	07C00h				;  ..offset for boot block    !
   119                              <1> ;boot	db	200h dup(?)			;  ..start disk resident boot--
   120                              <1> ;iplseg	ends
   121                              <1> 
   122                              <1> %endif
    30                                  
    31                                  	segment	_TEXT
    32                                  
    33                                  ;========================================================================
    34                                  ; tests - run tests
    35                                  ;========================================================================
    36                                  	global	tests
    37                                  tests:
    38 00000000 1E                      	push	ds
    39 00000001 68[0000]                	push	msg_tests
    40 00000004 E8(0000)                	call	_cprintf
    41 00000007 83C404                  	add	sp,4
    42 0000000A B400                    	mov	ah,0
    43 0000000C CD16                    	int	16h
    44 0000000E 3C76                    	cmp	al,'v'
    45 00000010 7505                    	jnz	.1
    46 00000012 E84900                  	call	test_video
    47 00000015 EBE9                    	jmp	tests
    48                                  .1:
    49 00000017 3C6B                    	cmp	al,'k'
    50 00000019 7505                    	jnz	.2
    51 0000001B E81900                  	call	test_keyboard
    52 0000001E EBE0                    	jmp	tests
    53                                  .2:
    54 00000020 3C69                    	cmp	al,'i'
    55 00000022 7504                    	jnz	.3
    56 00000024 CD21                    	int	21h		; call some interrupt
    57 00000026 EBD8                    	jmp	tests
    58                                  .3:
    59 00000028 3C68                    	cmp	al,'h'
    60 0000002A 7503                    	jnz	.4
    61 0000002C E9DE00                  	jmp	test_halt
    62                                  .4:
    63 0000002F 3C62                    	cmp	al,'b'
    64 00000031 7502                    	jnz	.loop
    65 00000033 CD19                    	int	19h		; boot the OS
    66                                  .loop:
    67 00000035 EBC9                    	jmp	tests
    68                                  
    69                                  ;========================================================================
    70                                  ; test_keyboard - wait for key, print its ASCII and scan codes
    71                                  ;========================================================================
    72                                  test_keyboard:
    73 00000037 1E                      	push	ds
    74 00000038 68[C500]                	push	msg_kbd_test
    75 0000003B E8(0000)                	call	_cprintf
    76 0000003E 83C404                  	add	sp,4
    77                                  .loop:
    78 00000041 B400                    	mov	ah,0
    79 00000043 CD16                    	int	16h
    80 00000045 B700                    	mov	bh,0
    81 00000047 88E3                    	mov	bl,ah
    82 00000049 53                      	push	bx
    83 0000004A 88C3                    	mov	bl,al
    84 0000004C 53                      	push	bx
    85 0000004D 1E                      	push	ds
    86 0000004E 68[1201]                	push	msg_kbd_code
    87 00000051 E8(0000)                	call	_cprintf
    88 00000054 3C1B                    	cmp	al,1Bh		; ESC?
    89 00000056 7405                    	je	.exit
    90 00000058 83C408                  	add	sp,8
    91 0000005B EBE4                    	jmp	.loop
    92                                  
    93                                  .exit:
    94 0000005D C3                      	ret
    95                                  
    96                                  ;========================================================================
    97                                  ; test_video - switch video modes and test various int 10h functions
    98                                  ;========================================================================
    99                                  test_video:
   100 0000005E BE[6E01]                	mov	si,video_modes
   101 00000061 B90A00                  	mov	cx,10
   102                                  .loop:
   103 00000064 51                      	push	cx
   104 00000065 B402                    	mov	ah,02h
   105 00000067 B700                    	mov	bh,0
   106 00000069 BA0417                  	mov	dx,1704h
   107 0000006C CD10                    	int	10h
   108 0000006E B400                    	mov	ah,0
   109 00000070 8A04                    	mov	al,byte [si]
   110 00000072 50                      	push	ax
   111 00000073 50                      	push	ax
   112 00000074 1E                      	push	ds
   113 00000075 68[3701]                	push	msg_video_mode_test
   114 00000078 E8(0000)                	call	_cprintf
   115 0000007B 83C406                  	add	sp,6
   116 0000007E B400                    	mov	ah,0
   117 00000080 CD16                    	int	16h
   118 00000082 58                      	pop	ax
   119 00000083 CD10                    	int	10h
   120 00000085 88C6                    	mov	dh,al		; row = mode number
   121 00000087 B401                    	mov	ah,01h
   122 00000089 B90726                  	mov	cx,2607h
   123 0000008C CD10                    	int	10h
   124 0000008E 80E67F                  	and	dh,7fh
   125 00000091 80C602                  	add	dh,2
   126 00000094 B208                    	mov	dl,8
   127 00000096 B80213                  	mov	ax,1302h
   128 00000099 B700                    	mov	bh,0
   129 0000009B B90001                  	mov	cx,256
   130 0000009E 1E                      	push	ds
   131 0000009F 07                      	pop	es
   132 000000A0 BD[7801]                	mov	bp,msg_mode_test
   133 000000A3 CD10                    	int	10h
   134 000000A5 B400                    	mov	ah,00h
   135 000000A7 CD16                    	int	16h
   136                                  
   137 000000A9 E81400                  	call	test_int10_fn06
   138 000000AC E84500                  	call	test_int10_fn09
   139                                  
   140 000000AF B401                    	mov	ah,01h
   141 000000B1 B90700                  	mov	cx,0007h
   142 000000B4 CD10                    	int	10h
   143 000000B6 59                      	pop	cx
   144 000000B7 46                      	inc	si
   145 000000B8 E2AA                    	loop	.loop
   146                                  
   147 000000BA B80700                  	mov	ax,0007h	; set video mode 7 before exiting
   148 000000BD CD10                    	int	10h
   149 000000BF C3                      	ret
   150                                  
   151                                  test_int10_fn06:
   152 000000C0 B80206                  	mov	ax,0602h
   153 000000C3 B73E                    	mov	bh,3Eh
   154 000000C5 B90005                  	mov	cx,0500h
   155 000000C8 BA2708                  	mov	dx,0827h
   156 000000CB CD10                    	int	10h
   157 000000CD B400                    	mov	ah,00h
   158 000000CF CD16                    	int	16h
   159 000000D1 B80107                  	mov	ax,0701h
   160 000000D4 B73E                    	mov	bh,3Eh
   161 000000D6 B90009                  	mov	cx,0900h
   162 000000D9 BA270B                  	mov	dx,0B27h
   163 000000DC CD10                    	int	10h
   164 000000DE B400                    	mov	ah,00h
   165 000000E0 CD16                    	int	16h
   166 000000E2 B80006                  	mov	ax,0600h
   167 000000E5 B73E                    	mov	bh,3Eh
   168 000000E7 B9000B                  	mov	cx,0B00h
   169 000000EA BA270C                  	mov	dx,0C27h
   170 000000ED CD10                    	int	10h
   171 000000EF B400                    	mov	ah,00h
   172 000000F1 CD16                    	int	16h
   173 000000F3 C3                      	ret
   174                                  
   175                                  test_int10_fn09:
   176 000000F4 B402                    	mov	ah,02h
   177 000000F6 B700                    	mov	bh,0
   178 000000F8 BA0000                  	mov	dx,0000h
   179 000000FB CD10                    	int	10h
   180                                  
   181 000000FD B83009                  	mov	ax,0930h
   182 00000100 BB3E00                  	mov	bx,003Eh
   183 00000103 B98007                  	mov	cx,80*24
   184 00000106 CD10                    	int	10h
   185                                  
   186 00000108 B400                    	mov	ah,0
   187 0000010A CD16                    	int	16h
   188 0000010C C3                      	ret
   189                                  
   190                                  ;========================================================================
   191                                  ; test_halt - halt the system
   192                                  ;========================================================================
   193                                  test_halt:
   194 0000010D 1E                      	push	ds
   195 0000010E 68[7803]                	push	msg_halted
   196 00000111 E8(0000)                	call	_cprintf
   197 00000114 83C404                  	add	sp,4
   198 00000117 FA                      	cli
   199 00000118 F4                      	hlt
   200 00000119 EBF2                    	jmp	test_halt
   201                                  ;========================================================================
   202                                  
   203                                          segment	CONST
   204                                  msg_tests:
   205 00000000 5465737473206D656E-     	db	"Tests menu", NL
   205 00000009 750A               
   206 0000000B 2D2D2D2D2D2D2D2D2D-     	db	"------------------------------------------------------", NL
   206 00000014 2D2D2D2D2D2D2D2D2D-
   206 0000001D 2D2D2D2D2D2D2D2D2D-
   206 00000026 2D2D2D2D2D2D2D2D2D-
   206 0000002F 2D2D2D2D2D2D2D2D2D-
   206 00000038 2D2D2D2D2D2D2D2D2D-
   206 00000041 0A                 
   207 00000042 68202D2068616C740A      	db	'h - halt', NL
   208 0000004B 69202D2063616C6C20-     	db	"i - call an unitialized interrupt", NL
   208 00000054 616E20756E69746961-
   208 0000005D 6C697A656420696E74-
   208 00000066 6572727570740A     
   209 0000006D 6B202D2072756E206B-     	db	"k - run keyboard test", NL
   209 00000076 6579626F6172642074-
   209 0000007F 6573740A           
   210 00000083 76202D2072756E2076-     	db	"v - run video test", NL
   210 0000008C 6964656F2074657374-
   210 00000095 0A                 
   211 00000096 62202D20626F6F7420-     	db	"b - boot the OS", NL
   211 0000009F 746865204F530A     
   212 000000A6 0A                      	db	NL
   213 000000A7 506C6561736520656E-     	db	"Please enter your selection:", NL, 0
   213 000000B0 74657220796F757220-
   213 000000B9 73656C656374696F6E-
   213 000000C2 3A0A00             
   214                                  
   215                                  msg_kbd_test:
   216 000000C5 54657374696E67206B-     	db	"Testing keyboard. Press keys to see their ASCII and scan codes. ESC to exit", NL, 0
   216 000000CE 6579626F6172642E20-
   216 000000D7 5072657373206B6579-
   216 000000E0 7320746F2073656520-
   216 000000E9 746865697220415343-
   216 000000F2 494920616E64207363-
   216 000000FB 616E20636F6465732E-
   216 00000104 2045534320746F2065-
   216 0000010D 7869740A00         
   217                                  msg_kbd_code:
   218 00000112 4B6579626F6172643A-     	db	"Keyboard: ASCII=0x%02x, scan=0x%02x", NL, 0
   218 0000011B 2041534349493D3078-
   218 00000124 253032782C20736361-
   218 0000012D 6E3D3078253032780A-
   218 00000136 00                 
   219                                  msg_video_mode_test:
   220 00000137 54657374696E672076-     	db	"Testing video mode 0x%x. Press any key to continue...", NL,0
   220 00000140 6964656F206D6F6465-
   220 00000149 20307825782E205072-
   220 00000152 65737320616E79206B-
   220 0000015B 657920746F20636F6E-
   220 00000164 74696E75652E2E2E0A-
   220 0000016D 00                 
   221                                  video_modes:
   222 0000016E 000102030780818283-     	db	00h,01h,02h,03h,07h,80h,81h,82h,83h,07h
   222 00000177 07                 
   223                                  msg_mode_test:
   224 00000178 300031013202330334-     	db	'0',00h,'1',01h,'2',02h,'3',03h,'4',04h,'5',05h,'6',06h,'7',07h
   224 00000181 04350536063707     
   225 00000188 38083909410A420B43-     	db	'8',08h,'9',09h,'A',0Ah,'B',0Bh,'C',0Ch,'D',0Dh,'E',0Eh,'F',0Fh
   225 00000191 0C440D450E460F     
   226 00000198 301031113212331334-     	db	'0',10h,'1',11h,'2',12h,'3',13h,'4',14h,'5',15h,'6',16h,'7',17h
   226 000001A1 14351536163717     
   227 000001A8 38183919411A421B43-     	db	'8',18h,'9',19h,'A',1Ah,'B',1Bh,'C',1Ch,'D',1Dh,'E',1Eh,'F',1Fh
   227 000001B1 1C441D451E461F     
   228 000001B8 302031213222332334-     	db	'0',20h,'1',21h,'2',22h,'3',23h,'4',24h,'5',25h,'6',26h,'7',27h
   228 000001C1 24352536263727     
   229 000001C8 38283929412A422B43-     	db	'8',28h,'9',29h,'A',2Ah,'B',2Bh,'C',2Ch,'D',2Dh,'E',2Eh,'F',2Fh
   229 000001D1 2C442D452E462F     
   230 000001D8 303031313232333334-     	db	'0',30h,'1',31h,'2',32h,'3',33h,'4',34h,'5',35h,'6',36h,'7',37h
   230 000001E1 34353536363737     
   231 000001E8 38383939413A423B43-     	db	'8',38h,'9',39h,'A',3Ah,'B',3Bh,'C',3Ch,'D',3Dh,'E',3Eh,'F',3Fh
   231 000001F1 3C443D453E463F     
   232 000001F8 304031413242334334-     	db	'0',40h,'1',41h,'2',42h,'3',43h,'4',44h,'5',45h,'6',46h,'7',47h
   232 00000201 44354536463747     
   233 00000208 38483949414A424B43-     	db	'8',48h,'9',49h,'A',4Ah,'B',4Bh,'C',4Ch,'D',4Dh,'E',4Eh,'F',4Fh
   233 00000211 4C444D454E464F     
   234 00000218 305031513252335334-     	db	'0',50h,'1',51h,'2',52h,'3',53h,'4',54h,'5',55h,'6',56h,'7',57h
   234 00000221 54355536563757     
   235 00000228 38583959415A425B43-     	db	'8',58h,'9',59h,'A',5Ah,'B',5Bh,'C',5Ch,'D',5Dh,'E',5Eh,'F',5Fh
   235 00000231 5C445D455E465F     
   236 00000238 306031613262336334-     	db	'0',60h,'1',61h,'2',62h,'3',63h,'4',64h,'5',65h,'6',66h,'7',67h
   236 00000241 64356536663767     
   237 00000248 38683969416A426B43-     	db	'8',68h,'9',69h,'A',6Ah,'B',6Bh,'C',6Ch,'D',6Dh,'E',6Eh,'F',6Fh
   237 00000251 6C446D456E466F     
   238 00000258 307031713272337334-     	db	'0',70h,'1',71h,'2',72h,'3',73h,'4',74h,'5',75h,'6',76h,'7',77h
   238 00000261 74357536763777     
   239 00000268 38783979417A427B43-     	db	'8',78h,'9',79h,'A',7Ah,'B',7Bh,'C',7Ch,'D',7Dh,'E',7Eh,'F',7Fh
   239 00000271 7C447D457E467F     
   240 00000278 308031813282338334-     	db	'0',80h,'1',81h,'2',82h,'3',83h,'4',84h,'5',85h,'6',86h,'7',87h
   240 00000281 84358536863787     
   241 00000288 38883989418A428B43-     	db	'8',88h,'9',89h,'A',8Ah,'B',8Bh,'C',8Ch,'D',8Dh,'E',8Eh,'F',8Fh
   241 00000291 8C448D458E468F     
   242 00000298 309031913292339334-     	db	'0',90h,'1',91h,'2',92h,'3',93h,'4',94h,'5',95h,'6',96h,'7',97h
   242 000002A1 94359536963797     
   243 000002A8 38983999419A429B43-     	db	'8',98h,'9',99h,'A',9Ah,'B',9Bh,'C',9Ch,'D',9Dh,'E',9Eh,'F',9Fh
   243 000002B1 9C449D459E469F     
   244 000002B8 30A031A132A233A334-     	db	'0',0A0h,'1',0A1h,'2',0A2h,'3',0A3h,'4',0A4h,'5',0A5h,'6',0A6h,'7',0A7h
   244 000002C1 A435A536A637A7     
   245 000002C8 38A839A941AA42AB43-     	db	'8',0A8h,'9',0A9h,'A',0AAh,'B',0ABh,'C',0ACh,'D',0ADh,'E',0AEh,'F',0AFh
   245 000002D1 AC44AD45AE46AF     
   246 000002D8 30B031B132B233B334-     	db	'0',0B0h,'1',0B1h,'2',0B2h,'3',0B3h,'4',0B4h,'5',0B5h,'6',0B6h,'7',0B7h
   246 000002E1 B435B536B637B7     
   247 000002E8 38B839B941BA42BB43-     	db	'8',0B8h,'9',0B9h,'A',0BAh,'B',0BBh,'C',0BCh,'D',0BDh,'E',0BEh,'F',0BFh
   247 000002F1 BC44BD45BE46BF     
   248 000002F8 30C031C132C233C334-     	db	'0',0C0h,'1',0C1h,'2',0C2h,'3',0C3h,'4',0C4h,'5',0C5h,'6',0C6h,'7',0C7h
   248 00000301 C435C536C637C7     
   249 00000308 38C839C941CA42CB43-     	db	'8',0C8h,'9',0C9h,'A',0CAh,'B',0CBh,'C',0CCh,'D',0CDh,'E',0CEh,'F',0CFh
   249 00000311 CC44CD45CE46CF     
   250 00000318 30D031D132D233D334-     	db	'0',0D0h,'1',0D1h,'2',0D2h,'3',0D3h,'4',0D4h,'5',0D5h,'6',0D6h,'7',0D7h
   250 00000321 D435D536D637D7     
   251 00000328 38D839D941DA42DB43-     	db	'8',0D8h,'9',0D9h,'A',0DAh,'B',0DBh,'C',0DCh,'D',0DDh,'E',0DEh,'F',0DFh
   251 00000331 DC44DD45DE46DF     
   252 00000338 30E031E132E233E334-     	db	'0',0E0h,'1',0E1h,'2',0E2h,'3',0E3h,'4',0E4h,'5',0E5h,'6',0E6h,'7',0E7h
   252 00000341 E435E536E637E7     
   253 00000348 38E839E941EA42EB43-     	db	'8',0E8h,'9',0E9h,'A',0EAh,'B',0EBh,'C',0ECh,'D',0EDh,'E',0EEh,'F',0EFh
   253 00000351 EC44ED45EE46EF     
   254 00000358 30F031F132F233F334-     	db	'0',0F0h,'1',0F1h,'2',0F2h,'3',0F3h,'4',0F4h,'5',0F5h,'6',0F6h,'7',0F7h
   254 00000361 F435F536F637F7     
   255 00000368 38F839F941FA42FB43-     	db	'8',0F8h,'9',0F9h,'A',0FAh,'B',0FBh,'C',0FCh,'D',0FDh,'E',0FEh,'F',0FFh
   255 00000371 FC44FD45FE46FF     
   256                                  msg_halted:
   257 00000378 53797374656D206861-     	db	'System halted.', NL, 0
   257 00000381 6C7465642E0A00     
