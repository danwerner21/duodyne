ca65 V2.18 - Ubuntu 2.19-1
Main file   : scrram.asm
Current file: scrram.asm

000000r 1               ;__SCRRAM_______________________________________________________
000000r 1               ;
000000r 1               ; This is a quick program that can be put on a ROM to test the
000000r 1               ; 65C02 board. It will output a continuous stream of TEXT
000000r 1               ; to the UART. It does not require the stack, BUT DOES TEST RAM and
000000r 1               ; is pretty much the simplest code imaginable. :)
000000r 1               ;
000000r 1               ; It assumes that the 65C02 board is set for IOPage $DF.
000000r 1               ;
000000r 1               ; ** Note that this program will set the console port to 9600/8/n/1.
000000r 1               ;
000000r 1               ;_______________________________________________________________
000000r 1               
000000r 1               ; UART 16C550 SERIAL
000000r 1               UART0           = $DF58         ; DATA IN/OUT
000000r 1               UART1           = $DF59         ; CHECK RX
000000r 1               UART2           = $DF5A         ; INTERRUPTS
000000r 1               UART3           = $DF5B         ; LINE CONTROL
000000r 1               UART4           = $DF5C         ; MODEM CONTROL
000000r 1               UART5           = $DF5D         ; LINE STATUS
000000r 1               UART6           = $DF5E         ; MODEM STATUS
000000r 1               UART7           = $DF5F         ; SCRATCH REG.
000000r 1               
000000r 1               BANK00          = $DF50
000000r 1               BANK40          = $DF51
000000r 1               BANK80          = $DF52
000000r 1               BANKC0          = $DF53
000000r 1               
000000r 1                       .SEGMENT "ROM"
000000r 1               
000000r 1               ;__COLD_START___________________________________________________
000000r 1               ;
000000r 1               ; PERFORM SYSTEM COLD INIT
000000r 1               ;
000000r 1               ;_______________________________________________________________
000000r 1               COLD_START:
000000r 1               
000000r 1               ;* Setup Memory Banks (RAM 0000-C000, ROM C000-FFFF)
000000r 1  A9 80                LDA     #$80
000002r 1  8D 50 DF             STA     BANK00
000005r 1  A9 81                LDA     #$81
000007r 1  8D 51 DF             STA     BANK40
00000Ar 1  A9 82                LDA     #$82
00000Cr 1  8D 52 DF             STA     BANK80
00000Fr 1  A9 03                LDA     #$03
000011r 1  8D 53 DF             STA     BANKC0
000014r 1               
000014r 1  A9 80                LDA     #$80            ;
000016r 1  8D 5B DF             STA     UART3           ; SET DLAB FLAG
000019r 1  A9 0C                LDA     #12             ; SET TO 12 = 9600 BAUD
00001Br 1  8D 58 DF             STA     UART0           ; save baud rate
00001Er 1  A9 00                LDA     #00             ;
000020r 1  8D 59 DF             STA     UART1           ;
000023r 1  A9 03                LDA     #03             ;
000025r 1  8D 5B DF             STA     UART3           ; SET 8 BIT DATA, 1 STOPBIT
000028r 1  A9 0B                LDA     #$0B             ; ACTIVATE MAPPER
00002Ar 1  8D 5C DF             STA     UART4           ;
00002Dr 1               
00002Dr 1  A9 41                LDA     #'A'
00002Fr 1  8D 00 10             STA     $1000
000032r 1               
000032r 1               SERIAL_OUTCH:
000032r 1               TX_BUSYLP:
000032r 1  AD 5D DF             LDA     UART5           ; READ LINE STATUS REGISTER
000035r 1  29 20                AND     #$20            ; TEST IF UART IS READY TO SEND (BIT 5)
000037r 1  C9 00                CMP     #$00
000039r 1  F0 F7                BEQ     TX_BUSYLP       ; IF NOT REPEAT
00003Br 1  AD 00 10             LDA     $1000
00003Er 1  8D 58 DF             STA     UART0           ; THEN WRITE THE CHAR TO UART
000041r 1  EE 00 10             INC     $1000
000044r 1  AD 00 10             LDA     $1000
000047r 1  C9 5A                CMP     #'Z'
000049r 1  D0 E7                BNE     SERIAL_OUTCH
00004Br 1  A9 41                LDA     #'A'
00004Dr 1  8D 00 10             STA     $1000
000050r 1  4C rr rr             JMP     SERIAL_OUTCH
000053r 1               
000053r 1               
000053r 1                       .SEGMENT "VECTORS"
000000r 1               ; $FFFA
000000r 1               NMIVECTOR:
000000r 1  rr rr                .WORD   COLD_START      ;
000002r 1               RSTVECTOR:
000002r 1  rr rr                .WORD   COLD_START      ;
000004r 1               INTVECTOR:
000004r 1  rr rr                .WORD   COLD_START      ;
000006r 1               
000006r 1                       .END
